{
  "hash": "c51721ca9427445ce9054490ea1bdbf6",
  "result": {
    "markdown": "---\ntitle: \"{{< meta ct_title >}}\"\nsubtitle: \"{{< meta subtitle_scanpy >}}\"\ndescription: \"{{< meta ct_description >}}\"\nformat: html\nengine: jupyter\n---\n\n::: {.callout-note}\nCode chunks run Python commands unless it starts with `%%bash`, in which case, those chunks run shell commands.\n:::\n\n\n{{< meta ct_1 >}}\n\n\n\nHere we will use a reference PBMC dataset that we get from scanpy\ndatasets and classify celltypes based on two methods:\n\n-   Using scanorama for integration just as in the integration lab, and\n    then do label transfer based on closest neighbors.\n-   Using ingest to project the data onto the reference data and\n    transfer labels.\n\n\n{{< meta ct_read_1 >}}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n# verbosity: errors (0), warnings (1), info (2), hints (3)\nsc.settings.verbosity = 2             \nsc.settings.set_figure_params(dpi=80)\n```\n:::\n\n\n{{< meta ct_read_2 >}}\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nadata = sc.read_h5ad('./data/results/scanpy_clustered_covid.h5ad')\nadata.uns['log1p']['base']=None\n\nprint(adata.shape)\nprint(adata.raw.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5646, 3090)\n(5646, 18752)\n```\n:::\n:::\n\n\n{{< meta ct_read_3 >}}\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nadata = adata[adata.obs[\"sample\"] == \"ctrl_13\",:]\nprint(adata.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1132, 3090)\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsc.pl.umap(\n    adata, color=[\"louvain_0.6\"], palette=sc.pl.palettes.default_20\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n## {{< meta ct_ref >}}\n\nLoad the reference data from `scanpy.datasets`. It is the annotated and processed pbmc3k dataset from 10x.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nadata_ref = sc.datasets.pbmc3k_processed() \n\nadata_ref.obs['sample']='pbmc3k'\n\nprint(adata_ref.shape)\nadata_ref.obs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2638, 1838)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_genes</th>\n      <th>percent_mito</th>\n      <th>n_counts</th>\n      <th>louvain</th>\n      <th>sample</th>\n    </tr>\n    <tr>\n      <th>index</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AAACATACAACCAC-1</th>\n      <td>781</td>\n      <td>0.030178</td>\n      <td>2419.0</td>\n      <td>CD4 T cells</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>AAACATTGAGCTAC-1</th>\n      <td>1352</td>\n      <td>0.037936</td>\n      <td>4903.0</td>\n      <td>B cells</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>AAACATTGATCAGC-1</th>\n      <td>1131</td>\n      <td>0.008897</td>\n      <td>3147.0</td>\n      <td>CD4 T cells</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>AAACCGTGCTTCCG-1</th>\n      <td>960</td>\n      <td>0.017431</td>\n      <td>2639.0</td>\n      <td>CD14+ Monocytes</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>AAACCGTGTATGCG-1</th>\n      <td>522</td>\n      <td>0.012245</td>\n      <td>980.0</td>\n      <td>NK cells</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>TTTCGAACTCTCAT-1</th>\n      <td>1155</td>\n      <td>0.021104</td>\n      <td>3459.0</td>\n      <td>CD14+ Monocytes</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>TTTCTACTGAGGCA-1</th>\n      <td>1227</td>\n      <td>0.009294</td>\n      <td>3443.0</td>\n      <td>B cells</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>TTTCTACTTCCTCG-1</th>\n      <td>622</td>\n      <td>0.021971</td>\n      <td>1684.0</td>\n      <td>B cells</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>TTTGCATGAGAGGC-1</th>\n      <td>454</td>\n      <td>0.020548</td>\n      <td>1022.0</td>\n      <td>B cells</td>\n      <td>pbmc3k</td>\n    </tr>\n    <tr>\n      <th>TTTGCATGCCTCAC-1</th>\n      <td>724</td>\n      <td>0.008065</td>\n      <td>1984.0</td>\n      <td>CD4 T cells</td>\n      <td>pbmc3k</td>\n    </tr>\n  </tbody>\n</table>\n<p>2638 rows Ã— 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nsc.pl.umap(adata_ref, color='louvain')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\nMake sure we have the same genes in both datset by taking the intersection\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(adata_ref.shape[1])\nprint(adata.shape[1])\nvar_names = adata_ref.var_names.intersection(adata.var_names)\nprint(len(var_names))\n\nadata_ref = adata_ref[:, var_names]\nadata = adata[:, var_names]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1838\n3090\n476\n```\n:::\n:::\n\n\nFirst we need to rerun pca and umap with the same gene set for both datasets.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nsc.pp.pca(adata_ref)\nsc.pp.neighbors(adata_ref)\nsc.tl.umap(adata_ref)\nsc.pl.umap(adata_ref, color='louvain')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nsc.pp.pca(adata)\nsc.pp.neighbors(adata)\nsc.tl.umap(adata)\nsc.pl.umap(adata, color='louvain_0.6')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\n## Integrate with scanorama\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nimport scanorama\n\n#subset the individual dataset to the same variable genes as in MNN-correct.\nalldata = dict()\nalldata['ctrl']=adata\nalldata['ref']=adata_ref\n\n#convert to list of AnnData objects\nadatas = list(alldata.values())\n\n# run scanorama.integrate\nscanorama.integrate_scanpy(adatas, dimred = 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound 476 genes among all datasets\n[[0.         0.96378092]\n [0.         0.        ]]\nProcessing datasets (0, 1)\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# add in sample info\nadata_ref.obs['sample']='pbmc3k'\n\n# create a merged scanpy object and add in the scanorama \nadata_merged = alldata['ctrl'].concatenate(alldata['ref'], batch_key='sample', batch_categories=['ctrl','pbmc3k'])\n\nembedding = np.concatenate([ad.obsm['X_scanorama'] for ad in adatas], axis=0)\nadata_merged.obsm['Scanorama'] = embedding\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n#run  umap.\nsc.pp.neighbors(adata_merged, n_pcs =50, use_rep = \"Scanorama\")\nsc.tl.umap(adata_merged)\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nsc.pl.umap(adata_merged, color=[\"sample\",\"louvain\"])\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\n### Label transfer\n\nUsing the function in the Spatial tutorial at the scanpy website we will calculate normalized cosine distances between the two datasets and tranfer labels to the celltype with the highest scores.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfrom sklearn.metrics.pairwise import cosine_distances\n\ndistances = 1 - cosine_distances(\n    adata_merged[adata_merged.obs['sample'] == \"pbmc3k\"].obsm[\"Scanorama\"],\n    adata_merged[adata_merged.obs['sample'] == \"ctrl\"].obsm[\"Scanorama\"],\n)\n\ndef label_transfer(dist, labels, index):\n    lab = pd.get_dummies(labels)\n    class_prob = lab.to_numpy().T @ dist\n    norm = np.linalg.norm(class_prob, 2, axis=0)\n    class_prob = class_prob / norm\n    class_prob = (class_prob.T - class_prob.min(1)) / class_prob.ptp(1)\n    # convert to df\n    cp_df = pd.DataFrame(\n        class_prob, columns=lab.columns\n    )\n    cp_df.index = index\n    # classify as max score\n    m = cp_df.idxmax(axis=1)\n    \n    return m\n\nclass_def = label_transfer(distances, adata_ref.obs.louvain, adata.obs.index)\n\n# add to obs section of the original object\nadata.obs['predicted'] = class_def\n\nsc.pl.umap(adata, color=\"predicted\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-15-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# add to merged object.\nadata_merged.obs['predicted'] = class_def.append(adata_ref.obs['louvain']).tolist()\n\nsc.pl.umap(adata_merged, color=[\"sample\",\"louvain\",'predicted'])\n#plot only ctrl cells.\nsc.pl.umap(adata_merged[adata_merged.obs['sample']=='ctrl'], color='predicted')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-16-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-16-output-2.png){}\n:::\n:::\n\n\n## Ingest\n\nAnother method for celltype prediction is Ingest, for more information, please look at\nhttps://scanpy-tutorials.readthedocs.io/en/latest/integrating-data-using-ingest.html\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nsc.tl.ingest(adata, adata_ref, obs='louvain')\nsc.pl.umap(adata, color=['louvain','louvain_0.6'], wspace=0.5)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-17-output-1.png){}\n:::\n:::\n\n\n## Compare results\n\nThe predictions from ingest is stored in the column 'louvain' while we\nnamed the label transfer with scanorama as 'predicted'\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nsc.pl.umap(adata, color=['louvain','predicted'], wspace=0.5)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-18-output-1.png){}\n:::\n:::\n\n\nAs you can see, the main celltypes are the same, but dendritic cells are mainly predicted to cluster 8 by ingest and the proportions of the different celltypes are different.\n\nThe only way to make sure which method you trust is to look at what genes the different celltypes express and use your biological knowledge to make decisions.\n\n## Gene set analysis\n\nAnother way of predicting celltypes is to use the differentially expressed genes per cluster and compare to lists of known cell marker genes. This requires a list of genes that you trust and that is relevant\nfor the tissue you are working on.\n\nYou can either run it with a marker list from the ontology or a list of your choice as in the example below.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf = pd.read_table('./data/cellmarker/Human_cell_markers.txt')\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>speciesType</th>\n      <th>tissueType</th>\n      <th>UberonOntologyID</th>\n      <th>cancerType</th>\n      <th>cellType</th>\n      <th>cellName</th>\n      <th>CellOntologyID</th>\n      <th>cellMarker</th>\n      <th>geneSymbol</th>\n      <th>geneID</th>\n      <th>proteinName</th>\n      <th>proteinID</th>\n      <th>markerResource</th>\n      <th>PMID</th>\n      <th>Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Human</td>\n      <td>Kidney</td>\n      <td>UBERON_0002113</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>Proximal tubular cell</td>\n      <td>NaN</td>\n      <td>Intestinal Alkaline Phosphatase</td>\n      <td>ALPI</td>\n      <td>248</td>\n      <td>PPBI</td>\n      <td>P09923</td>\n      <td>Experiment</td>\n      <td>9263997</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Human</td>\n      <td>Liver</td>\n      <td>UBERON_0002107</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>Ito cell (hepatic stellate cell)</td>\n      <td>CL_0000632</td>\n      <td>Synaptophysin</td>\n      <td>SYP</td>\n      <td>6855</td>\n      <td>SYPH</td>\n      <td>P08247</td>\n      <td>Experiment</td>\n      <td>10595912</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Human</td>\n      <td>Endometrium</td>\n      <td>UBERON_0001295</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>Trophoblast cell</td>\n      <td>CL_0000351</td>\n      <td>CEACAM1</td>\n      <td>CEACAM1</td>\n      <td>634</td>\n      <td>CEAM1</td>\n      <td>P13688</td>\n      <td>Experiment</td>\n      <td>10751340</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Human</td>\n      <td>Germ</td>\n      <td>UBERON_0000923</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>Primordial germ cell</td>\n      <td>CL_0000670</td>\n      <td>VASA</td>\n      <td>DDX4</td>\n      <td>54514</td>\n      <td>DDX4</td>\n      <td>Q9NQI0</td>\n      <td>Experiment</td>\n      <td>10920202</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Human</td>\n      <td>Corneal epithelium</td>\n      <td>UBERON_0001772</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>Epithelial cell</td>\n      <td>CL_0000066</td>\n      <td>KLF6</td>\n      <td>KLF6</td>\n      <td>1316</td>\n      <td>KLF6</td>\n      <td>Q99612</td>\n      <td>Experiment</td>\n      <td>12407152</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2863</th>\n      <td>Human</td>\n      <td>Embryo</td>\n      <td>UBERON_0000922</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>1-cell stage cell (Blastomere)</td>\n      <td>CL_0000353</td>\n      <td>ACCSL, ACVR1B, ARHGEF16, ASF1B, BCL2L10, BLCAP...</td>\n      <td>ACCSL, ACVR1B, ARHGEF16, ASF1B, BCL2L10, BLCAP...</td>\n      <td>390110, 91, 27237, 55723, 10017, 10904, 662, 7...</td>\n      <td>1A1L2, ACV1B, ARHGG, ASF1B, B2L10, BLCAP, SEC2...</td>\n      <td>Q4AC99, P36896, Q5VV41, Q9NVP2, Q9HD36, P62952...</td>\n      <td>Single-cell sequencing</td>\n      <td>23892778</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2864</th>\n      <td>Human</td>\n      <td>Embryo</td>\n      <td>UBERON_0000922</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>4-cell stage cell (Blastomere)</td>\n      <td>CL_0000353</td>\n      <td>ADPGK, AIM1, AIMP2, ARG2, ARHGAP17, ARIH1, CDC...</td>\n      <td>ADPGK, CRYBG1, AIMP2, ARG2, ARHGAP17, ARIH1, C...</td>\n      <td>83440, 202, 7965, 384, 55114, 25820, 55536, 24...</td>\n      <td>ADPGK, CRBG1, AIMP2, ARGI2, RHG17, ARI1, CDA7L...</td>\n      <td>Q9BRR6, Q9Y4K1, Q13155, P78540, Q68EM7, Q9Y4X5...</td>\n      <td>Single-cell sequencing</td>\n      <td>23892778</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2865</th>\n      <td>Human</td>\n      <td>Embryo</td>\n      <td>UBERON_0000922</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>8-cell stage cell (Blastomere)</td>\n      <td>CL_0000353</td>\n      <td>C11orf48, C19orf53, DHX9, DIABLO, EIF1AD, EIF4...</td>\n      <td>LBHD1, C19orf53, DHX9, DIABLO, EIF1AD, EIF4G1,...</td>\n      <td>79081, 28974, 1660, 56616, 84285, 1981, 26017,...</td>\n      <td>LBHD1, L10K, DHX9, DBLOH, EIF1A, IF4G1, FA32A,...</td>\n      <td>Q9BQE6, Q9UNZ5, Q08211, Q9NR28, Q8N9N8, Q04637...</td>\n      <td>Single-cell sequencing</td>\n      <td>23892778</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2866</th>\n      <td>Human</td>\n      <td>Embryo</td>\n      <td>UBERON_0000922</td>\n      <td>Normal</td>\n      <td>Normal cell</td>\n      <td>Morula cell (Blastomere)</td>\n      <td>CL_0000360</td>\n      <td>ADCK1, AGL, AIMP1, AKAP12, ARPC3, ATP1B3, ATP5...</td>\n      <td>ADCK1, AGL, AIMP1, AKAP12, ARPC3, ATP1B3, NA, ...</td>\n      <td>57143, 178, 9255, 9590, 10094, 483, NA, 586, 9...</td>\n      <td>ADCK1, GDE, AIMP1, AKA12, ARPC3, AT1B3, AT5F1,...</td>\n      <td>Q86TW2, P35573, Q12904, Q02952, O15145, P54709...</td>\n      <td>Single-cell sequencing</td>\n      <td>23892778</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2867</th>\n      <td>Human</td>\n      <td>Brain</td>\n      <td>UBERON_0000955</td>\n      <td>oligodendroglioma</td>\n      <td>Cancer cell</td>\n      <td>Cancer stem cell</td>\n      <td>NaN</td>\n      <td>ASCL1, BOC, CCND2, CD24, CHD7, EGFR, NFIB, SOX...</td>\n      <td>ASCL1, BOC, CCND2, CD24, CHD7, EGFR, NFIB, SOX...</td>\n      <td>429, 91653, 894, 100133941, 55636, 1956, 4781,...</td>\n      <td>ASCL1, BOC, CCND2, CD24, CHD7, EGFR, NFIB, SOX...</td>\n      <td>P50553, Q9BWV1, P30279, P25063, Q9P2D1, P00533...</td>\n      <td>Single-cell sequencing</td>\n      <td>27806376</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>2868 rows Ã— 15 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Filter for number of genes per celltype\nprint(df.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2868, 15)\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf['nG'] = df.geneSymbol.str.split(\",\").str.len()\n\ndf = df[df['nG'] > 5]\ndf = df[df['nG'] < 100]\nd = df[df['cancerType'] == \"Normal\"]\nprint(df.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(445, 16)\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf.index = df.cellName\ngene_dict = df.geneSymbol.str.split(\",\").to_dict()\n\n# run differential expression per cluster\nsc.tl.rank_genes_groups(adata, 'louvain_0.6', method='wilcoxon', key_added = \"wilcoxon\")\n```\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# do gene set overlap to the groups in the gene list and top 300 DEGs.\n\nimport gseapy\n\ngsea_res = dict()\npred = dict()\n\nfor cl in adata.obs['louvain_0.6'].cat.categories.tolist():\n    print(cl)\n    glist = sc.get.rank_genes_groups_df(adata, group=cl, key='wilcoxon')['names'].squeeze().str.strip().tolist()    \n    enr_res = gseapy.enrichr(gene_list=glist[:300],\n                      organism='Human',\n                      gene_sets=gene_dict,\n                      background = adata.raw.shape[1],    \n                      cutoff = 1)\n    if enr_res.results.shape[0] == 0:\n        pred[cl] = \"Unass\"\n    else:\n        enr_res.results.sort_values(by=\"P-value\",axis=0, ascending=True, inplace=True)\n        print(enr_res.results.head(2))\n        gsea_res[cl]=enr_res\n        pred[cl] = enr_res.results[\"Term\"][0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n    Gene_set                      Term Overlap   P-value  Adjusted P-value  \\\n1   gs_ind_0     Cancer stem-like cell     1/6  0.092243          0.201556   \n20  gs_ind_0  Spermatogonial stem cell     1/6  0.092243          0.201556   \n\n    Odds Ratio  Combined Score  Genes  \n1    14.444459       34.425848  ANPEP  \n20   14.444459       34.425848   BCL6  \n1\n   Gene_set                    Term Overlap   P-value  Adjusted P-value  \\\n2  gs_ind_0  Effector memory T cell     1/7  0.106771          0.213541   \n5  gs_ind_0                Monocyte     1/7  0.106771          0.213541   \n\n   Odds Ratio  Combined Score Genes  \n2   12.517863        28.00338  IL7R  \n5   12.517863        28.00338  CD52  \n2\n   Gene_set                      Term Overlap   P-value  Adjusted P-value  \\\n5  gs_ind_0  Parietal progenitor cell     1/7  0.106771          0.264036   \n0  gs_ind_0     CD8+ cytotoxic T cell    1/11  0.162599          0.264036   \n\n   Odds Ratio  Combined Score  Genes  \n5   12.517863       28.003380  ANXA1  \n0    8.162082       14.826179  LAMP1  \n3\n   Gene_set                    Term Overlap   P-value  Adjusted P-value  \\\n6  gs_ind_0  Effector memory T cell     1/7  0.106771          0.234106   \n8  gs_ind_0            Naive T cell     1/7  0.106771          0.234106   \n\n   Odds Ratio  Combined Score Genes  \n6   12.517863        28.00338  IL7R  \n8   12.517863        28.00338  CCR7  \n4\n   Gene_set                   Term Overlap   P-value  Adjusted P-value  \\\n0  gs_ind_0  Cancer stem-like cell     1/6  0.092243          0.186848   \n5  gs_ind_0             Macrophage     1/6  0.092243          0.186848   \n\n   Odds Ratio  Combined Score  Genes  \n0   14.444459       34.425848  ANPEP  \n5   14.444459       34.425848   AIF1  \n5\n   Gene_set              Term Overlap   P-value  Adjusted P-value  Odds Ratio  \\\n0  gs_ind_0  CD4-CD28+ T cell     1/8  0.121066          0.121066   11.044584   \n1  gs_ind_0  CD4-CD28- T cell     1/8  0.121066          0.121066   11.044584   \n\n   Combined Score Genes  \n0        23.31975  BCL2  \n1        23.31975  BCL2  \n6\n   Gene_set                             Term Overlap   P-value  \\\n2  gs_ind_0                       Macrophage     1/6  0.092243   \n3  gs_ind_0  Monocyte derived dendritic cell     1/8  0.121066   \n\n   Adjusted P-value  Odds Ratio  Combined Score  Genes  \n2          0.242132   14.444459       34.425848   AIF1  \n3          0.242132   11.044584       23.319750  ITGAX  \n7\n   Gene_set              Term Overlap   P-value  Adjusted P-value  Odds Ratio  \\\n0  gs_ind_0            B cell     1/6  0.092243          0.151332   14.444459   \n1  gs_ind_0  CD4-CD28+ T cell     1/8  0.121066          0.151332   11.044584   \n\n   Combined Score Genes  \n0       34.425848  CD19  \n1       23.319750  BCL2  \n8\n   Gene_set      Term Overlap   P-value  Adjusted P-value  Odds Ratio  \\\n4  gs_ind_0  Monocyte     1/7  0.106771          0.320312   12.517863   \n5  gs_ind_0  Myoblast     1/7  0.106771          0.320312   12.517863   \n\n   Combined Score  Genes  \n4        28.00338   CD52  \n5        28.00338  CDC20  \n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# prediction per cluster\npred\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n{'0': 'CD16+ dendritic cell',\n '1': 'CD4+ T cell',\n '2': 'CD8+ cytotoxic T cell',\n '3': 'Activated T cell',\n '4': 'Cancer stem-like cell',\n '5': 'CD4-CD28+ T cell',\n '6': 'Circulating fetal cell',\n '7': 'B cell',\n '8': 'Circulating fetal cell'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nprediction = [pred[x] for x in adata.obs['louvain_0.6']]\nadata.obs[\"GS_overlap_pred\"] = prediction\n\nsc.pl.umap(adata, color='GS_overlap_pred')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_06_celltyping_files/figure-html/cell-25-output-1.png){}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\nAs you can see, it agrees to some extent with the predictions from label transfer and ingest, but there are clear differences, which do you think looks better?\n:::\n\n## {{< meta session >}}\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nsc.logging.print_versions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-----\nanndata     0.9.2\nscanpy      1.7.2\nsinfo       0.3.1\n-----\nPIL                         10.0.0\nanndata                     0.9.2\nannoy                       NA\nanyio                       NA\narrow                       1.3.0\nasttokens                   NA\nattr                        23.1.0\nattrs                       23.1.0\nbabel                       2.12.1\nbackcall                    0.2.0\nbrotli                      1.0.9\ncertifi                     2023.07.22\ncffi                        1.16.0\ncharset_normalizer          3.2.0\ncolorama                    0.4.6\ncomm                        0.1.4\ncpuinfo                     NA\ncycler                      0.10.0\ncython_runtime              NA\ndateutil                    2.8.2\ndebugpy                     1.8.0\ndecorator                   5.1.1\ndefusedxml                  0.7.1\ndunamai                     1.18.0\nexceptiongroup              1.1.3\nexecuting                   1.2.0\nfastjsonschema              NA\nfbpca                       NA\nfqdn                        NA\nget_version                 3.5.4\ngseapy                      1.0.6\nh5py                        3.9.0\nidna                        3.4\nigraph                      0.11.2\nimportlib_resources         NA\nintervaltree                NA\nipykernel                   6.25.2\nipywidgets                  8.1.1\nisoduration                 NA\njedi                        0.19.1\njinja2                      3.1.2\njoblib                      1.3.0\njson5                       NA\njsonpointer                 2.4\njsonschema                  4.19.1\njsonschema_specifications   NA\njupyter_events              0.7.0\njupyter_server              2.7.3\njupyterlab_server           2.25.0\nkiwisolver                  1.4.5\nlegacy_api_wrap             0.0.0\nleidenalg                   0.10.1\nllvmlite                    0.40.1\nlouvain                     0.8.1\nmarkupsafe                  2.1.3\nmatplotlib                  3.6.3\nmatplotlib_inline           0.1.6\nmpl_toolkits                NA\nnatsort                     8.4.0\nnbformat                    5.9.2\nnumba                       0.57.1\nnumexpr                     2.8.4\nnumpy                       1.24.4\noverrides                   NA\npackaging                   23.1\npandas                      1.5.3\nparso                       0.8.3\npatsy                       0.5.3\npexpect                     4.8.0\npickleshare                 0.7.5\npkg_resources               NA\nplatformdirs                3.10.0\nprometheus_client           NA\nprompt_toolkit              3.0.39\npsutil                      5.9.5\nptyprocess                  0.7.0\npure_eval                   0.2.2\npycparser                   2.21\npydev_ipython               NA\npydevconsole                NA\npydevd                      2.9.5\npydevd_file_utils           NA\npydevd_plugins              NA\npydevd_tracing              NA\npygments                    2.16.1\npynndescent                 0.5.10\npyparsing                   3.0.9\npythonjsonlogger            NA\npytz                        2023.3\nreferencing                 NA\nrequests                    2.31.0\nrfc3339_validator           0.1.4\nrfc3986_validator           0.1.1\nrpds                        NA\nscanorama                   1.7.3\nscanpy                      1.7.2\nscipy                       1.10.1\nsend2trash                  NA\nsetuptools_scm              NA\nsinfo                       0.3.1\nsix                         1.16.0\nsklearn                     1.3.1\nsniffio                     1.3.0\nsocks                       1.7.1\nsortedcontainers            2.4.0\nstack_data                  0.6.2\nstatsmodels                 0.14.0\ntables                      3.8.0\ntexttable                   1.7.0\nthreadpoolctl               3.2.0\ntornado                     6.3.3\ntqdm                        4.65.0\ntraitlets                   5.11.2\ntyping_extensions           NA\numap                        0.5.4\nuri_template                NA\nurllib3                     2.0.4\nwcwidth                     0.2.8\nwebcolors                   1.13\nwebsocket                   1.6.4\nyaml                        6.0.1\nzipp                        NA\nzmq                         25.1.1\n-----\nIPython             8.12.2\njupyter_client      8.3.1\njupyter_core        5.4.0\njupyterlab          4.0.6\nnotebook            7.0.4\n-----\nPython 3.8.18 | packaged by conda-forge | (default, Oct 10 2023, 15:44:36) [GCC 12.3.0]\nLinux-6.4.16-linuxkit-x86_64-with-glibc2.10\n11 logical CPU cores, x86_64\n-----\nSession information updated at 2023-11-11 21:04\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "scanpy_06_celltyping_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}