{
  "hash": "1143e303c75ac0c2cced697d97698737",
  "result": {
    "markdown": "---\ntitle: \"{{< fa route >}} Trajectory inference using PAGA\"\nsubtitle: \"{{< meta subtitle_scanpy >}}\"\ndescription: \"Reconstructing developmental or differentiation pathways from individual cell gene expression profiles to understand cellular transitions and relationships.\"\nformat: html\nengine: jupyter\n---\n\n::: {.callout-note}\nCode chunks run Python commands unless it starts with `%%bash`, in which case, those chunks run shell commands.\n:::\n\nPartly following [this tutorial](https://scanpy-tutorials.readthedocs.io/en/latest/paga-paul15.html).\n\n## Loading libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as pl\nfrom matplotlib import rcParams\nimport scanpy as sc\n\nimport scipy\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\n\nwarnings.simplefilter(action=\"ignore\", category=Warning)\n\n# verbosity: errors (0), warnings (1), info (2), hints (3)\nsc.settings.verbosity = 3\nsc.settings.set_figure_params(dpi=100, frameon=False, figsize=(5, 5), facecolor='white', color_map = 'viridis_r') \n```\n:::\n\n\n## Loading data\n\nIn order to speed up the computations during the exercises, we will be using a subset of a bone marrow dataset (originally containing about\n100K cells). The bone marrow is the source of adult immune cells, and contains virtually all differentiation stages of cell from the immune\nsystem which later circulate in the blood to all other organs.\n\n![](../figs/hematopoiesis.png)\n\nAll the data has been preprocessed with Seurat. The file trajectory_scanpy_filtered.h5ad was converted from the Seurat object\nusing the SeuratDisk package. For more information on how it was done, have a look at the script: convert_to_h5ad.R in the github repo.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport os\n\npath_data = \"https://export.uppmax.uu.se/naiss2023-23-3/workshops/workshop-scrnaseq\"\n\npath_trajectory = \"./data/trajectory\"\nif not os.path.exists(path_trajectory):\n    os.makedirs(path_trajectory, exist_ok=True)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport urllib.request\n\npath_file = \"data/trajectory/trajectory_seurat_filtered.h5ad\"\nif not os.path.exists(path_file):\n    file_url = os.path.join(\n        path_data, \"trajectory/trajectory_seurat_filtered.h5ad\")\n    urllib.request.urlretrieve(file_url, path_file)\n```\n:::\n\n\nCheck that the variable names are correct.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nadata = sc.read_h5ad(\"data/trajectory/trajectory_seurat_filtered.h5ad\")\nadata.var\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>features</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0610040J01Rik</th>\n      <td>0610040J01Rik</td>\n    </tr>\n    <tr>\n      <th>1190007I07Rik</th>\n      <td>1190007I07Rik</td>\n    </tr>\n    <tr>\n      <th>1500009L16Rik</th>\n      <td>1500009L16Rik</td>\n    </tr>\n    <tr>\n      <th>1700012B09Rik</th>\n      <td>1700012B09Rik</td>\n    </tr>\n    <tr>\n      <th>1700020L24Rik</th>\n      <td>1700020L24Rik</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Sqor</th>\n      <td>Sqor</td>\n    </tr>\n    <tr>\n      <th>Sting1</th>\n      <td>Sting1</td>\n    </tr>\n    <tr>\n      <th>Tent5a</th>\n      <td>Tent5a</td>\n    </tr>\n    <tr>\n      <th>Tlcd4</th>\n      <td>Tlcd4</td>\n    </tr>\n    <tr>\n      <th>Znrd2</th>\n      <td>Znrd2</td>\n    </tr>\n  </tbody>\n</table>\n<p>3585 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# check what you have in the X matrix, should be lognormalized counts.\nprint(adata.X[:10,:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  (0, 4)\t0.11622072805743532\n  (0, 8)\t0.4800893970571722\n  (1, 8)\t0.2478910541698065\n  (1, 9)\t0.17188973970230348\n  (2, 1)\t0.09413397843954842\n  (2, 7)\t0.18016412971724202\n  (3, 1)\t0.08438841021254412\n  (3, 4)\t0.08438841021254412\n  (3, 7)\t0.08438841021254412\n  (3, 8)\t0.3648216463668793\n  (4, 1)\t0.14198147850903975\n  (4, 8)\t0.14198147850903975\n  (5, 1)\t0.17953169693896723\n  (5, 8)\t0.17953169693896723\n  (5, 9)\t0.17953169693896723\n  (6, 4)\t0.2319546390006887\n  (6, 8)\t0.42010741700351195\n  (7, 1)\t0.1775659421407816\n  (7, 8)\t0.39593115482156394\n  (7, 9)\t0.09271901219711086\n  (8, 1)\t0.12089079757716388\n  (8, 8)\t0.22873058755480363\n  (9, 1)\t0.08915380247493314\n  (9, 4)\t0.08915380247493314\n  (9, 8)\t0.38270398718590104\n```\n:::\n:::\n\n\n## Explore the data\n\nThere is a umap and clusters provided with the object, first plot some information from the previous analysis onto the umap.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nsc.pl.umap(adata, color = ['clusters','dataset','batches','Phase'],legend_loc = 'on data', legend_fontsize = 'xx-small', ncols = 2)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\nIt is crucial that you performing analysis of a dataset understands what is going on, what are the clusters you see in your data and most\nimportantly How are the clusters related to each other?. Well, let’s explore the data a bit. With the help of this table, write down which\ncluster numbers in your dataset express these key markers.\n\n|Marker  |Cell Type|\n|--------|----------------------------|\n|Cd34    |HSC progenitor|\n|Ms4a1   |B cell lineage|\n|Cd3e    |T cell lineage|\n|Ltf     |Granulocyte lineage|\n|Cst3    |Monocyte lineage|\n|Mcpt8   |Mast Cell lineage|\n|Alas2   |RBC lineage|\n|Siglech |Dendritic cell lineage|\n|C1qc    |Macrophage cell lineage|\n|Pf4     |Megakaryocyte cell lineage|\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nmarkers = [\"Cd34\",\"Alas2\",\"Pf4\",\"Mcpt8\",\"Ltf\",\"Cst3\", \"Siglech\", \"C1qc\", \"Ms4a1\", \"Cd3e\", ]\nsc.pl.umap(adata, color = markers, use_raw = False, ncols = 4)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n## Rerun analysis in Scanpy\n\nRedo clustering and umap using the basic Scanpy pipeline. Use the provided \"X_harmony_Phase\" dimensionality reduction as the staring\npoint.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# first, store the old umap with a new name so it is not overwritten\nadata.obsm['X_umap_old'] = adata.obsm['X_umap']\n\nsc.pp.neighbors(adata, n_pcs = 30, n_neighbors = 20, use_rep=\"X_harmony_Phase\")\nsc.tl.umap(adata, min_dist=0.4, spread=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncomputing neighbors\n    finished: added to `.uns['neighbors']`\n    `.obsp['distances']`, distances for each pair of neighbors\n    `.obsp['connectivities']`, weighted adjacency matrix (0:00:08)\ncomputing UMAP\n    finished: added\n    'X_umap', UMAP coordinates (adata.obsm) (0:00:09)\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n#sc.tl.umap(adata, min_dist=0.6, spread=1.5)\nsc.pl.umap(adata, color = ['clusters'],legend_loc = 'on data', legend_fontsize = 'xx-small', edges = True)\n\nsc.pl.umap(adata, color = markers, use_raw = False, ncols = 4)\n\n# Redo clustering as well\nsc.tl.leiden(adata, key_added = \"leiden_1.0\", resolution = 1.0) # default resolution in 1.0\nsc.tl.leiden(adata, key_added = \"leiden_1.2\", resolution = 1.2) # default resolution in 1.0\nsc.tl.leiden(adata, key_added = \"leiden_1.4\", resolution = 1.4) # default resolution in 1.0\n\n#sc.tl.louvain(adata, key_added = \"leiden_1.0\") # default resolution in 1.0\nsc.pl.umap(adata, color = ['leiden_1.0', 'leiden_1.2', 'leiden_1.4','clusters'],legend_loc = 'on data', legend_fontsize = 'xx-small', ncols =2)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-10-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-10-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nrunning Leiden clustering\n    finished: found 16 clusters and added\n    'leiden_1.0', the cluster labels (adata.obs, categorical) (0:00:02)\nrunning Leiden clustering\n    finished: found 17 clusters and added\n    'leiden_1.2', the cluster labels (adata.obs, categorical) (0:00:01)\nrunning Leiden clustering\n    finished: found 19 clusters and added\n    'leiden_1.4', the cluster labels (adata.obs, categorical) (0:00:02)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-10-output-4.png){}\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n#Rename clusters with really clear markers, the rest are left unlabelled.\n\nannot = pd.DataFrame(adata.obs['leiden_1.4'].astype('string'))\nannot[annot['leiden_1.4'] == '10'] = '10_megakaryo' #Pf4\nannot[annot['leiden_1.4'] == '17'] = '17_macro'  #C1qc\nannot[annot['leiden_1.4'] == '11'] = '11_eryth' #Alas2\nannot[annot['leiden_1.4'] == '18'] = '18_dend' #Siglech\nannot[annot['leiden_1.4'] == '13'] = '13_mast' #Mcpt8\nannot[annot['leiden_1.4'] == '0'] = '0_mono' #Cts3\nannot[annot['leiden_1.4'] == '1'] = '1_gran' #Ltf\nannot[annot['leiden_1.4'] == '9'] = '9_gran'\nannot[annot['leiden_1.4'] == '14'] = '14_TC' #Cd3e\nannot[annot['leiden_1.4'] == '16'] = '16_BC' #Ms4a1\nannot[annot['leiden_1.4'] == '8'] = '8_progen'  # Cd34\nannot[annot['leiden_1.4'] == '4'] = '4_progen' \nannot[annot['leiden_1.4'] == '5'] = '5_progen'\n\nadata.obs['annot']=annot['leiden_1.4'].astype('category')\n\nsc.pl.umap(adata, color = 'annot',legend_loc = 'on data', legend_fontsize = 'xx-small', ncols =2)\n\nannot.value_counts()\n#type(annot)\n\n# astype('category')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-11-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nleiden_1.4  \n0_mono          509\n1_gran          487\n2               479\n3               463\n4_progen        387\n5_progen        384\n7               368\n6               368\n8_progen        367\n9_gran          366\n10_megakaryo    301\n11_eryth        294\n12              276\n13_mast         159\n14_TC           151\n15              128\n16_BC           124\n17_macro        116\n18_dend         101\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# plot onto the Seurat embedding:\nsc.pl.embedding(adata, basis='X_umap_old', color = 'annot',legend_loc = 'on data', legend_fontsize = 'xx-small', ncols =2)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\n## Run PAGA\n\nUse the clusters from leiden clustering with leiden_1.4 and run PAGA. First we create the graph and initialize the positions using the umap.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# use the umap to initialize the graph layout.\nsc.tl.draw_graph(adata, init_pos='X_umap')\nsc.pl.draw_graph(adata, color='annot', legend_loc='on data', legend_fontsize = 'xx-small')\nsc.tl.paga(adata, groups='annot')\nsc.pl.paga(adata, color='annot', edge_width_scale = 0.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndrawing single-cell graph using layout 'fa'\nWARNING: Package 'fa2' is not installed, falling back to layout 'fr'.To use the faster and better ForceAtlas2 layout, install package 'fa2' (`pip install fa2`).\n    finished: added\n    'X_draw_graph_fr', graph_drawing coordinates (adata.obsm) (0:00:03)\nrunning PAGA\n    finished: added\n    'paga/connectivities', connectivities adjacency (adata.uns)\n    'paga/connectivities_tree', connectivities subtree (adata.uns) (0:00:00)\n--> added 'pos', the PAGA positions (adata.uns['paga'])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-13-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-13-output-3.png){}\n:::\n:::\n\n\nAs you can see, we have edges between many clusters that we know are are unrelated, so we may need to clean up the data a bit more.\n\n## Data pre-processing prior trajectory inference\n\nFirst, lets explore the graph a bit. So we plot the umap with the graph connections on top.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nsc.pl.umap(adata, edges=True, color = 'annot', legend_loc= 'on data', legend_fontsize= 'xx-small')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\nWe have many edges in the graph between unrelated clusters, so lets try with fewer neighbors.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nsc.pp.neighbors(adata, n_neighbors=5,  use_rep = 'X_harmony_Phase', n_pcs = 30)\nsc.pl.umap(adata, edges=True, color = 'annot', legend_loc= 'on data', legend_fontsize= 'xx-small')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncomputing neighbors\n    finished: added to `.uns['neighbors']`\n    `.obsp['distances']`, distances for each pair of neighbors\n    `.obsp['connectivities']`, weighted adjacency matrix (0:00:00)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-15-output-2.png){}\n:::\n:::\n\n\n## Rerun PAGA again on the data\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nsc.tl.draw_graph(adata, init_pos='X_umap')\nsc.pl.draw_graph(adata, color='annot', legend_loc='on data', legend_fontsize = 'xx-small')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndrawing single-cell graph using layout 'fa'\nWARNING: Package 'fa2' is not installed, falling back to layout 'fr'.To use the faster and better ForceAtlas2 layout, install package 'fa2' (`pip install fa2`).\n    finished: added\n    'X_draw_graph_fr', graph_drawing coordinates (adata.obsm) (0:00:02)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-16-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nsc.tl.paga(adata, groups='annot')\nsc.pl.paga(adata, color='annot', edge_width_scale = 0.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrunning PAGA\n    finished: added\n    'paga/connectivities', connectivities adjacency (adata.uns)\n    'paga/connectivities_tree', connectivities subtree (adata.uns) (0:00:00)\n--> added 'pos', the PAGA positions (adata.uns['paga'])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-17-output-2.png){}\n:::\n:::\n\n\n## Recomputing the embedding using PAGA-initialization\n\nThe following is just as well possible for a UMAP.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nsc.tl.draw_graph(adata, init_pos='paga')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndrawing single-cell graph using layout 'fa'\nWARNING: Package 'fa2' is not installed, falling back to layout 'fr'.To use the faster and better ForceAtlas2 layout, install package 'fa2' (`pip install fa2`).\n    finished: added\n    'X_draw_graph_fr', graph_drawing coordinates (adata.obsm) (0:00:15)\n```\n:::\n:::\n\n\nNow we can see all marker genes also at single-cell resolution in a meaningful layout.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nsc.pl.draw_graph(adata, color=['annot'], legend_loc='on data', legend_fontsize=  'xx-small')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-19-output-1.png){}\n:::\n:::\n\n\nCompare the 2 graphs\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nsc.pl.paga_compare(\n    adata, threshold=0.03, title='', right_margin=0.2, size=10, edge_width_scale=0.5,\n    legend_fontsize=12, fontsize=12, frameon=False, edges=True, save=True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--> added 'pos', the PAGA positions (adata.uns['paga'])\nWARNING: saving figure to file figures/paga_compare.pdf\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-20-output-2.png){}\n:::\n:::\n\n\n## Reconstructing gene changes along PAGA paths for a given set of genes\n\nChoose a root cell for diffusion pseudotime. We have 3 progenitor clusters, but cluster 5 seems the most clear.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nadata.uns['iroot'] = np.flatnonzero(adata.obs['annot']  == '5_progen')[0]\n\nsc.tl.dpt(adata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING: Trying to run `tl.dpt` without prior call of `tl.diffmap`. Falling back to `tl.diffmap` with default parameters.\ncomputing Diffusion Maps using n_comps=15(=n_dcs)\ncomputing transitions\n    finished (0:00:00)\n    eigenvalues of transition matrix\n    [1.         0.9989591  0.997628   0.9970365  0.9956704  0.99334306\n     0.9918951  0.9915921  0.99013233 0.98801893 0.9870309  0.9861044\n     0.9851118  0.9845008  0.9839531 ]\n    finished: added\n    'X_diffmap', diffmap coordinates (adata.obsm)\n    'diffmap_evals', eigenvalues of transition matrix (adata.uns) (0:00:01)\ncomputing Diffusion Pseudotime using n_dcs=10\n    finished: added\n    'dpt_pseudotime', the pseudotime (adata.obs) (0:00:00)\n```\n:::\n:::\n\n\nUse the full raw data for visualization.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nsc.pl.draw_graph(adata, color=['annot', 'dpt_pseudotime'], legend_loc='on data', legend_fontsize= 'x-small')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-22-output-1.png){}\n:::\n:::\n\n\nBy looking at the different know lineages and the layout of the graph we define manually some paths to the graph that corresponds to spcific\nlineages.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Define paths\n\npaths = [('erythrocytes', ['5_progen', '8_progen', '6', '3', '7', '11_eryth']),\n         ('lympoid', ['5_progen', '12', '16_BC', '14_TC']),\n         ('granulo', ['5_progen', '4_progen', '2', '9_gran', '1_gran']),\n         ('mono', ['5_progen', '4_progen', '0_mono', '18_dend', '17_macro'])\n         ]\n\nadata.obs['distance'] = adata.obs['dpt_pseudotime']\n```\n:::\n\n\nThen we select some genes that can vary in the lineages and plot onto the paths.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ngene_names = ['Gata2', 'Gata1', 'Klf1', 'Epor', 'Hba-a2',  # erythroid\n              'Elane', 'Cebpe', 'Gfi1',                    # neutrophil\n              'Irf8', 'Csf1r', 'Ctsg',                     # monocyte\n              'Itga2b','Prss34','Cma1','Procr',            # Megakaryo,Basophil,Mast,HPC\n              'C1qc','Siglech','Ms4a1','Cd3e','Cd34']\n```\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n_, axs = pl.subplots(ncols=4, figsize=(10, 4), gridspec_kw={\n                     'wspace': 0.05, 'left': 0.12})\npl.subplots_adjust(left=0.05, right=0.98, top=0.82, bottom=0.2)\nfor ipath, (descr, path) in enumerate(paths):\n    _, data = sc.pl.paga_path(\n        adata, path, gene_names,\n        show_node_names=False,\n        ax=axs[ipath],\n        ytick_fontsize=12,\n        left_margin=0.15,\n        n_avg=50,\n        annotations=['distance'],\n        show_yticks=True if ipath == 0 else False,\n        show_colorbar=False,\n        color_map='Greys',\n        groups_key='annot',\n        color_maps_annotations={'distance': 'viridis'},\n        title='{} path'.format(descr),\n        return_data=True,\n        use_raw=False,\n        show=False)\n    data.to_csv('data/trajectory/paga_path_{}.csv'.format(descr))\npl.savefig('data/trajectory/paga_path.pdf')\npl.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_07_trajectory_files/figure-html/cell-25-output-1.png){}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\nAs you can see, we can manipulate the trajectory quite a bit by selecting different number of neighbors, components etc. to fit with our\nassumptions on the development of these celltypes.\n\nPlease explore further how you can tweak the trajectory. For instance, can you create a PAGA trajectory using the orignial umap from Seurat\ninstead? Hint, you first need to compute the neighbors on the umap.\n:::\n\n## Session info\n\n<details>\n  <summary>Click here</summary>\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nsc.logging.print_versions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-----\nanndata     0.10.3\nscanpy      1.9.6\n-----\nPIL                 10.0.0\nanyio               NA\nasttokens           NA\nattr                23.1.0\nbabel               2.12.1\nbackcall            0.2.0\ncertifi             2023.11.17\ncffi                1.15.1\ncharset_normalizer  3.1.0\ncolorama            0.4.6\ncomm                0.1.3\ncycler              0.12.1\ncython_runtime      NA\ndateutil            2.8.2\ndebugpy             1.6.7\ndecorator           5.1.1\ndefusedxml          0.7.1\nexceptiongroup      1.2.0\nexecuting           1.2.0\nfastjsonschema      NA\nfontTools           4.47.0\ngmpy2               2.1.2\nh5py                3.9.0\nidna                3.4\nigraph              0.10.8\nipykernel           6.23.1\nipython_genutils    0.2.0\njedi                0.18.2\njinja2              3.1.2\njoblib              1.3.2\njson5               NA\njsonpointer         2.0\njsonschema          4.17.3\njupyter_events      0.6.3\njupyter_server      2.6.0\njupyterlab_server   2.22.1\nkiwisolver          1.4.5\nleidenalg           0.10.1\nllvmlite            0.41.1\nlouvain             0.8.1\nmarkupsafe          2.1.2\nmatplotlib          3.8.0\nmatplotlib_inline   0.1.6\nmpl_toolkits        NA\nmpmath              1.3.0\nnatsort             8.4.0\nnbformat            5.8.0\nnetworkx            3.2.1\nnumba               0.58.1\nnumpy               1.26.2\nopt_einsum          v3.3.0\noverrides           NA\npackaging           23.1\npandas              2.1.4\nparso               0.8.3\npexpect             4.8.0\npickleshare         0.7.5\npkg_resources       NA\nplatformdirs        3.5.1\nprometheus_client   NA\nprompt_toolkit      3.0.38\npsutil              5.9.5\nptyprocess          0.7.0\npure_eval           0.2.2\npvectorc            NA\npycparser           2.21\npydev_ipython       NA\npydevconsole        NA\npydevd              2.9.5\npydevd_file_utils   NA\npydevd_plugins      NA\npydevd_tracing      NA\npygments            2.15.1\npynndescent         0.5.11\npyparsing           3.1.1\npyrsistent          NA\npythonjsonlogger    NA\npytz                2023.3\nrequests            2.31.0\nrfc3339_validator   0.1.4\nrfc3986_validator   0.1.1\nscipy               1.11.4\nsend2trash          NA\nsession_info        1.0.0\nsix                 1.16.0\nsklearn             1.3.2\nsniffio             1.3.0\nsocks               1.7.1\nsparse              0.14.0\nstack_data          0.6.2\nsympy               1.12\ntexttable           1.7.0\nthreadpoolctl       3.2.0\ntorch               2.0.0\ntornado             6.3.2\ntqdm                4.65.0\ntraitlets           5.9.0\ntyping_extensions   NA\numap                0.5.5\nurllib3             2.0.2\nwcwidth             0.2.6\nwebsocket           1.5.2\nyaml                6.0\nzmq                 25.0.2\nzoneinfo            NA\nzstandard           0.19.0\n-----\nIPython             8.13.2\njupyter_client      8.2.0\njupyter_core        5.3.0\njupyterlab          4.0.1\nnotebook            6.5.4\n-----\nPython 3.10.11 | packaged by conda-forge | (main, May 10 2023, 18:58:44) [GCC 11.3.0]\nLinux-6.5.11-linuxkit-x86_64-with-glibc2.35\n-----\nSession information updated at 2024-01-14 13:04\n```\n:::\n:::\n\n\n</details>\n\n",
    "supporting": [
      "scanpy_07_trajectory_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}