{
  "hash": "737a5622831edfe39df6f76ed4f0c446",
  "result": {
    "markdown": "---\ntitle: \"{{< meta dge_title >}}\"\nsubtitle: \"{{< meta subtitle_scanpy >}}\"\ndescription: \"{{< meta dge_description >}}\"\nformat: html\nengine: jupyter\n---\n\n::: {.callout-note}\nCode chunks run Python commands unless it starts with `%%bash`, in which case, those chunks run shell commands.\n:::\n\n\n{{< meta dge_1 >}}\n\n\n\nDifferential expression is performed with the function rank_genes_group. The default method to compute differential expression is the\nt-test_overestim_var. Other implemented methods are: logreg, t-test and wilcoxon.\n\nBy default, the .raw attribute of AnnData is used in case it has been initialized, it can be changed by setting use_raw=False.\n\nThe clustering with resolution 0.6 seems to give a reasonable number of clusters, so we will use that clustering for all DE tests.\n\nFirst, let's import libraries and fetch the clustered data from the previous lab.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport gseapy\nimport matplotlib.pyplot as plt\n\n # verbosity: errors (0), warnings (1), info (2), hints (3)\nsc.settings.verbosity = 2\n\nsc.settings.set_figure_params(dpi=80)\n```\n:::\n\n\nRead in the clustered data object.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nadata = sc.read_h5ad('./data/results/scanpy_clustered_covid.h5ad')\n\nprint(adata.X.shape)\nprint(adata.raw.X.shape)\nprint(adata.raw.X[:10,:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5646, 3090)\n(5646, 18752)\n  (0, 1)\t0.9043687482537638\n  (0, 6)\t0.9043687482537638\n  (1, 6)\t0.9678402572038912\n  (2, 6)\t0.5124039238100646\n```\n:::\n:::\n\n\nAs you can see, the X matrix only contains the variable genes, while the raw matrix contains all genes.\n\nPrinting a few of the values in adata.raw.X shows that the raw matrix is not normalized.\n\nFor DGE analysis we would like to run with all genes, but on normalized values, so we will have to revert back to the raw matrix and renormalize.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nadata = adata.raw.to_adata()\nsc.pp.normalize_per_cell(adata, counts_per_cell_after=1e4)\nsc.pp.log1p(adata)\n```\n:::\n\n\nNow lets look at the clustering of the object we loaded in the umap. We will use louvain_0.6 clustering in this exercise.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsc.pl.umap(adata, color='louvain_0.6')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n## T-test\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nsc.tl.rank_genes_groups(adata, 'louvain_0.6', method='t-test', key_added = \"t-test\")\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False, key = \"t-test\")\n\n# results are stored in the adata.uns[\"t-test\"] slot\nadata\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-6-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nAnnData object with n_obs × n_vars = 5646 × 18752\n    obs: 'type', 'sample', 'batch', 'percent_mt2', 'n_counts', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ribo', 'pct_counts_ribo', 'total_counts_hb', 'pct_counts_hb', 'n_genes', 'percent_chrY', 'XIST-counts', 'S_score', 'G2M_score', 'phase', 'doublet_scores', 'predicted_doublets', 'doublet_info', 'leiden_1.0', 'leiden_0.6', 'leiden_0.4', 'leiden_1.4', 'louvain_1.0', 'louvain_0.6', 'louvain_0.4', 'louvain_1.4', 'kmeans5', 'kmeans10', 'kmeans15', 'hclust_5', 'hclust_10', 'hclust_15'\n    var: 'gene_ids', 'feature_types', 'genome', 'mt', 'ribo', 'hb', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'n_cells'\n    uns: 'dendrogram_leiden_0.6', 'dendrogram_louvain_0.6', 'doublet_info_colors', 'hclust_10_colors', 'hclust_15_colors', 'hclust_5_colors', 'hvg', 'kmeans10_colors', 'kmeans15_colors', 'kmeans5_colors', 'leiden', 'leiden_0.4_colors', 'leiden_0.6_colors', 'leiden_1.0_colors', 'leiden_1.4_colors', 'log1p', 'louvain', 'louvain_0.4_colors', 'louvain_0.6_colors', 'louvain_1.0_colors', 'louvain_1.4_colors', 'neighbors', 'pca', 'sample_colors', 'umap', 't-test'\n    obsm: 'Scanorama', 'X_pca', 'X_tsne', 'X_umap'\n    obsp: 'connectivities', 'distances'\n```\n:::\n:::\n\n\n## T-test overestimated_variance\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nsc.tl.rank_genes_groups(adata, 'louvain_0.6', method='t-test_overestim_var', key_added = \"t-test_ov\")\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False, key = \"t-test_ov\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n## Wilcoxon rank-sum\n\nThe result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nsc.tl.rank_genes_groups(adata, 'louvain_0.6', method='wilcoxon', key_added = \"wilcoxon\")\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False, key=\"wilcoxon\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n## Logistic regression test\n\nAs an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nsc.tl.rank_genes_groups(adata, 'louvain_0.6', method='logreg',key_added = \"logreg\")\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False, key = \"logreg\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n## Compare genes\n\nTake all significant DE genes for cluster0 with each test and compare the overlap.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n#compare cluster1 genes, only stores top 100 by default\n\nwc = sc.get.rank_genes_groups_df(adata, group='0', key='wilcoxon', pval_cutoff=0.01, log2fc_min=0)['names']\ntt = sc.get.rank_genes_groups_df(adata, group='0', key='t-test', pval_cutoff=0.01, log2fc_min=0)['names']\ntt_ov = sc.get.rank_genes_groups_df(adata, group='0', key='t-test_ov', pval_cutoff=0.01, log2fc_min=0)['names']\n\nfrom matplotlib_venn import venn3\n\nvenn3([set(wc),set(tt),set(tt_ov)], ('Wilcox','T-test','T-test_ov') )\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\nAs you can see, the Wilcoxon test and the T-test with overestimated variance gives very similar result. Also the regular T-test has good overlap, while the Logistic regression gives quite different genes.\n\n## Visualization\n\nThere are several ways to visualize the expression of top DE genes. Here we will plot top 5 genes per cluster from Wilcoxon test as heatmap, dotplot, violin plot or matrix.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nsc.pl.rank_genes_groups_heatmap(adata, n_genes=5, key=\"wilcoxon\", groupby=\"louvain_0.6\", show_gene_labels=True)\nsc.pl.rank_genes_groups_dotplot(adata, n_genes=5, key=\"wilcoxon\", groupby=\"louvain_0.6\")\nsc.pl.rank_genes_groups_stacked_violin(adata, n_genes=5, key=\"wilcoxon\", groupby=\"louvain_0.6\")\nsc.pl.rank_genes_groups_matrixplot(adata, n_genes=5, key=\"wilcoxon\", groupby=\"louvain_0.6\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-11-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-11-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-11-output-3.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-11-output-4.png){}\n:::\n:::\n\n\n## Compare specific clusters\n\nWe can also do pairwise comparisons of individual clusters on one vs many clusters. For instance, clusters 1 & 2 have very similar expression profiles.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nsc.tl.rank_genes_groups(adata, 'louvain_0.6', groups=['1'], reference='2', method='wilcoxon')\nsc.pl.rank_genes_groups(adata, groups=['1'], n_genes=20)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\nPlot as violins for those two groups.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsc.pl.rank_genes_groups_violin(adata, groups='1', n_genes=10)\n\n# plot the same genes as violins across all the datasets.\n\n# convert numpy.recarray to list\nmynames = [x[0] for x in adata.uns['rank_genes_groups']['names'][:10]]\nsc.pl.stacked_violin(adata, mynames, groupby = 'louvain_0.6')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-13-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-13-output-2.png){}\n:::\n:::\n\n\n## {{< meta dge_cond >}}\n\n\n{{< meta dge_cond_1 >}}\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ncl1 = adata[adata.obs['louvain_0.6'] == '4',:]\ncl1.obs['type'].value_counts()\n\nsc.tl.rank_genes_groups(cl1, 'type', method='wilcoxon', key_added = \"wilcoxon\")\nsc.pl.rank_genes_groups(cl1, n_genes=25, sharey=False, key=\"wilcoxon\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nsc.pl.rank_genes_groups_violin(cl1, n_genes=10, key=\"wilcoxon\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-15-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-15-output-2.png){}\n:::\n:::\n\n\nWe can also plot these genes across all clusters, but split by \"type\", to check if the genes are also up/downregulated in other celltypes.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nimport seaborn as sns\n\ngenes1 = sc.get.rank_genes_groups_df(cl1, group='Covid', key='wilcoxon')['names'][:5]\ngenes2 = sc.get.rank_genes_groups_df(cl1, group='Ctrl', key='wilcoxon')['names'][:5]\ngenes = genes1.tolist() +  genes2.tolist() \ndf = sc.get.obs_df(adata, genes + ['louvain_0.6','type'], use_raw=False)\ndf2 = df.melt(id_vars=[\"louvain_0.6\",'type'], value_vars=genes)\n\nsns.catplot(x = \"louvain_0.6\", y = \"value\", hue = \"type\", kind = 'violin', col = \"variable\", data = df2, col_wrap=4, inner=None)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-16-output-1.png){}\n:::\n:::\n\n\nAs you can see, we have many sex chromosome related genes among the top DE genes. And if you remember from the QC lab, we have inbalanced sex distribution among our subjects, so this may not be related to covid at all.\n\n### Remove sex chromosome genes\n\nTo remove some of the bias due to inbalanced sex in the subjects we can remove the sex chromosome related genes.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nannot = sc.queries.biomart_annotations(\n        \"hsapiens\",\n        [\"ensembl_gene_id\", \"external_gene_name\", \"start_position\", \"end_position\", \"chromosome_name\"],\n    ).set_index(\"external_gene_name\")\n\nchrY_genes = adata.var_names.intersection(annot.index[annot.chromosome_name == \"Y\"])\nchrX_genes = adata.var_names.intersection(annot.index[annot.chromosome_name == \"X\"])\n\nsex_genes = chrY_genes.union(chrX_genes)\nprint(len(sex_genes))\nall_genes = cl1.var.index.tolist()\nprint(len(all_genes))\n\nkeep_genes = [x for x in all_genes if x not in sex_genes]\nprint(len(keep_genes))\n\ncl1 = cl1[:,keep_genes]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n536\n18752\n18216\n```\n:::\n:::\n\n\nRerun differential expression.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nsc.tl.rank_genes_groups(cl1, 'type', method='wilcoxon', key_added = \"wilcoxon\")\nsc.pl.rank_genes_groups(cl1, n_genes=25, sharey=False, key=\"wilcoxon\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-18-output-1.png){}\n:::\n:::\n\n\n### Patient batch effects\n\nWhen we are testing for Covid vs Control we are running a DGE test for 3 vs 3 individuals. That will be very sensitive to sample differences unless we find a way to control for it. So first, lets check how the top DGEs are expressed across the individuals:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ngenes1 = sc.get.rank_genes_groups_df(cl1, group='Covid', key='wilcoxon')['names'][:5]\ngenes2 = sc.get.rank_genes_groups_df(cl1, group='Ctrl', key='wilcoxon')['names'][:5]\ngenes = genes1.tolist() +  genes2.tolist() \n\nsc.pl.violin(cl1, genes1, groupby='sample')\nsc.pl.violin(cl1, genes2, groupby='sample')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-19-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-19-output-2.png){}\n:::\n:::\n\n\nAs you can see, many of the genes detected as DGE in Covid are unique to one or 2 patients.\n\nWe can examine more genes with a DotPlot:\n\nWe can also plot the top Covid and top Ctrl genes as a dotplot:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ngenes1 = sc.get.rank_genes_groups_df(cl1, group='Covid', key='wilcoxon')['names'][:20]\ngenes2 = sc.get.rank_genes_groups_df(cl1, group='Ctrl', key='wilcoxon')['names'][:20]\ngenes = genes1.tolist() +  genes2.tolist() \n\nsc.pl.dotplot(cl1,genes, groupby='sample')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-20-output-1.png){}\n:::\n:::\n\n\nClearly many of the top Covid genes are only high in the covid_17 sample, and not a general feature of covid patients.\n\nThis is also the patient with the highest number of cells in this cluster:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ncl1.obs['sample'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nctrl_13     232\nctrl_14     164\nctrl_5       58\ncovid_1      48\ncovid_17     26\ncovid_15     13\nName: sample, dtype: int64\n```\n:::\n:::\n\n\n### Subsample\n\nSo one obvious thing to consider is an equal amount of cells per individual so that the DGE results are not dominated by a single sample.\n\nSo we will downsample to an equal number of cells per sample.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ncl1.obs['sample'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nctrl_13     232\nctrl_14     164\nctrl_5       58\ncovid_1      48\ncovid_17     26\ncovid_15     13\nName: sample, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ntarget_cells = 50\n\ntmp = [cl1[cl1.obs['sample'] == s] for s in cl1.obs['sample'].cat.categories]\n\nfor dat in tmp:\n    if dat.n_obs > target_cells:\n            sc.pp.subsample(dat, n_obs=target_cells)\n\ncl1_sub = tmp[0].concatenate(*tmp[1:])\n\ncl1_sub.obs['sample'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nctrl_5      50\nctrl_13     50\nctrl_14     50\ncovid_1     48\ncovid_17    26\ncovid_15    13\nName: sample, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nsc.tl.rank_genes_groups(cl1_sub, 'type', method='wilcoxon', key_added = \"wilcoxon\")\nsc.pl.rank_genes_groups(cl1_sub, n_genes=25, sharey=False, key=\"wilcoxon\")\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-24-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ngenes1 = sc.get.rank_genes_groups_df(cl1_sub, group='Covid', key='wilcoxon')['names'][:20]\ngenes2 = sc.get.rank_genes_groups_df(cl1_sub, group='Ctrl', key='wilcoxon')['names'][:20]\ngenes = genes1.tolist() +  genes2.tolist() \n\nsc.pl.dotplot(cl1,genes, groupby='sample')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-25-output-1.png){}\n:::\n:::\n\n\nIt looks much better now. But if we look per patient you can see that we still have some genes that are dominated by a single patient. Still, it is often a good idea to control the number of cells from each sample when doing differential expression.\n\nWhy do you think this is?\n\nThere are many different ways to try and resolve the issue of patient batch effects, however most of them require R packages. These can be run via rpy2 as is demonstraded in this compendium:\nhttps://www.sc-best-practices.org/conditions/differential_gene_expression.html\n\nHowever, we have not included it here as of now. So please have a look at the patient batch effect section in the seurat DGE tutorial where we run EdgeR on pseudobulk and MAST with random effect.\n\n## {{< meta dge_gsa >}}\n\n### {{< meta dge_gsa_hyper >}}\n\n\n{{< meta dge_gsa_hyper_1 >}}\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n#Available databases : ‘Human’, ‘Mouse’, ‘Yeast’, ‘Fly’, ‘Fish’, ‘Worm’ \ngene_set_names = gseapy.get_library_name(organism='Human')\nprint(gene_set_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['ARCHS4_Cell-lines', 'ARCHS4_IDG_Coexp', 'ARCHS4_Kinases_Coexp', 'ARCHS4_TFs_Coexp', 'ARCHS4_Tissues', 'Achilles_fitness_decrease', 'Achilles_fitness_increase', 'Aging_Perturbations_from_GEO_down', 'Aging_Perturbations_from_GEO_up', 'Allen_Brain_Atlas_10x_scRNA_2021', 'Allen_Brain_Atlas_down', 'Allen_Brain_Atlas_up', 'Azimuth_2023', 'Azimuth_Cell_Types_2021', 'BioCarta_2013', 'BioCarta_2015', 'BioCarta_2016', 'BioPlanet_2019', 'BioPlex_2017', 'CCLE_Proteomics_2020', 'CORUM', 'COVID-19_Related_Gene_Sets', 'COVID-19_Related_Gene_Sets_2021', 'Cancer_Cell_Line_Encyclopedia', 'CellMarker_Augmented_2021', 'ChEA_2013', 'ChEA_2015', 'ChEA_2016', 'ChEA_2022', 'Chromosome_Location', 'Chromosome_Location_hg19', 'ClinVar_2019', 'DSigDB', 'Data_Acquisition_Method_Most_Popular_Genes', 'DepMap_CRISPR_GeneDependency_CellLines_2023', 'DepMap_WG_CRISPR_Screens_Broad_CellLines_2019', 'DepMap_WG_CRISPR_Screens_Sanger_CellLines_2019', 'Descartes_Cell_Types_and_Tissue_2021', 'Diabetes_Perturbations_GEO_2022', 'DisGeNET', 'Disease_Perturbations_from_GEO_down', 'Disease_Perturbations_from_GEO_up', 'Disease_Signatures_from_GEO_down_2014', 'Disease_Signatures_from_GEO_up_2014', 'DrugMatrix', 'Drug_Perturbations_from_GEO_2014', 'Drug_Perturbations_from_GEO_down', 'Drug_Perturbations_from_GEO_up', 'ENCODE_Histone_Modifications_2013', 'ENCODE_Histone_Modifications_2015', 'ENCODE_TF_ChIP-seq_2014', 'ENCODE_TF_ChIP-seq_2015', 'ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X', 'ESCAPE', 'Elsevier_Pathway_Collection', 'Enrichr_Libraries_Most_Popular_Genes', 'Enrichr_Submissions_TF-Gene_Coocurrence', 'Enrichr_Users_Contributed_Lists_2020', 'Epigenomics_Roadmap_HM_ChIP-seq', 'FANTOM6_lncRNA_KD_DEGs', 'GO_Biological_Process_2013', 'GO_Biological_Process_2015', 'GO_Biological_Process_2017', 'GO_Biological_Process_2017b', 'GO_Biological_Process_2018', 'GO_Biological_Process_2021', 'GO_Biological_Process_2023', 'GO_Cellular_Component_2013', 'GO_Cellular_Component_2015', 'GO_Cellular_Component_2017', 'GO_Cellular_Component_2017b', 'GO_Cellular_Component_2018', 'GO_Cellular_Component_2021', 'GO_Cellular_Component_2023', 'GO_Molecular_Function_2013', 'GO_Molecular_Function_2015', 'GO_Molecular_Function_2017', 'GO_Molecular_Function_2017b', 'GO_Molecular_Function_2018', 'GO_Molecular_Function_2021', 'GO_Molecular_Function_2023', 'GTEx_Aging_Signatures_2021', 'GTEx_Tissue_Expression_Down', 'GTEx_Tissue_Expression_Up', 'GTEx_Tissues_V8_2023', 'GWAS_Catalog_2019', 'GWAS_Catalog_2023', 'GeDiPNet_2023', 'GeneSigDB', 'Gene_Perturbations_from_GEO_down', 'Gene_Perturbations_from_GEO_up', 'Genes_Associated_with_NIH_Grants', 'Genome_Browser_PWMs', 'GlyGen_Glycosylated_Proteins_2022', 'HDSigDB_Human_2021', 'HDSigDB_Mouse_2021', 'HMDB_Metabolites', 'HMS_LINCS_KinomeScan', 'HomoloGene', 'HuBMAP_ASCT_plus_B_augmented_w_RNAseq_Coexpression', 'HuBMAP_ASCTplusB_augmented_2022', 'HumanCyc_2015', 'HumanCyc_2016', 'Human_Gene_Atlas', 'Human_Phenotype_Ontology', 'IDG_Drug_Targets_2022', 'InterPro_Domains_2019', 'Jensen_COMPARTMENTS', 'Jensen_DISEASES', 'Jensen_TISSUES', 'KEA_2013', 'KEA_2015', 'KEGG_2013', 'KEGG_2015', 'KEGG_2016', 'KEGG_2019_Human', 'KEGG_2019_Mouse', 'KEGG_2021_Human', 'KOMP2_Mouse_Phenotypes_2022', 'Kinase_Perturbations_from_GEO_down', 'Kinase_Perturbations_from_GEO_up', 'L1000_Kinase_and_GPCR_Perturbations_down', 'L1000_Kinase_and_GPCR_Perturbations_up', 'LINCS_L1000_CRISPR_KO_Consensus_Sigs', 'LINCS_L1000_Chem_Pert_Consensus_Sigs', 'LINCS_L1000_Chem_Pert_down', 'LINCS_L1000_Chem_Pert_up', 'LINCS_L1000_Ligand_Perturbations_down', 'LINCS_L1000_Ligand_Perturbations_up', 'Ligand_Perturbations_from_GEO_down', 'Ligand_Perturbations_from_GEO_up', 'MAGMA_Drugs_and_Diseases', 'MAGNET_2023', 'MCF7_Perturbations_from_GEO_down', 'MCF7_Perturbations_from_GEO_up', 'MGI_Mammalian_Phenotype_2013', 'MGI_Mammalian_Phenotype_2017', 'MGI_Mammalian_Phenotype_Level_3', 'MGI_Mammalian_Phenotype_Level_4', 'MGI_Mammalian_Phenotype_Level_4_2019', 'MGI_Mammalian_Phenotype_Level_4_2021', 'MSigDB_Computational', 'MSigDB_Hallmark_2020', 'MSigDB_Oncogenic_Signatures', 'Metabolomics_Workbench_Metabolites_2022', 'Microbe_Perturbations_from_GEO_down', 'Microbe_Perturbations_from_GEO_up', 'MoTrPAC_2023', 'Mouse_Gene_Atlas', 'NCI-60_Cancer_Cell_Lines', 'NCI-Nature_2015', 'NCI-Nature_2016', 'NIH_Funded_PIs_2017_AutoRIF_ARCHS4_Predictions', 'NIH_Funded_PIs_2017_GeneRIF_ARCHS4_Predictions', 'NIH_Funded_PIs_2017_Human_AutoRIF', 'NIH_Funded_PIs_2017_Human_GeneRIF', 'NURSA_Human_Endogenous_Complexome', 'OMIM_Disease', 'OMIM_Expanded', 'Old_CMAP_down', 'Old_CMAP_up', 'Orphanet_Augmented_2021', 'PFOCR_Pathways', 'PFOCR_Pathways_2023', 'PPI_Hub_Proteins', 'PanglaoDB_Augmented_2021', 'Panther_2015', 'Panther_2016', 'Pfam_Domains_2019', 'Pfam_InterPro_Domains', 'PheWeb_2019', 'PhenGenI_Association_2021', 'Phosphatase_Substrates_from_DEPOD', 'ProteomicsDB_2020', 'Proteomics_Drug_Atlas_2023', 'RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO', 'RNAseq_Automatic_GEO_Signatures_Human_Down', 'RNAseq_Automatic_GEO_Signatures_Human_Up', 'RNAseq_Automatic_GEO_Signatures_Mouse_Down', 'RNAseq_Automatic_GEO_Signatures_Mouse_Up', 'Rare_Diseases_AutoRIF_ARCHS4_Predictions', 'Rare_Diseases_AutoRIF_Gene_Lists', 'Rare_Diseases_GeneRIF_ARCHS4_Predictions', 'Rare_Diseases_GeneRIF_Gene_Lists', 'Reactome_2013', 'Reactome_2015', 'Reactome_2016', 'Reactome_2022', 'Rummagene_kinases', 'Rummagene_signatures', 'Rummagene_transcription_factors', 'SILAC_Phosphoproteomics', 'SubCell_BarCode', 'SynGO_2022', 'SysMyo_Muscle_Gene_Sets', 'TF-LOF_Expression_from_GEO', 'TF_Perturbations_Followed_by_Expression', 'TG_GATES_2020', 'TRANSFAC_and_JASPAR_PWMs', 'TRRUST_Transcription_Factors_2019', 'Table_Mining_of_CRISPR_Studies', 'Tabula_Muris', 'Tabula_Sapiens', 'TargetScan_microRNA', 'TargetScan_microRNA_2017', 'The_Kinase_Library_2023', 'Tissue_Protein_Expression_from_Human_Proteome_Map', 'Tissue_Protein_Expression_from_ProteomicsDB', 'Transcription_Factor_PPIs', 'UK_Biobank_GWAS_v1', 'Virus-Host_PPI_P-HIPSTer_2020', 'VirusMINT', 'Virus_Perturbations_from_GEO_down', 'Virus_Perturbations_from_GEO_up', 'WikiPathway_2021_Human', 'WikiPathway_2023_Human', 'WikiPathways_2013', 'WikiPathways_2015', 'WikiPathways_2016', 'WikiPathways_2019_Human', 'WikiPathways_2019_Mouse', 'dbGaP', 'huMAP', 'lncHUB_lncRNA_Co-Expression', 'miRTarBase_2017']\n```\n:::\n:::\n\n\nGet the significant DEGs for the Covid patients.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n#?gseapy.enrichr\nglist = sc.get.rank_genes_groups_df(cl1_sub, group='Covid', key='wilcoxon', log2fc_min=0.25, pval_cutoff=0.05)['names'].squeeze().str.strip().tolist()\nprint(len(glist))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n281\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nenr_res = gseapy.enrichr(gene_list=glist, organism='Human', gene_sets='GO_Biological_Process_2018', cutoff = 0.5)\nenr_res.results.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gene_set</th>\n      <th>Term</th>\n      <th>Overlap</th>\n      <th>P-value</th>\n      <th>Adjusted P-value</th>\n      <th>Old P-value</th>\n      <th>Old Adjusted P-value</th>\n      <th>Odds Ratio</th>\n      <th>Combined Score</th>\n      <th>Genes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>GO_Biological_Process_2018</td>\n      <td>neutrophil degranulation (GO:0043312)</td>\n      <td>35/479</td>\n      <td>1.325372e-15</td>\n      <td>1.502220e-12</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6.176527</td>\n      <td>211.589805</td>\n      <td>CD63;PSMD11;MGST1;FPR1;PYGL;PLAC8;PYCARD;HK3;G...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>GO_Biological_Process_2018</td>\n      <td>neutrophil activation involved in immune respo...</td>\n      <td>35/483</td>\n      <td>1.706660e-15</td>\n      <td>1.502220e-12</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6.120109</td>\n      <td>208.109652</td>\n      <td>CD63;PSMD11;MGST1;FPR1;PYGL;PLAC8;PYCARD;HK3;G...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GO_Biological_Process_2018</td>\n      <td>neutrophil mediated immunity (GO:0002446)</td>\n      <td>35/487</td>\n      <td>2.191955e-15</td>\n      <td>1.502220e-12</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6.064690</td>\n      <td>204.707437</td>\n      <td>CD63;PSMD11;MGST1;FPR1;PYGL;PLAC8;PYCARD;HK3;G...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>GO_Biological_Process_2018</td>\n      <td>cytokine-mediated signaling pathway (GO:0019221)</td>\n      <td>36/633</td>\n      <td>1.002075e-12</td>\n      <td>5.150664e-10</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.706471</td>\n      <td>130.034848</td>\n      <td>IFITM3;IFITM1;CDKN1A;IFITM2;PSMD11;CXCL8;FPR1;...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>GO_Biological_Process_2018</td>\n      <td>cellular response to type I interferon (GO:007...</td>\n      <td>12/65</td>\n      <td>9.717995e-11</td>\n      <td>3.330033e-08</td>\n      <td>0</td>\n      <td>0</td>\n      <td>16.552711</td>\n      <td>381.613757</td>\n      <td>IFITM3;ISG20;EGR1;IFITM1;IFITM2;OAS1;IFI27;MX2...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n{{< meta dge_gsa_hyper_2 >}}\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ngseapy.barplot(enr_res.res2d,title='GO_Biological_Process_2018')\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n<AxesSubplot: title={'center': 'GO_Biological_Process_2018'}, xlabel='$- \\\\log_{10}$ (Adjusted P-value)'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-29-output-2.png){}\n:::\n:::\n\n\n## {{< meta dge_gsea >}}\n\n\n{{< meta dge_gsea_1 >}}\n\n\n\nWe need a table with all DEGs and their log foldchanges. However, many lowly expressed genes will have high foldchanges and just contribue noise, so also filter for expression in enough cells.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ngene_rank = sc.get.rank_genes_groups_df(cl1_sub, group='Covid', key='wilcoxon')[['names','logfoldchanges']]\ngene_rank.sort_values(by=['logfoldchanges'], inplace=True, ascending=False)\n\n# calculate_qc_metrics will calculate number of cells per gene\nsc.pp.calculate_qc_metrics(cl1, percent_top=None, log1p=False, inplace=True)\n\n# filter for genes expressed in at least 30 cells.\ngene_rank = gene_rank[gene_rank['names'].isin(cl1.var_names[cl1.var.n_cells_by_counts>30])]\n\ngene_rank\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>names</th>\n      <th>logfoldchanges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>234</th>\n      <td>USP18</td>\n      <td>4.887529</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>IGHA1</td>\n      <td>3.949443</td>\n    </tr>\n    <tr>\n      <th>348</th>\n      <td>ANKRD22</td>\n      <td>3.885875</td>\n    </tr>\n    <tr>\n      <th>373</th>\n      <td>IGLC2</td>\n      <td>3.848717</td>\n    </tr>\n    <tr>\n      <th>442</th>\n      <td>ST20</td>\n      <td>3.815957</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>16711</th>\n      <td>TRBC2</td>\n      <td>-3.788429</td>\n    </tr>\n    <tr>\n      <th>17513</th>\n      <td>FCER1A</td>\n      <td>-4.609855</td>\n    </tr>\n    <tr>\n      <th>16648</th>\n      <td>TMEM8B</td>\n      <td>-25.670713</td>\n    </tr>\n    <tr>\n      <th>16790</th>\n      <td>GZMB</td>\n      <td>-26.336149</td>\n    </tr>\n    <tr>\n      <th>18067</th>\n      <td>AC004556.1</td>\n      <td>-28.746210</td>\n    </tr>\n  </tbody>\n</table>\n<p>8439 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n{{< meta dge_gsea_2 >}}\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n#Available databases : ‘Human’, ‘Mouse’, ‘Yeast’, ‘Fly’, ‘Fish’, ‘Worm’ \ngene_set_names = gseapy.get_library_name(organism='Human')\nprint(gene_set_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['ARCHS4_Cell-lines', 'ARCHS4_IDG_Coexp', 'ARCHS4_Kinases_Coexp', 'ARCHS4_TFs_Coexp', 'ARCHS4_Tissues', 'Achilles_fitness_decrease', 'Achilles_fitness_increase', 'Aging_Perturbations_from_GEO_down', 'Aging_Perturbations_from_GEO_up', 'Allen_Brain_Atlas_10x_scRNA_2021', 'Allen_Brain_Atlas_down', 'Allen_Brain_Atlas_up', 'Azimuth_2023', 'Azimuth_Cell_Types_2021', 'BioCarta_2013', 'BioCarta_2015', 'BioCarta_2016', 'BioPlanet_2019', 'BioPlex_2017', 'CCLE_Proteomics_2020', 'CORUM', 'COVID-19_Related_Gene_Sets', 'COVID-19_Related_Gene_Sets_2021', 'Cancer_Cell_Line_Encyclopedia', 'CellMarker_Augmented_2021', 'ChEA_2013', 'ChEA_2015', 'ChEA_2016', 'ChEA_2022', 'Chromosome_Location', 'Chromosome_Location_hg19', 'ClinVar_2019', 'DSigDB', 'Data_Acquisition_Method_Most_Popular_Genes', 'DepMap_CRISPR_GeneDependency_CellLines_2023', 'DepMap_WG_CRISPR_Screens_Broad_CellLines_2019', 'DepMap_WG_CRISPR_Screens_Sanger_CellLines_2019', 'Descartes_Cell_Types_and_Tissue_2021', 'Diabetes_Perturbations_GEO_2022', 'DisGeNET', 'Disease_Perturbations_from_GEO_down', 'Disease_Perturbations_from_GEO_up', 'Disease_Signatures_from_GEO_down_2014', 'Disease_Signatures_from_GEO_up_2014', 'DrugMatrix', 'Drug_Perturbations_from_GEO_2014', 'Drug_Perturbations_from_GEO_down', 'Drug_Perturbations_from_GEO_up', 'ENCODE_Histone_Modifications_2013', 'ENCODE_Histone_Modifications_2015', 'ENCODE_TF_ChIP-seq_2014', 'ENCODE_TF_ChIP-seq_2015', 'ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X', 'ESCAPE', 'Elsevier_Pathway_Collection', 'Enrichr_Libraries_Most_Popular_Genes', 'Enrichr_Submissions_TF-Gene_Coocurrence', 'Enrichr_Users_Contributed_Lists_2020', 'Epigenomics_Roadmap_HM_ChIP-seq', 'FANTOM6_lncRNA_KD_DEGs', 'GO_Biological_Process_2013', 'GO_Biological_Process_2015', 'GO_Biological_Process_2017', 'GO_Biological_Process_2017b', 'GO_Biological_Process_2018', 'GO_Biological_Process_2021', 'GO_Biological_Process_2023', 'GO_Cellular_Component_2013', 'GO_Cellular_Component_2015', 'GO_Cellular_Component_2017', 'GO_Cellular_Component_2017b', 'GO_Cellular_Component_2018', 'GO_Cellular_Component_2021', 'GO_Cellular_Component_2023', 'GO_Molecular_Function_2013', 'GO_Molecular_Function_2015', 'GO_Molecular_Function_2017', 'GO_Molecular_Function_2017b', 'GO_Molecular_Function_2018', 'GO_Molecular_Function_2021', 'GO_Molecular_Function_2023', 'GTEx_Aging_Signatures_2021', 'GTEx_Tissue_Expression_Down', 'GTEx_Tissue_Expression_Up', 'GTEx_Tissues_V8_2023', 'GWAS_Catalog_2019', 'GWAS_Catalog_2023', 'GeDiPNet_2023', 'GeneSigDB', 'Gene_Perturbations_from_GEO_down', 'Gene_Perturbations_from_GEO_up', 'Genes_Associated_with_NIH_Grants', 'Genome_Browser_PWMs', 'GlyGen_Glycosylated_Proteins_2022', 'HDSigDB_Human_2021', 'HDSigDB_Mouse_2021', 'HMDB_Metabolites', 'HMS_LINCS_KinomeScan', 'HomoloGene', 'HuBMAP_ASCT_plus_B_augmented_w_RNAseq_Coexpression', 'HuBMAP_ASCTplusB_augmented_2022', 'HumanCyc_2015', 'HumanCyc_2016', 'Human_Gene_Atlas', 'Human_Phenotype_Ontology', 'IDG_Drug_Targets_2022', 'InterPro_Domains_2019', 'Jensen_COMPARTMENTS', 'Jensen_DISEASES', 'Jensen_TISSUES', 'KEA_2013', 'KEA_2015', 'KEGG_2013', 'KEGG_2015', 'KEGG_2016', 'KEGG_2019_Human', 'KEGG_2019_Mouse', 'KEGG_2021_Human', 'KOMP2_Mouse_Phenotypes_2022', 'Kinase_Perturbations_from_GEO_down', 'Kinase_Perturbations_from_GEO_up', 'L1000_Kinase_and_GPCR_Perturbations_down', 'L1000_Kinase_and_GPCR_Perturbations_up', 'LINCS_L1000_CRISPR_KO_Consensus_Sigs', 'LINCS_L1000_Chem_Pert_Consensus_Sigs', 'LINCS_L1000_Chem_Pert_down', 'LINCS_L1000_Chem_Pert_up', 'LINCS_L1000_Ligand_Perturbations_down', 'LINCS_L1000_Ligand_Perturbations_up', 'Ligand_Perturbations_from_GEO_down', 'Ligand_Perturbations_from_GEO_up', 'MAGMA_Drugs_and_Diseases', 'MAGNET_2023', 'MCF7_Perturbations_from_GEO_down', 'MCF7_Perturbations_from_GEO_up', 'MGI_Mammalian_Phenotype_2013', 'MGI_Mammalian_Phenotype_2017', 'MGI_Mammalian_Phenotype_Level_3', 'MGI_Mammalian_Phenotype_Level_4', 'MGI_Mammalian_Phenotype_Level_4_2019', 'MGI_Mammalian_Phenotype_Level_4_2021', 'MSigDB_Computational', 'MSigDB_Hallmark_2020', 'MSigDB_Oncogenic_Signatures', 'Metabolomics_Workbench_Metabolites_2022', 'Microbe_Perturbations_from_GEO_down', 'Microbe_Perturbations_from_GEO_up', 'MoTrPAC_2023', 'Mouse_Gene_Atlas', 'NCI-60_Cancer_Cell_Lines', 'NCI-Nature_2015', 'NCI-Nature_2016', 'NIH_Funded_PIs_2017_AutoRIF_ARCHS4_Predictions', 'NIH_Funded_PIs_2017_GeneRIF_ARCHS4_Predictions', 'NIH_Funded_PIs_2017_Human_AutoRIF', 'NIH_Funded_PIs_2017_Human_GeneRIF', 'NURSA_Human_Endogenous_Complexome', 'OMIM_Disease', 'OMIM_Expanded', 'Old_CMAP_down', 'Old_CMAP_up', 'Orphanet_Augmented_2021', 'PFOCR_Pathways', 'PFOCR_Pathways_2023', 'PPI_Hub_Proteins', 'PanglaoDB_Augmented_2021', 'Panther_2015', 'Panther_2016', 'Pfam_Domains_2019', 'Pfam_InterPro_Domains', 'PheWeb_2019', 'PhenGenI_Association_2021', 'Phosphatase_Substrates_from_DEPOD', 'ProteomicsDB_2020', 'Proteomics_Drug_Atlas_2023', 'RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO', 'RNAseq_Automatic_GEO_Signatures_Human_Down', 'RNAseq_Automatic_GEO_Signatures_Human_Up', 'RNAseq_Automatic_GEO_Signatures_Mouse_Down', 'RNAseq_Automatic_GEO_Signatures_Mouse_Up', 'Rare_Diseases_AutoRIF_ARCHS4_Predictions', 'Rare_Diseases_AutoRIF_Gene_Lists', 'Rare_Diseases_GeneRIF_ARCHS4_Predictions', 'Rare_Diseases_GeneRIF_Gene_Lists', 'Reactome_2013', 'Reactome_2015', 'Reactome_2016', 'Reactome_2022', 'Rummagene_kinases', 'Rummagene_signatures', 'Rummagene_transcription_factors', 'SILAC_Phosphoproteomics', 'SubCell_BarCode', 'SynGO_2022', 'SysMyo_Muscle_Gene_Sets', 'TF-LOF_Expression_from_GEO', 'TF_Perturbations_Followed_by_Expression', 'TG_GATES_2020', 'TRANSFAC_and_JASPAR_PWMs', 'TRRUST_Transcription_Factors_2019', 'Table_Mining_of_CRISPR_Studies', 'Tabula_Muris', 'Tabula_Sapiens', 'TargetScan_microRNA', 'TargetScan_microRNA_2017', 'The_Kinase_Library_2023', 'Tissue_Protein_Expression_from_Human_Proteome_Map', 'Tissue_Protein_Expression_from_ProteomicsDB', 'Transcription_Factor_PPIs', 'UK_Biobank_GWAS_v1', 'Virus-Host_PPI_P-HIPSTer_2020', 'VirusMINT', 'Virus_Perturbations_from_GEO_down', 'Virus_Perturbations_from_GEO_up', 'WikiPathway_2021_Human', 'WikiPathway_2023_Human', 'WikiPathways_2013', 'WikiPathways_2015', 'WikiPathways_2016', 'WikiPathways_2019_Human', 'WikiPathways_2019_Mouse', 'dbGaP', 'huMAP', 'lncHUB_lncRNA_Co-Expression', 'miRTarBase_2017']\n```\n:::\n:::\n\n\n{{< meta dge_gsea_3 >}}\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nres = gseapy.prerank(rnk=gene_rank, gene_sets='KEGG_2021_Human')\n\nterms = res.res2d.Term\nterms[:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n0                           Autoimmune thyroid disease\n1                                  Allograft rejection\n2                            Graft-versus-host disease\n3                             Type I diabetes mellitus\n4            Natural killer cell mediated cytotoxicity\n5           Valine, leucine and isoleucine degradation\n6                  Complement and coagulation cascades\n7                               Fatty acid degradation\n8                                               Asthma\n9    Viral protein interaction with cytokine and cy...\nName: Term, dtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ngseapy.gseaplot(rank_metric=res.ranking, term=terms[0], **res.results[terms[0]])\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n[<Axes: xlabel='Gene Rank', ylabel='Ranked metric'>,\n <Axes: >,\n <Axes: >,\n <Axes: ylabel='Enrichment Score'>]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_05_dge_files/figure-html/cell-33-output-2.png){}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta dge_gsea_4 >}}\n\n\n:::\n\n\n{{< meta dge_save >}}\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nadata.write_h5ad('./data/results/scanpy_DGE_covid.h5ad')\n```\n:::\n\n\n## {{< meta session >}}\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nsc.logging.print_versions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-----\nanndata     0.9.2\nscanpy      1.7.2\nsinfo       0.3.1\n-----\nPIL                         10.0.0\nanndata                     0.9.2\nanyio                       NA\narrow                       1.3.0\nasttokens                   NA\nattr                        23.1.0\nattrs                       23.1.0\nbabel                       2.12.1\nbackcall                    0.2.0\nbrotli                      1.0.9\ncertifi                     2023.07.22\ncffi                        1.16.0\ncharset_normalizer          3.2.0\ncolorama                    0.4.6\ncomm                        0.1.4\ncpuinfo                     NA\ncycler                      0.10.0\ncython_runtime              NA\ndateutil                    2.8.2\ndebugpy                     1.8.0\ndecorator                   5.1.1\ndefusedxml                  0.7.1\ndunamai                     1.18.0\nexceptiongroup              1.1.3\nexecuting                   1.2.0\nfastjsonschema              NA\nfqdn                        NA\nfuture                      0.18.3\nget_version                 3.5.4\ngseapy                      1.0.6\nh5py                        3.9.0\nidna                        3.4\nigraph                      0.11.2\nimportlib_resources         NA\nipykernel                   6.25.2\nipywidgets                  8.1.1\nisoduration                 NA\njedi                        0.19.1\njinja2                      3.1.2\njoblib                      1.3.0\njson5                       NA\njsonpointer                 2.4\njsonschema                  4.19.1\njsonschema_specifications   NA\njupyter_events              0.7.0\njupyter_server              2.7.3\njupyterlab_server           2.25.0\nkiwisolver                  1.4.5\nlegacy_api_wrap             0.0.0\nleidenalg                   0.10.1\nllvmlite                    0.40.1\nlouvain                     0.8.1\nmarkupsafe                  2.1.3\nmatplotlib                  3.6.3\nmatplotlib_inline           0.1.6\nmatplotlib_venn             0.11.9\nmpl_toolkits                NA\nnatsort                     8.4.0\nnbformat                    5.9.2\nnumba                       0.57.1\nnumexpr                     2.8.4\nnumpy                       1.24.4\noverrides                   NA\npackaging                   23.1\npandas                      1.5.3\nparso                       0.8.3\npatsy                       0.5.3\npexpect                     4.8.0\npickleshare                 0.7.5\npkg_resources               NA\nplatformdirs                3.10.0\nprometheus_client           NA\nprompt_toolkit              3.0.39\npsutil                      5.9.5\nptyprocess                  0.7.0\npure_eval                   0.2.2\npybiomart                   0.2.0\npycparser                   2.21\npydev_ipython               NA\npydevconsole                NA\npydevd                      2.9.5\npydevd_file_utils           NA\npydevd_plugins              NA\npydevd_tracing              NA\npygments                    2.16.1\npyparsing                   3.0.9\npythonjsonlogger            NA\npytz                        2023.3\nreferencing                 NA\nrequests                    2.31.0\nrequests_cache              0.4.13\nrfc3339_validator           0.1.4\nrfc3986_validator           0.1.1\nrpds                        NA\nscanpy                      1.7.2\nscipy                       1.10.1\nseaborn                     0.12.2\nsend2trash                  NA\nsetuptools_scm              NA\nsinfo                       0.3.1\nsix                         1.16.0\nsklearn                     1.3.1\nsniffio                     1.3.0\nsocks                       1.7.1\nstack_data                  0.6.2\nstatsmodels                 0.14.0\ntables                      3.8.0\ntexttable                   1.7.0\nthreadpoolctl               3.2.0\ntornado                     6.3.3\ntraitlets                   5.11.2\ntyping_extensions           NA\nuri_template                NA\nurllib3                     2.0.4\nwcwidth                     0.2.8\nwebcolors                   1.13\nwebsocket                   1.6.4\nyaml                        6.0.1\nzipp                        NA\nzmq                         25.1.1\n-----\nIPython             8.12.2\njupyter_client      8.3.1\njupyter_core        5.4.0\njupyterlab          4.0.6\nnotebook            7.0.4\n-----\nPython 3.8.18 | packaged by conda-forge | (default, Oct 10 2023, 15:44:36) [GCC 12.3.0]\nLinux-6.4.16-linuxkit-x86_64-with-glibc2.10\n11 logical CPU cores, x86_64\n-----\nSession information updated at 2023-11-11 20:59\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "scanpy_05_dge_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}