{
  "hash": "0e514ea73634d3366a0e08bb1b843b95",
  "result": {
    "markdown": "---\ntitle: \"{{< meta st_title >}}\"\nsubtitle: \"{{< meta subtitle_scanpy >}}\"\ndescription: \"{{< meta st_description >}}\"\nformat: html\nengine: jupyter\n---\n\n::: {.callout-note}\nCode chunks run Python commands unless it starts with `%%bash`, in which case, those chunks run shell commands.\n:::\n\nAdapted from tutorials by Giovanni Palla\n(https://scanpy-tutorials.readthedocs.io/en/latest/spatial/integration-scanorama.html)\nand Carlos Talavera-López\n(https://docs.scvi-tools.org/en/latest/tutorials/notebooks/stereoscope_heart_LV_tutorial.html)\n\n\n{{< meta st_1 >}}\n\n\n\n## {{< meta st_prep >}}\n\n\n{{< meta st_prep_1 >}}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport scanpy as sc\nimport anndata as an\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scanorama\nimport warnings\n\nwarnings.simplefilter(action=\"ignore\", category=Warning)\n\n#sc.logging.print_versions() # gives errror!!\nsc.set_figure_params(facecolor=\"white\", figsize=(8, 8))\nsc.settings.verbosity = 3\n```\n:::\n\n\n{{< meta st_prep_2 >}}\n\n\n\nThe function `datasets.visium_sge()` downloads the dataset from 10x genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with\n`pp.calculate_qc_metrics()` and visualize them.\n\nWhen using your own Visium data, use Scanpy's read_visium() function to import it.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport os\nif not os.path.exists(\"./data/spatial/visium\"):\n    os.makedirs(\"./data/spatial/visium\")\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nadata_anterior = sc.datasets.visium_sge(\n    sample_id=\"V1_Mouse_Brain_Sagittal_Anterior\"\n)\nadata_posterior = sc.datasets.visium_sge(\n    sample_id=\"V1_Mouse_Brain_Sagittal_Posterior\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nreading /work/labs/scanpy/data/V1_Mouse_Brain_Sagittal_Anterior/filtered_feature_bc_matrix.h5\n (0:00:00)\nreading /work/labs/scanpy/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_bc_matrix.h5\n (0:00:00)\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nadata_anterior.var_names_make_unique()\nadata_posterior.var_names_make_unique()\n```\n:::\n\n\nTo make sure that both images are included in the merged object, use uns_merge=\"unique\".\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# merge into one dataset\nlibrary_names = [\"V1_Mouse_Brain_Sagittal_Anterior\", \"V1_Mouse_Brain_Sagittal_Posterior\"]\n\nadata = adata_anterior.concatenate(\n    adata_posterior,\n    batch_key=\"library_id\",\n    uns_merge=\"unique\",\n    batch_categories=library_names\n)\n\nadata\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nAnnData object with n_obs × n_vars = 6050 × 32285\n    obs: 'in_tissue', 'array_row', 'array_col', 'library_id'\n    var: 'gene_ids', 'feature_types', 'genome'\n    uns: 'spatial'\n    obsm: 'spatial'\n```\n:::\n:::\n\n\nAs you can see, we now have the slot spatial in obsm, which contains the spatial information from the Visium platform.\n\n## {{< meta st_qc >}}\n\n\n{{< meta st_qc_1 >}}\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# add info on mitochondrial and hemoglobin genes to the objects.\nadata.var['mt'] = adata.var_names.str.startswith('mt-') \nadata.var['hb'] = adata.var_names.str.contains((\"^Hb.*-\"))\n\nsc.pp.calculate_qc_metrics(adata, qc_vars=['mt','hb'], percent_top=None, log1p=False, inplace=True)\n\nsc.pl.violin(adata, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt', 'pct_counts_hb'], jitter=0.4, groupby = 'library_id', rotation= 45)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n{{< meta st_qc_2 >}}\n\n\n\nIn scanpy, this is a bit tricky when you have multiple sections, as you would have to subset and plot them separately.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# need to plot the two sections separately and specify the library_id\nfor library in library_names:\n    sc.pl.spatial(adata[adata.obs.library_id == library,:], library_id=library, color = [\"total_counts\", \"n_genes_by_counts\",'pct_counts_mt', 'pct_counts_hb'])\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-8-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-8-output-2.png){}\n:::\n:::\n\n\n{{< meta st_qc_3 >}}\n\n\n\n### {{< meta st_qc_filter >}}\n\n\n{{< meta st_qc_filter_1 >}}\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nkeep = (adata.obs['pct_counts_hb'] < 20) & (adata.obs['pct_counts_mt'] < 25) & (adata.obs['n_genes_by_counts'] > 1000)\nprint(sum(keep))\n\nadata = adata[keep,:]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5749\n```\n:::\n:::\n\n\nAnd replot onto tissue sections.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfor library in library_names:\n    sc.pl.spatial(adata[adata.obs.library_id == library,:], library_id=library, color = [\"total_counts\", \"n_genes_by_counts\",'pct_counts_mt', 'pct_counts_hb'])\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-10-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-10-output-2.png){}\n:::\n:::\n\n\n### {{< meta st_qc_top >}}\n\n\n{{< meta st_qc_top_1 >}}\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nsc.pl.highest_expr_genes(adata, n_top=20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnormalizing counts per cell\n    finished (0:00:00)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-11-output-2.png){}\n:::\n:::\n\n\n{{< meta st_qc_top_2 >}}\n\n\n\n### {{< meta st_qc_filterg >}}\n\n\n{{< meta st_qc_filterg_1 >}}\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nmito_genes = adata.var_names.str.startswith('mt-')\nhb_genes = adata.var_names.str.contains('^Hb.*-')\n\nremove = np.add(mito_genes, hb_genes)\nremove[adata.var_names == \"Bc1\"] = True\nkeep = np.invert(remove)\nprint(sum(remove))\n\nadata = adata[:,keep]\n\nprint(adata.n_obs, adata.n_vars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n22\n5749 32263\n```\n:::\n:::\n\n\n## {{< meta st_analysis >}}\n\n\n{{< meta st_analysis_1 >}}\n\n\n\nAs we have two sections, we will select variable genes with batch_key=\"library_id\" and then take the union of variable genes for further analysis. The idea is to avoid including batch specific genes in the analysis.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# save the counts to a separate object for later, we need the normalized counts in raw for DEG dete\ncounts_adata = adata.copy()\n\nsc.pp.normalize_total(adata, inplace=True)\nsc.pp.log1p(adata)\n# take 1500 variable genes per batch and then use the union of them.\nsc.pp.highly_variable_genes(adata, flavor=\"seurat\", n_top_genes=1500, inplace=True, batch_key=\"library_id\")\n\n# subset for variable genes\nadata.raw = adata\nadata = adata[:,adata.var.highly_variable_nbatches > 0]\n\n# scale data\nsc.pp.scale(adata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnormalizing counts per cell\n    finished (0:00:00)\nIf you pass `n_top_genes`, all cutoffs are ignored.\nextracting highly variable genes\n    finished (0:00:02)\n--> added\n    'highly_variable', boolean vector (adata.var)\n    'means', float vector (adata.var)\n    'dispersions', float vector (adata.var)\n    'dispersions_norm', float vector (adata.var)\n... as `zero_center=True`, sparse input is densified and may lead to large memory consumption\n```\n:::\n:::\n\n\n{{< meta st_analysis_2 >}}\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfor library in library_names:\n    sc.pl.spatial(adata[adata.obs.library_id == library,:], library_id=library, color = [\"Ttr\", \"Hpca\"])\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-14-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-14-output-2.png){}\n:::\n:::\n\n\n### {{< meta st_analysis_dimred >}}\n\n\n{{< meta st_analysis_dimred_1 >}}\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nsc.pp.neighbors(adata)\nsc.tl.umap(adata)\nsc.tl.leiden(adata, key_added=\"clusters\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncomputing neighbors\nWARNING: You’re trying to run this on 2405 dimensions of `.X`, if you really want this, set `use_rep='X'`.\n         Falling back to preprocessing with `sc.pp.pca` and default params.\ncomputing PCA\n    with n_comps=50\n    finished (0:00:00)\n    finished: added to `.uns['neighbors']`\n    `.obsp['distances']`, distances for each pair of neighbors\n    `.obsp['connectivities']`, weighted adjacency matrix (0:00:08)\ncomputing UMAP\n    finished: added\n    'X_umap', UMAP coordinates (adata.obsm) (0:00:09)\nrunning Leiden clustering\n    finished: found 23 clusters and added\n    'clusters', the cluster labels (adata.obs, categorical) (0:00:02)\n```\n:::\n:::\n\n\n{{< meta st_analysis_dimred_2 >}}\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nsc.pl.umap(\n    adata, color=[\"clusters\", \"library_id\"], palette=sc.pl.palettes.default_20\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING: Length of palette colors is smaller than the number of categories (palette length: 20, categories length: 23. Some categories will have the same color.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-16-output-2.png){}\n:::\n:::\n\n\nAs we are plotting the two sections separately, we need to make sure that they get the same colors by fetching cluster colors from a dict.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nclusters_colors = dict(\n    zip([str(i) for i in range(len(adata.obs.clusters.cat.categories))], adata.uns[\"clusters_colors\"])\n)\n\nfig, axs = plt.subplots(1, 2, figsize=(15, 10))\n\nfor i, library in enumerate(\n    [\"V1_Mouse_Brain_Sagittal_Anterior\", \"V1_Mouse_Brain_Sagittal_Posterior\"]\n):\n    ad = adata[adata.obs.library_id == library, :].copy()\n    sc.pl.spatial(\n        ad,\n        img_key=\"hires\",\n        library_id=library,\n        color=\"clusters\",\n        size=1.5,\n        palette=[\n            v\n            for k, v in clusters_colors.items()\n            if k in ad.obs.clusters.unique().tolist()\n        ],\n        legend_loc=None,\n        show=False,\n        ax=axs[i],\n    )\n\nplt.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-17-output-1.png){}\n:::\n:::\n\n\n### {{< meta st_analysis_int >}}\n\n\n{{< meta st_analysis_int_1 >}}\n\n\n\nWe will do a similar integration as in the Data Integration lab, here we will use Scanorama for integration.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nadatas = {}\nfor batch in library_names:\n    adatas[batch] = adata[adata.obs['library_id'] == batch,]\n\nadatas \n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n{'V1_Mouse_Brain_Sagittal_Anterior': View of AnnData object with n_obs × n_vars = 2597 × 2405\n     obs: 'in_tissue', 'array_row', 'array_col', 'library_id', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_hb', 'pct_counts_hb', 'clusters'\n     var: 'gene_ids', 'feature_types', 'genome', 'mt', 'hb', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection', 'mean', 'std'\n     uns: 'spatial', 'library_id_colors', 'log1p', 'hvg', 'neighbors', 'umap', 'leiden', 'clusters_colors'\n     obsm: 'spatial', 'X_pca', 'X_umap'\n     obsp: 'distances', 'connectivities',\n 'V1_Mouse_Brain_Sagittal_Posterior': View of AnnData object with n_obs × n_vars = 3152 × 2405\n     obs: 'in_tissue', 'array_row', 'array_col', 'library_id', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_hb', 'pct_counts_hb', 'clusters'\n     var: 'gene_ids', 'feature_types', 'genome', 'mt', 'hb', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection', 'mean', 'std'\n     uns: 'spatial', 'library_id_colors', 'log1p', 'hvg', 'neighbors', 'umap', 'leiden', 'clusters_colors'\n     obsm: 'spatial', 'X_pca', 'X_umap'\n     obsp: 'distances', 'connectivities'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nimport scanorama\n\n#convert to list of AnnData objects\nadatas = list(adatas.values())\n\n# run scanorama.integrate\nscanorama.integrate_scanpy(adatas, dimred = 50)\n\n# Get all the integrated matrices.\nscanorama_int = [ad.obsm['X_scanorama'] for ad in adatas]\n\n# make into one matrix.\nall_s = np.concatenate(scanorama_int)\nprint(all_s.shape)\n\n# add to the AnnData object\nadata.obsm[\"Scanorama\"] = all_s\n\nadata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound 2405 genes among all datasets\n[[0.         0.47824413]\n [0.         0.        ]]\nProcessing datasets (0, 1)\n(5749, 50)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nAnnData object with n_obs × n_vars = 5749 × 2405\n    obs: 'in_tissue', 'array_row', 'array_col', 'library_id', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_hb', 'pct_counts_hb', 'clusters'\n    var: 'gene_ids', 'feature_types', 'genome', 'mt', 'hb', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection', 'mean', 'std'\n    uns: 'spatial', 'library_id_colors', 'log1p', 'hvg', 'neighbors', 'umap', 'leiden', 'clusters_colors'\n    obsm: 'spatial', 'X_pca', 'X_umap', 'Scanorama'\n    obsp: 'distances', 'connectivities'\n```\n:::\n:::\n\n\n{{< meta st_analysis_int_2 >}}\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nsc.pp.neighbors(adata, use_rep=\"Scanorama\")\nsc.tl.umap(adata)\nsc.tl.leiden(adata, key_added=\"clusters\")\n\nsc.pl.umap(\n    adata, color=[\"clusters\", \"library_id\"], palette=sc.pl.palettes.default_20\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncomputing neighbors\n    finished: added to `.uns['neighbors']`\n    `.obsp['distances']`, distances for each pair of neighbors\n    `.obsp['connectivities']`, weighted adjacency matrix (0:00:00)\ncomputing UMAP\n    finished: added\n    'X_umap', UMAP coordinates (adata.obsm) (0:00:08)\nrunning Leiden clustering\n    finished: found 19 clusters and added\n    'clusters', the cluster labels (adata.obs, categorical) (0:00:02)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-20-output-2.png){}\n:::\n:::\n\n\nAs we have new clusters, we again need to make a new dict for cluster colors\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nclusters_colors = dict(\n    zip([str(i) for i in range(len(adata.obs.clusters.cat.categories))], adata.uns[\"clusters_colors\"])\n)\n\nfig, axs = plt.subplots(1, 2, figsize=(15, 10))\n\nfor i, library in enumerate(\n    [\"V1_Mouse_Brain_Sagittal_Anterior\", \"V1_Mouse_Brain_Sagittal_Posterior\"]\n):\n    ad = adata[adata.obs.library_id == library, :].copy()\n    sc.pl.spatial(\n        ad,\n        img_key=\"hires\",\n        library_id=library,\n        color=\"clusters\",\n        size=1.5,\n        palette=[\n            v\n            for k, v in clusters_colors.items()\n            if k in ad.obs.clusters.unique().tolist()\n        ],\n        legend_loc=\"on data\",\n        show=False,\n        ax=axs[i],\n    )\n\nplt.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-21-output-1.png){}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta st_analysis_int_3 >}}\n\n\n:::\n\n### {{< meta st_analysis_svg >}}\n\n\n{{< meta st_analysis_svg_1 >}}\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# run t-test \nsc.tl.rank_genes_groups(adata, \"clusters\", method=\"wilcoxon\")\n# plot as heatmap for cluster5 genes\nsc.pl.rank_genes_groups_heatmap(adata, groups=\"5\", n_genes=10, groupby=\"clusters\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nranking genes\n    finished: added to `.uns['rank_genes_groups']`\n    'names', sorted np.recarray to be indexed by group ids\n    'scores', sorted np.recarray to be indexed by group ids\n    'logfoldchanges', sorted np.recarray to be indexed by group ids\n    'pvals', sorted np.recarray to be indexed by group ids\n    'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:13)\nWARNING: dendrogram data not found (using key=dendrogram_clusters). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\n    using 'X_pca' with n_pcs = 50\nStoring dendrogram info using `.uns['dendrogram_clusters']`\nWARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.\ncategories: 0, 1, 2, etc.\nvar_group_labels: 5\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-22-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# plot onto spatial location\ntop_genes = sc.get.rank_genes_groups_df(adata, group='5',log2fc_min=0)['names'][:3]\n\nfor library in [\"V1_Mouse_Brain_Sagittal_Anterior\", \"V1_Mouse_Brain_Sagittal_Posterior\"]:\n    sc.pl.spatial(adata[adata.obs.library_id == library,:], library_id=library, color = top_genes)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-23-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-23-output-2.png){}\n:::\n:::\n\n\nSpatial transcriptomics allows researchers to investigate how gene expression trends varies in space, thus identifying spatial patterns of gene expression. For this purpose there are multiple methods, such as SpatailDE, SPARK, Trendsceek, HMRF and Splotch.\n\nWe use SpatialDE Svensson et al., a Gaussian process-based statistical framework that aims to identify spatially variable genes.\n\n::: {callout-warning}\nTakes a long time to run, so skip this step for now and download the precomputed file.\n:::\n\n::: {.cell results='hide' execution_count=23}\n``` {.python .cell-code}\n# slow step\n\nimport NaiveDE\nimport SpatialDE\n\ncounts = sc.get.obs_df(adata, keys=list(adata.var_names), use_raw=True)\ntotal_counts = sc.get.obs_df(adata, keys=[\"total_counts\"])\nnorm_expr = NaiveDE.stabilize(counts.T).T\nresid_expr = NaiveDE.regress_out(\n    total_counts, norm_expr.T, \"np.log(total_counts)\").T\nresults = SpatialDE.run(adata.obsm[\"spatial\"], resid_expr)\n\nimport pickle\nwith open('data/spatial/visium/scanpy_spatialde.pkl', 'wb') as file:\n    pickle.dump(results, file)\n```\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nimport urllib.request\nimport os\n\npath_data = \"https://export.uppmax.uu.se/naiss2023-23-3/workshops/workshop-scrnaseq\"\n\npath_file = \"data/spatial/visium/scanpy_spatialde.pkl\"\nif not os.path.exists(path_file):\n    file_url = os.path.join(\n        path_data, \"spatial/visium/results/scanpy_spatialde.pkl\")\n    urllib.request.urlretrieve(file_url, path_file)\n```\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nimport pickle\nwith open('data/spatial/visium/scanpy_spatialde.pkl', 'rb') as file:\n    results = pickle.load(file)\n```\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# We concatenate the results with the DataFrame of annotations of variables: `adata.var`.\nresults.index = results[\"g\"]\nadata.var = pd.concat(\n    [adata.var, results.loc[adata.var.index.values, :]], axis=1)\nadata.write_h5ad('./data/spatial/visium/adata_processed_sc.h5ad')\n\n# Then we can inspect significant genes that varies in space and visualize them with `sc.pl.spatial` function.\nresults.sort_values(\"qval\").head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FSV</th>\n      <th>M</th>\n      <th>g</th>\n      <th>l</th>\n      <th>max_delta</th>\n      <th>max_ll</th>\n      <th>max_mu_hat</th>\n      <th>max_s2_t_hat</th>\n      <th>model</th>\n      <th>n</th>\n      <th>s2_FSV</th>\n      <th>s2_logdelta</th>\n      <th>time</th>\n      <th>BIC</th>\n      <th>max_ll_null</th>\n      <th>LLR</th>\n      <th>pval</th>\n      <th>qval</th>\n    </tr>\n    <tr>\n      <th>g</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Efnb3</th>\n      <td>1.775241e-01</td>\n      <td>4</td>\n      <td>Efnb3</td>\n      <td>544.733658</td>\n      <td>4.490546e+00</td>\n      <td>-4701.690768</td>\n      <td>0.920436</td>\n      <td>6.950994e-02</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>8.838199e-06</td>\n      <td>4.029374e-04</td>\n      <td>0.002817</td>\n      <td>9438.008662</td>\n      <td>-5374.163817</td>\n      <td>672.473049</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>S100a16</th>\n      <td>5.205988e-02</td>\n      <td>4</td>\n      <td>S100a16</td>\n      <td>544.733658</td>\n      <td>1.764863e+01</td>\n      <td>-4013.533873</td>\n      <td>1.703474</td>\n      <td>3.034361e-02</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>7.639943e-06</td>\n      <td>2.521451e-03</td>\n      <td>0.002874</td>\n      <td>8061.694871</td>\n      <td>-4099.970498</td>\n      <td>86.436625</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>S100a5</th>\n      <td>3.082312e-01</td>\n      <td>4</td>\n      <td>S100a5</td>\n      <td>544.733658</td>\n      <td>2.175292e+00</td>\n      <td>-989.712703</td>\n      <td>-0.692740</td>\n      <td>3.893413e-02</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>1.244686e-05</td>\n      <td>3.006748e-04</td>\n      <td>0.006836</td>\n      <td>2014.052530</td>\n      <td>-2128.916543</td>\n      <td>1139.203841</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>S100a6</th>\n      <td>1.198049e-01</td>\n      <td>4</td>\n      <td>S100a6</td>\n      <td>544.733658</td>\n      <td>7.120948e+00</td>\n      <td>-4911.277757</td>\n      <td>0.024394</td>\n      <td>4.364682e-02</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>1.525869e-05</td>\n      <td>1.234171e-03</td>\n      <td>0.005581</td>\n      <td>9857.182640</td>\n      <td>-5087.893957</td>\n      <td>176.616199</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Cers2</th>\n      <td>6.170160e-02</td>\n      <td>4</td>\n      <td>Cers2</td>\n      <td>544.733658</td>\n      <td>1.473933e+01</td>\n      <td>-4909.254062</td>\n      <td>1.688963</td>\n      <td>3.873848e-02</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>6.963833e-06</td>\n      <td>1.699495e-03</td>\n      <td>0.002615</td>\n      <td>9853.135249</td>\n      <td>-5025.230150</td>\n      <td>115.976088</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Car14</th>\n      <td>6.721518e-02</td>\n      <td>4</td>\n      <td>Car14</td>\n      <td>544.733658</td>\n      <td>1.345078e+01</td>\n      <td>-4078.211327</td>\n      <td>1.646634</td>\n      <td>3.422252e-02</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>5.827188e-06</td>\n      <td>1.224504e-03</td>\n      <td>0.002738</td>\n      <td>8191.049780</td>\n      <td>-4232.446324</td>\n      <td>154.234997</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Hmgcs2</th>\n      <td>1.043706e-01</td>\n      <td>4</td>\n      <td>Hmgcs2</td>\n      <td>544.733658</td>\n      <td>8.317319e+00</td>\n      <td>64.273783</td>\n      <td>-0.697246</td>\n      <td>9.799863e-03</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>1.273224e-05</td>\n      <td>1.280151e-03</td>\n      <td>0.002757</td>\n      <td>-93.920441</td>\n      <td>-106.666922</td>\n      <td>170.940704</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Atp1a1</th>\n      <td>1.951715e-01</td>\n      <td>4</td>\n      <td>Atp1a1</td>\n      <td>544.733658</td>\n      <td>3.996873e+00</td>\n      <td>-2655.884269</td>\n      <td>-1.945325</td>\n      <td>6.109633e-02</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>1.387274e-05</td>\n      <td>5.578607e-04</td>\n      <td>0.002461</td>\n      <td>5346.395662</td>\n      <td>-3228.572142</td>\n      <td>572.687873</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Vangl1</th>\n      <td>1.997762e-09</td>\n      <td>4</td>\n      <td>Vangl1</td>\n      <td>544.733658</td>\n      <td>4.851652e+08</td>\n      <td>523.655680</td>\n      <td>-0.633082</td>\n      <td>9.297993e-10</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>5.712059e-09</td>\n      <td>1.036289e+09</td>\n      <td>0.011918</td>\n      <td>-1012.684235</td>\n      <td>435.773794</td>\n      <td>87.881886</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Tspan2</th>\n      <td>2.008700e-01</td>\n      <td>4</td>\n      <td>Tspan2</td>\n      <td>544.733658</td>\n      <td>3.855987e+00</td>\n      <td>-4904.385928</td>\n      <td>2.862779</td>\n      <td>1.358988e-01</td>\n      <td>SE</td>\n      <td>5749</td>\n      <td>1.765625e-05</td>\n      <td>6.842354e-04</td>\n      <td>0.002182</td>\n      <td>9843.398981</td>\n      <td>-5358.727526</td>\n      <td>454.341598</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## {{< meta st_ss >}}\n\n\n{{< meta st_ss_1 >}}\n\n\n\nConveniently, you can also download the pre-processed dataset in h5ad format from here. Here with bash code:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nimport urllib.request\nimport os\n\npath_data = \"https://export.uppmax.uu.se/naiss2023-23-3/workshops/workshop-scrnaseq\"\n\npath_file = \"data/spatial/visium/allen_cortex.h5ad\"\nif not os.path.exists(path_file):\n    file_url = os.path.join(\n        path_data, \"spatial/visium/allen_cortex.h5ad\")\n    urllib.request.urlretrieve(file_url, path_file)\n```\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nadata_cortex = sc.read_h5ad(\"data/spatial/visium/allen_cortex.h5ad\")\nadata_cortex\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nAnnData object with n_obs × n_vars = 14249 × 34617\n    obs: 'orig.ident', 'nCount_RNA', 'nFeature_RNA', 'sample_id', 'sample_type', 'organism', 'donor', 'sex', 'age_days', 'eye_condition', 'genotype', 'driver_lines', 'reporter_lines', 'brain_hemisphere', 'brain_region', 'brain_subregion', 'injection_label_direction', 'injection_primary', 'injection_secondary', 'injection_tract', 'injection_material', 'injection_exclusion_criterion', 'facs_date', 'facs_container', 'facs_sort_criteria', 'rna_amplification_set', 'library_prep_set', 'library_prep_avg_size_bp', 'seq_name', 'seq_tube', 'seq_batch', 'total_reads', 'percent_exon_reads', 'percent_intron_reads', 'percent_intergenic_reads', 'percent_rrna_reads', 'percent_mt_exon_reads', 'percent_reads_unique', 'percent_synth_reads', 'percent_ecoli_reads', 'percent_aligned_reads_total', 'complexity_cg', 'genes_detected_cpm_criterion', 'genes_detected_fpkm_criterion', 'tdt_cpm', 'gfp_cpm', 'class', 'subclass', 'cluster', 'confusion_score', 'cluster_correlation', 'core_intermediate_call'\n    var: 'features'\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nadata_cortex.obs\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>orig.ident</th>\n      <th>nCount_RNA</th>\n      <th>nFeature_RNA</th>\n      <th>sample_id</th>\n      <th>sample_type</th>\n      <th>organism</th>\n      <th>donor</th>\n      <th>sex</th>\n      <th>age_days</th>\n      <th>eye_condition</th>\n      <th>...</th>\n      <th>genes_detected_cpm_criterion</th>\n      <th>genes_detected_fpkm_criterion</th>\n      <th>tdt_cpm</th>\n      <th>gfp_cpm</th>\n      <th>class</th>\n      <th>subclass</th>\n      <th>cluster</th>\n      <th>confusion_score</th>\n      <th>cluster_correlation</th>\n      <th>core_intermediate_call</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>F1S4_160108_001_A01</th>\n      <td>0</td>\n      <td>1730700.0</td>\n      <td>9029</td>\n      <td>527128530</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>225675</td>\n      <td>M</td>\n      <td>53</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>10445</td>\n      <td>9222</td>\n      <td>248.86</td>\n      <td>248.86</td>\n      <td>GABAergic</td>\n      <td>Vip</td>\n      <td>Vip Arhgap36 Hmcn1</td>\n      <td>0.4385</td>\n      <td>0.837229</td>\n      <td>Intermediate</td>\n    </tr>\n    <tr>\n      <th>F1S4_160108_001_B01</th>\n      <td>0</td>\n      <td>1909605.0</td>\n      <td>10207</td>\n      <td>527128536</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>225675</td>\n      <td>M</td>\n      <td>53</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>11600</td>\n      <td>10370</td>\n      <td>289.61</td>\n      <td>289.61</td>\n      <td>GABAergic</td>\n      <td>Lamp5</td>\n      <td>Lamp5 Lsp1</td>\n      <td>0.1025</td>\n      <td>0.878743</td>\n      <td>Core</td>\n    </tr>\n    <tr>\n      <th>F1S4_160108_001_C01</th>\n      <td>0</td>\n      <td>1984948.0</td>\n      <td>10578</td>\n      <td>527128542</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>225675</td>\n      <td>M</td>\n      <td>53</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>11848</td>\n      <td>10734</td>\n      <td>281.06</td>\n      <td>281.06</td>\n      <td>GABAergic</td>\n      <td>Lamp5</td>\n      <td>Lamp5 Lsp1</td>\n      <td>0.0195</td>\n      <td>0.887084</td>\n      <td>Core</td>\n    </tr>\n    <tr>\n      <th>F1S4_160108_001_D01</th>\n      <td>0</td>\n      <td>2291552.0</td>\n      <td>8482</td>\n      <td>527128548</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>225675</td>\n      <td>M</td>\n      <td>53</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>9494</td>\n      <td>8561</td>\n      <td>390.02</td>\n      <td>390.02</td>\n      <td>GABAergic</td>\n      <td>Vip</td>\n      <td>Vip Crispld2 Htr2c</td>\n      <td>0.2734</td>\n      <td>0.843552</td>\n      <td>Core</td>\n    </tr>\n    <tr>\n      <th>F1S4_160108_001_E01</th>\n      <td>0</td>\n      <td>1757463.0</td>\n      <td>8697</td>\n      <td>527128554</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>225675</td>\n      <td>M</td>\n      <td>53</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>10012</td>\n      <td>8791</td>\n      <td>253.92</td>\n      <td>253.92</td>\n      <td>GABAergic</td>\n      <td>Lamp5</td>\n      <td>Lamp5 Plch2 Dock5</td>\n      <td>0.7532</td>\n      <td>0.854994</td>\n      <td>Core</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>FYS4_171004_104_C01</th>\n      <td>2</td>\n      <td>949356.0</td>\n      <td>9141</td>\n      <td>645142562</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>350650</td>\n      <td>M</td>\n      <td>51</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>9629</td>\n      <td>9229</td>\n      <td>432.15</td>\n      <td>432.15</td>\n      <td>Glutamatergic</td>\n      <td>L5 PT</td>\n      <td>L5 PT VISp C1ql2 Cdh13</td>\n      <td>0.0477</td>\n      <td>0.885255</td>\n      <td>Core</td>\n    </tr>\n    <tr>\n      <th>FYS4_171004_104_D01</th>\n      <td>2</td>\n      <td>998736.0</td>\n      <td>6927</td>\n      <td>645142573</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>350650</td>\n      <td>M</td>\n      <td>51</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>7701</td>\n      <td>7023</td>\n      <td>217.83</td>\n      <td>217.83</td>\n      <td>GABAergic</td>\n      <td>Sst</td>\n      <td>Sst Hpse Sema3c</td>\n      <td>0.1064</td>\n      <td>0.854499</td>\n      <td>Core</td>\n    </tr>\n    <tr>\n      <th>FYS4_171004_104_F01</th>\n      <td>2</td>\n      <td>1002766.0</td>\n      <td>6936</td>\n      <td>645142613</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>350650</td>\n      <td>M</td>\n      <td>51</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>7888</td>\n      <td>7054</td>\n      <td>91.88</td>\n      <td>91.88</td>\n      <td>Glutamatergic</td>\n      <td>L5 PT</td>\n      <td>L5 PT VISp Chrna6</td>\n      <td>0.0095</td>\n      <td>0.822625</td>\n      <td>Core</td>\n    </tr>\n    <tr>\n      <th>FYS4_171004_104_G01</th>\n      <td>2</td>\n      <td>1025804.0</td>\n      <td>8027</td>\n      <td>645142648</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>350650</td>\n      <td>M</td>\n      <td>51</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>8933</td>\n      <td>8146</td>\n      <td>127.77</td>\n      <td>127.77</td>\n      <td>GABAergic</td>\n      <td>Sst</td>\n      <td>Sst Calb2 Pdlim5</td>\n      <td>0.2852</td>\n      <td>0.856322</td>\n      <td>Core</td>\n    </tr>\n    <tr>\n      <th>FYS4_171004_104_H01</th>\n      <td>2</td>\n      <td>882435.0</td>\n      <td>6574</td>\n      <td>645142673</td>\n      <td>Cells</td>\n      <td>Mus musculus</td>\n      <td>350650</td>\n      <td>M</td>\n      <td>51</td>\n      <td>Normal</td>\n      <td>...</td>\n      <td>7393</td>\n      <td>6687</td>\n      <td>310.17</td>\n      <td>310.17</td>\n      <td>GABAergic</td>\n      <td>Pvalb</td>\n      <td>Pvalb Reln Tac1</td>\n      <td>0.6089</td>\n      <td>0.799198</td>\n      <td>Core</td>\n    </tr>\n  </tbody>\n</table>\n<p>14249 rows × 52 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nsc.pp.normalize_total(adata_cortex, target_sum=1e5)\nsc.pp.log1p(adata_cortex)\nsc.pp.highly_variable_genes(adata_cortex, min_mean=0.0125, max_mean=3, min_disp=0.5)\nsc.pp.scale(adata_cortex, max_value=10)\nsc.tl.pca(adata_cortex, svd_solver='arpack')\nsc.pp.neighbors(adata_cortex, n_pcs=30)\nsc.tl.umap(adata_cortex)\nsc.pl.umap(adata_cortex, color=\"subclass\", legend_loc='on data')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnormalizing counts per cell\n    finished (0:00:01)\nextracting highly variable genes\n    finished (0:00:07)\n--> added\n    'highly_variable', boolean vector (adata.var)\n    'means', float vector (adata.var)\n    'dispersions', float vector (adata.var)\n    'dispersions_norm', float vector (adata.var)\n... as `zero_center=True`, sparse input is densified and may lead to large memory consumption\ncomputing PCA\n    on highly variable genes\n    with n_comps=50\n    finished (0:00:07)\ncomputing neighbors\n    using 'X_pca' with n_pcs = 30\n    finished: added to `.uns['neighbors']`\n    `.obsp['distances']`, distances for each pair of neighbors\n    `.obsp['connectivities']`, weighted adjacency matrix (0:00:11)\ncomputing UMAP\n    finished: added\n    'X_umap', UMAP coordinates (adata.obsm) (0:00:13)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-31-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nadata_cortex.obs.subclass.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nsubclass\nL6 IT         1872\nSst           1741\nVip           1728\nL4            1401\nPvalb         1337\nLamp5         1122\nL2/3 IT        982\nL6 CT          960\nL5 IT          880\nL5 PT          544\nAstro          368\nNP             362\nL6b            358\nSncg           125\nEndo            94\nOligo           91\nVLMC            67\nSMC             55\nMacrophage      51\nMeis2           45\nPeri            32\nSerpinf1        27\nCR               7\nName: count, dtype: int64\n```\n:::\n:::\n\n\n{{< meta st_ss_2 >}}\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ntarget_cells = 200\n\nadatas2 = [adata_cortex[adata_cortex.obs.subclass == clust] for clust in adata_cortex.obs.subclass.cat.categories]\n\nfor dat in adatas2:\n    if dat.n_obs > target_cells:\n          sc.pp.subsample(dat, n_obs=target_cells)\n\nadata_cortex = adatas2[0].concatenate(*adatas2[1:])\n\nadata_cortex.obs.subclass.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nsubclass\nAstro         200\nL6 IT         200\nSst           200\nPvalb         200\nNP            200\nLamp5         200\nL6b           200\nVip           200\nL6 CT         200\nL5 PT         200\nL5 IT         200\nL4            200\nL2/3 IT       200\nSncg          125\nEndo           94\nOligo          91\nVLMC           67\nSMC            55\nMacrophage     51\nMeis2          45\nPeri           32\nSerpinf1       27\nCR              7\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nsc.pl.umap(\n    adata_cortex, color=[\"class\", \"subclass\", \"genotype\", \"brain_region\"], palette=sc.pl.palettes.default_28\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWARNING: Length of palette colors is smaller than the number of categories (palette length: 28, categories length: 61. Some categories will have the same color.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-34-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nsc.pl.umap(adata_cortex, color=\"subclass\", legend_loc = 'on data')\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-35-output-1.png){}\n:::\n:::\n\n\n## {{< meta st_sub >}}\n\n\n{{< meta st_sub_1 >}}\n\n\n\nFor deconvolution we will need the counts data, so we will subset from the counts_adata object that we created earlier.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nlib_a = \"V1_Mouse_Brain_Sagittal_Anterior\"\n\ncounts_adata.obs['clusters'] = adata.obs.clusters\n\nadata_anterior_subset = counts_adata[\n    (counts_adata.obs.library_id == lib_a) \n    & (counts_adata.obsm[\"spatial\"][:, 1] < 6000), :\n].copy()\n\n# select also the cortex clusters\nadata_anterior_subset = adata_anterior_subset[adata_anterior_subset.obs.clusters.isin(['3','4','6','7']),:]\n\n# plot to check that we have the correct regions\n\nsc.pl.spatial(\n    adata_anterior_subset,\n    img_key=\"hires\",\n    library_id = lib_a,\n    color=['clusters'],\n    size=1.5\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-36-output-1.png){}\n:::\n:::\n\n\n## {{< meta st_deconv >}}\n\n\n{{< meta st_deconv_1 >}}\n\n\n\nHere, we will use deconvolution with Stereoscope implemented in the SCVI-tools package. To read more about Stereoscope please check out this github page (https://github.com/almaan/stereoscope)\n\n### {{< meta st_deconv_genes >}}\n\n\n{{< meta st_deconv_genes_1 >}}\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nsc.tl.rank_genes_groups(adata_cortex, 'subclass', method = \"t-test\", n_genes=100)\nsc.pl.rank_genes_groups_dotplot(adata_cortex, n_genes=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nranking genes\nWARNING: It seems you use rank_genes_groups on the raw count data. Please logarithmize your data before calling rank_genes_groups.\n    finished: added to `.uns['rank_genes_groups']`\n    'names', sorted np.recarray to be indexed by group ids\n    'scores', sorted np.recarray to be indexed by group ids\n    'logfoldchanges', sorted np.recarray to be indexed by group ids\n    'pvals', sorted np.recarray to be indexed by group ids\n    'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:02)\nWARNING: dendrogram data not found (using key=dendrogram_subclass). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\n    using 'X_pca' with n_pcs = 50\nStoring dendrogram info using `.uns['dendrogram_subclass']`\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scanpy_08_spatial_files/figure-html/cell-37-output-2.png){}\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nsc.tl.filter_rank_genes_groups(adata_cortex, min_fold_change=1)\n\ngenes = sc.get.rank_genes_groups_df(adata_cortex, group = None)\ngenes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFiltering genes using: min_in_group_fraction: 0.25 min_fold_change: 1, max_out_group_fraction: 0.5\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>group</th>\n      <th>names</th>\n      <th>scores</th>\n      <th>logfoldchanges</th>\n      <th>pvals</th>\n      <th>pvals_adj</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Astro</td>\n      <td>24438</td>\n      <td>24.987505</td>\n      <td>NaN</td>\n      <td>3.887212e-64</td>\n      <td>7.446797e-63</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Astro</td>\n      <td>25832</td>\n      <td>23.915390</td>\n      <td>inf</td>\n      <td>1.620941e-60</td>\n      <td>2.924028e-59</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Astro</td>\n      <td>18190</td>\n      <td>21.893034</td>\n      <td>inf</td>\n      <td>5.711270e-55</td>\n      <td>9.514294e-54</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Astro</td>\n      <td>25833</td>\n      <td>21.557812</td>\n      <td>inf</td>\n      <td>5.534148e-54</td>\n      <td>9.045118e-53</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Astro</td>\n      <td>2882</td>\n      <td>20.950775</td>\n      <td>inf</td>\n      <td>2.972020e-53</td>\n      <td>4.796383e-52</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2295</th>\n      <td>Vip</td>\n      <td>24162</td>\n      <td>10.645898</td>\n      <td>193.386642</td>\n      <td>2.184734e-21</td>\n      <td>7.812906e-20</td>\n    </tr>\n    <tr>\n      <th>2296</th>\n      <td>Vip</td>\n      <td>31218</td>\n      <td>10.593735</td>\n      <td>262.868835</td>\n      <td>2.901054e-21</td>\n      <td>1.025800e-19</td>\n    </tr>\n    <tr>\n      <th>2297</th>\n      <td>Vip</td>\n      <td>18498</td>\n      <td>10.579262</td>\n      <td>NaN</td>\n      <td>1.337080e-21</td>\n      <td>4.856841e-20</td>\n    </tr>\n    <tr>\n      <th>2298</th>\n      <td>Vip</td>\n      <td>24420</td>\n      <td>10.556447</td>\n      <td>NaN</td>\n      <td>3.184234e-21</td>\n      <td>1.123635e-19</td>\n    </tr>\n    <tr>\n      <th>2299</th>\n      <td>Vip</td>\n      <td>29115</td>\n      <td>10.549688</td>\n      <td>322.383911</td>\n      <td>5.200959e-21</td>\n      <td>1.811284e-19</td>\n    </tr>\n  </tbody>\n</table>\n<p>2300 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ndeg = genes.names.unique().tolist()\nprint(len(deg))\n# check that the genes are also present in the ST data\n\ndeg = np.intersect1d(deg,adata_anterior_subset.var.index).tolist()\nprint(len(deg))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1624\n0\n```\n:::\n:::\n\n\nTrain the model\n\nFirst, train the model using scRNAseq data.\n\nStereoscope requires the data to be in counts, earlier in this tutorial we saved the spatial counts in a separate object counts_adata.\n\nHowever, the single cell dataset that we dowloaded only has the lognormalized data in the adata.X slot, hence we will have to recalculate the count matrix.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n# first do exponent and subtract pseudocount\nE = np.exp(adata_cortex.X)-1\nn = np.sum(E,1)\nprint(np.min(n), np.max(n))\n# all sums to 1.7M\nfactor = np.mean(n)\nnC = np.array(adata_cortex.obs.nCount_RNA) # true number of counts\nscaleF = nC/factor\nC = E * scaleF[:,None]\nC = C.astype(\"int\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n151625.94316551366 10392533.010632813\n```\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nsc_adata = adata_cortex.copy()\nsc_adata.X = C\n```\n:::\n\n\nSetup the anndata, the implementation requires the counts matrix to be in the \"counts\" layer as a copy.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nimport scvi\n# from scvi.data import register_tensor_from_anndata\nfrom scvi.external import RNAStereoscope, SpatialStereoscope\n\n# add counts layer\nsc_adata.layers[\"counts\"] = sc_adata.X.copy()\n\n# subset for the selected genes\nsc_adata = sc_adata[:, deg].copy()\n\n# create stereoscope object\nRNAStereoscope.setup_anndata(sc_adata, layer=\"counts\", labels_key=\"subclass\")\n```\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\n# the model is saved to a file, so if is slow to run, you can simply reload it from disk by setting train = False\n\ntrain = True\nif train:\n    sc_model = RNAStereoscope(sc_adata)\n    sc_model.train(max_epochs=300)\n    sc_model.history[\"elbo_train\"][10:].plot()\n    sc_model.save(\"./data/spatial/visium/scmodel\", overwrite=True)\nelse:\n    sc_model = RNAStereoscope.load(\"./data/spatial/visium/scmodel\", sc_adata)\n    print(\"Loaded RNA model from file!\")\n```\n:::\n\n\nPredict propritions on the spatial data\n\nFirst create a new st object with the correct genes and counts as a layer.\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nst_adata = adata_anterior_subset.copy()\n\nst_adata.layers[\"counts\"] = st_adata.X.copy()\nst_adata = st_adata[:, deg].copy()\n\nSpatialStereoscope.setup_anndata(st_adata, layer=\"counts\")\n```\n:::\n\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\ntrain=True\nif train:\n    spatial_model = SpatialStereoscope.from_rna_model(st_adata, sc_model)\n    spatial_model.train(max_epochs = 3000)\n    spatial_model.history[\"elbo_train\"][10:].plot()\n    spatial_model.save(\"./data/spatial/stmodel\", overwrite = True)\nelse:\n    spatial_model = SpatialStereoscope.load(\"./data/spatial/stmodel\", st_adata)\n    print(\"Loaded Spatial model from file!\")\n```\n:::\n\n\nGet the results from the model, also put them in the .obs slot.\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nst_adata.obsm[\"deconvolution\"] = spatial_model.get_proportions()\n\n# also copy to the obsm data frame\nfor ct in st_adata.obsm[\"deconvolution\"].columns:\n    st_adata.obs[ct] = st_adata.obsm[\"deconvolution\"][ct]\n```\n:::\n\n\nWe are then able to explore how cell types in the scRNA-seq dataset are predicted onto the visium dataset. Let's first visualize the neurons cortical layers.\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nsc.pl.spatial(\n    st_adata,\n    img_key=\"hires\",\n    color=[\"L2/3 IT\", \"L4\", \"L5 PT\", \"L6 CT\"],\n    library_id=lib_a,\n    size=1.5,\n    ncols=2\n)\n```\n:::\n\n\nWe can go ahead an visualize astrocytes and oligodendrocytes as well.\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nsc.pl.spatial(\n    st_adata, img_key=\"hires\", color=[\"Oligo\", \"Astro\"], size=1.5, library_id=lib_a\n)\n```\n:::\n\n\n{{< meta st_2 >}}\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nsc.pl.violin(st_adata, [\"L2/3 IT\", \"L6 CT\",\"Oligo\",\"Astro\"],\n            jitter=0.4, groupby = 'clusters', rotation= 45)\n```\n:::\n\n\n#ST_ALL14:\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta st_3 >}}\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nlib_p = \"V1_Mouse_Brain_Sagittal_Posterior\"\n\nadata_subregion = adata[\n    (adata.obs.library_id == lib_p)\n    & (adata.obsm[\"spatial\"][:, 0] > 6500),\n    :,\n].copy()\n\nsc.pl.spatial(\n    adata_subregion,\n    img_key=\"hires\",\n    library_id=lib_p,\n    color=['n_genes_by_counts'],\n    size=1.5\n)\n```\n:::\n\n\n:::\n\n## {{< meta session >}}\n\n<details>\n  <summary>Click here</summary>\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nsc.logging.print_versions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-----\nanndata     0.10.3\nscanpy      1.9.6\n-----\nPIL                 10.0.0\nannoy               NA\nanyio               NA\nasttokens           NA\nattr                23.1.0\nbabel               2.12.1\nbackcall            0.2.0\ncertifi             2023.11.17\ncffi                1.15.1\ncharset_normalizer  3.1.0\ncolorama            0.4.6\ncomm                0.1.3\ncycler              0.12.1\ncython_runtime      NA\ndateutil            2.8.2\ndebugpy             1.6.7\ndecorator           5.1.1\ndefusedxml          0.7.1\nexceptiongroup      1.2.0\nexecuting           1.2.0\nfastjsonschema      NA\nfbpca               NA\ngmpy2               2.1.2\nh5py                3.9.0\nidna                3.4\nigraph              0.10.8\nintervaltree        NA\nipykernel           6.23.1\nipython_genutils    0.2.0\njedi                0.18.2\njinja2              3.1.2\njoblib              1.3.2\njson5               NA\njsonpointer         2.0\njsonschema          4.17.3\njupyter_events      0.6.3\njupyter_server      2.6.0\njupyterlab_server   2.22.1\nkiwisolver          1.4.5\nleidenalg           0.10.1\nllvmlite            0.41.1\nlouvain             0.8.1\nmarkupsafe          2.1.2\nmatplotlib          3.8.0\nmatplotlib_inline   0.1.6\nmpl_toolkits        NA\nmpmath              1.3.0\nnatsort             8.4.0\nnbformat            5.8.0\nnumba               0.58.1\nnumpy               1.26.2\nopt_einsum          v3.3.0\noverrides           NA\npackaging           23.1\npandas              2.1.4\nparso               0.8.3\npatsy               0.5.5\npexpect             4.8.0\npickleshare         0.7.5\npkg_resources       NA\nplatformdirs        3.5.1\nprometheus_client   NA\nprompt_toolkit      3.0.38\npsutil              5.9.5\nptyprocess          0.7.0\npure_eval           0.2.2\npvectorc            NA\npycparser           2.21\npydev_ipython       NA\npydevconsole        NA\npydevd              2.9.5\npydevd_file_utils   NA\npydevd_plugins      NA\npydevd_tracing      NA\npygments            2.15.1\npynndescent         0.5.11\npyparsing           3.1.1\npyrsistent          NA\npythonjsonlogger    NA\npytz                2023.3\nrequests            2.31.0\nrfc3339_validator   0.1.4\nrfc3986_validator   0.1.1\nscanorama           1.7.4\nscipy               1.11.4\nseaborn             0.12.2\nsend2trash          NA\nsession_info        1.0.0\nsix                 1.16.0\nsklearn             1.3.2\nsniffio             1.3.0\nsocks               1.7.1\nsortedcontainers    2.4.0\nsparse              0.14.0\nstack_data          0.6.2\nstatsmodels         0.14.1\nsympy               1.12\ntexttable           1.7.0\nthreadpoolctl       3.2.0\ntorch               2.0.0\ntornado             6.3.2\ntqdm                4.65.0\ntraitlets           5.9.0\ntyping_extensions   NA\numap                0.5.5\nurllib3             2.0.2\nwcwidth             0.2.6\nwebsocket           1.5.2\nyaml                6.0\nzmq                 25.0.2\nzoneinfo            NA\nzstandard           0.19.0\n-----\nIPython             8.13.2\njupyter_client      8.2.0\njupyter_core        5.3.0\njupyterlab          4.0.1\nnotebook            6.5.4\n-----\nPython 3.10.11 | packaged by conda-forge | (main, May 10 2023, 18:58:44) [GCC 11.3.0]\nLinux-6.5.11-linuxkit-x86_64-with-glibc2.35\n-----\nSession information updated at 2024-01-14 12:29\n```\n:::\n:::\n\n\n</details>\n\n",
    "supporting": [
      "scanpy_08_spatial_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}