{
  "hash": "aac93208dbe08919d6a13728278ce09b",
  "result": {
    "markdown": "---\ntitle: \"{{< meta st_title >}}\"\nsubtitle: \"{{< meta subtitle_bioc >}}\"\ndescription: \"{{< meta st_description >}}\"\nformat: html\n---\n\n\n::: {.callout-note}\nCode chunks run R commands unless otherwise specified.\n:::\n\n\n{{< meta st_1 >}}\n\n\n\n## {{< meta st_prep >}}\n\n\n{{< meta st_prep_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# BiocManager::install('DropletUtils',update = F)\n# BiocManager::install(\"Spaniel\",update = F)\n# remotes::install_github(\"RachelQueen1/Spaniel\", ref = \"Development\" ,upgrade = F,dependencies = F)\n# remotes::install_github(\"renozao/xbioc\")\n# remotes::install_github(\"meichendong/SCDC\")\n\nlibrary(Spaniel)\nlibrary(biomaRt)\nlibrary(SingleCellExperiment)\n\nsuppressPackageStartupMessages({\n  require(Matrix)\n  require(dplyr)\n  require(scran)\n  require(SingleR)\n  require(scater)\n  require(ggplot2)\n  require(patchwork)\n  require(cowplot)\n})\n```\n:::\n\n{{< meta st_prep_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwebpath <- \"https://cf.10xgenomics.com/samples/spatial-exp/1.1.0/V1_Mouse_Brain_Sagittal_Posterior/\"\npath <- \"data/visium/Posterior\"\nif (!dir.exists(path)) dir.create(path, recursive = T)\nfile_list <- c(\n    \"V1_Mouse_Brain_Sagittal_Posterior_filtered_feature_bc_matrix.tar.gz\",\n    \"V1_Mouse_Brain_Sagittal_Posterior_spatial.tar.gz\"\n)\nfor (i in file_list) {\n    if (!file.exists(file.path(path, i))) {\n      cat(paste0(\"Downloading \", paste0(webpath, i), \" to \", file.path(path, i), \"\\n\"))\n      download.file(url = paste0(webpath, i), destfile = file.path(path, i))\n    }\n    cat(paste0(\"Uncompressing \", file.path(path, i), \"\\n\"))\n    system(paste0(\"tar -xvzf \", file.path(path, i), \" -C \",path))\n}\n\nwebpath <- \"https://cf.10xgenomics.com/samples/spatial-exp/1.1.0/V1_Mouse_Brain_Sagittal_Anterior/\"\npath <- \"data/visium/Anterior\"\nif (!dir.exists(path)) dir.create(path, recursive = T)\nfile_list <- c(\n    \"V1_Mouse_Brain_Sagittal_Anterior_filtered_feature_bc_matrix.tar.gz\",\n    \"V1_Mouse_Brain_Sagittal_Anterior_spatial.tar.gz\"\n)\nfor (i in file_list) {\n    if (!file.exists(file.path(path, i))) {\n        cat(paste0(\"Downloading \", paste0(webpath, i), \" to \", file.path(path, i), \"\\n\"))\n        download.file(url = paste0(webpath, i), destfile = file.path(path, i))\n    }\n    cat(paste0(\"Uncompressing \", file.path(path, i), \"\\n\"))\n    system(paste0(\"tar -xvzf \", file.path(path, i), \" -C \", path))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUncompressing data/visium/Posterior/V1_Mouse_Brain_Sagittal_Posterior_filtered_feature_bc_matrix.tar.gz\nUncompressing data/visium/Posterior/V1_Mouse_Brain_Sagittal_Posterior_spatial.tar.gz\nUncompressing data/visium/Anterior/V1_Mouse_Brain_Sagittal_Anterior_filtered_feature_bc_matrix.tar.gz\nUncompressing data/visium/Anterior/V1_Mouse_Brain_Sagittal_Anterior_spatial.tar.gz\n```\n:::\n:::\n\n\nMerge the objects into one SCE object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce.a <- Spaniel::createVisiumSCE(tenXDir=\"data/visium/Anterior\", resolution=\"Low\")\nsce.p <- Spaniel::createVisiumSCE(tenXDir=\"data/visium/Posterior\", resolution=\"Low\")\nsce <- cbind(sce.a, sce.p)\n\nsce$Sample <- sub( \".*[/]\" , \"\" ,  sub(\"/filtered_feature_bc_matrix\" , \"\", sce$Sample ))\n\nlll <- list(sce.a , sce.p)\nlll <- lapply( lll, function(x) x@metadata )\nnames(lll) <- c(\"Anterior\",\"Posterior\")\nsce@metadata <- lll\n```\n:::\n\n\nWe can further convert the gene ensembl IDs to gene names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmart <- biomaRt::useMart(biomart=\"ENSEMBL_MART_ENSEMBL\", dataset=\"mmusculus_gene_ensembl\")\nannot <- biomaRt::getBM(attributes = c(\"ensembl_gene_id\", \"external_gene_name\",\"gene_biotype\"), mart = mart, useCache = F)\nsaveRDS(annot, \"data/spatial/annot.rds\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_names <- as.character ( annot[match(rownames(sce),annot[,\"ensembl_gene_id\"]),\"external_gene_name\"] )\ngene_names[is.na(gene_names) ] <- \"\"\n\nsce <- sce[gene_names != \"\", ]\nrownames(sce) <- gene_names[gene_names != \"\"]\ndim(sce)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32053  6050\n```\n:::\n:::\n\n\n## {{< meta st_qc >}}\n\n\n{{< meta st_qc_1 >}}\n\n\n\nNow the counts and feature counts are calculated on the Spatial assay, so they are named  **nCount_Spatial** and **nFeature_Spatial**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mitochondrial genes\nmito_genes <- rownames(sce)[grep(\"^mt-\",rownames(sce))]\n\n# Ribosomal genes\nribo_genes <- rownames(sce)[grep(\"^Rp[sl]\",rownames(sce))]\n\n# Hemoglobin genes - includes all genes starting with HB except HBP.\nhb_genes <- rownames(sce)[grep(\"^Hb[^(p)]\",rownames(sce))]\n\nsce <- addPerCellQC(sce, flatten = T, subsets = list(mt=mito_genes, hb=hb_genes, ribo=ribo_genes))\n\nhead(colData(sce))\n\nplot_grid(plotColData(sce,y = \"detected\",x = \"Sample\",colour_by = \"Sample\"),\n          plotColData(sce,y = \"total\",x = \"Sample\",colour_by = \"Sample\"),\n          plotColData(sce,y = \"subsets_mt_percent\",x = \"Sample\",colour_by = \"Sample\"),\n          plotColData(sce,y = \"subsets_ribo_percent\",x = \"Sample\",colour_by = \"Sample\"),\n          plotColData(sce,y = \"subsets_hb_percent\",x = \"Sample\",colour_by = \"Sample\"),ncol = 3)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-7-1.png){width=1056}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 6 rows and 24 columns\n       Sample            Barcode   Section    Spot_Y    Spot_X   Image_Y\n  <character>        <character> <integer> <integer> <integer> <integer>\n1    Anterior AAACAAGTATCTCCCA-1         1        50       102      7474\n2    Anterior AAACACCAATAACTGC-1         1        59        19      8552\n3    Anterior AAACAGAGCGACTCCT-1         1        14        94      3163\n4    Anterior AAACAGCTTTCAGAAG-1         1        43         9      6636\n5    Anterior AAACAGGGTCTATATT-1         1        47        13      7115\n6    Anterior AAACATGGTGAGAGGA-1         1        62         0      8912\n    Image_X   pixel_x   pixel_y       sum  detected     total       sum\n  <integer> <numeric> <numeric> <numeric> <integer> <numeric> <numeric>\n1      8500   438.898   214.079     13991      4462     13991     13960\n2      2788   143.959   158.417     39797      8126     39797     39742\n3      7950   410.499   436.678     29951      6526     29951     29905\n4      2100   108.434   257.349     42333      8190     42333     42262\n5      2375   122.633   232.616     35700      8090     35700     35660\n6      1480    76.420   139.828     22148      6518     22148     22096\n   detected subsets_mt_sum subsets_mt_detected subsets_mt_percent\n  <integer>      <numeric>           <integer>          <numeric>\n1      4458           1521                  12           10.89542\n2      8116           3977                  12           10.00705\n3      6520           4265                  12           14.26183\n4      8181           2870                  12            6.79097\n5      8083           1831                  13            5.13460\n6      6509           2390                  12           10.81644\n  subsets_hb_sum subsets_hb_detected subsets_hb_percent subsets_ribo_sum\n       <numeric>           <integer>          <numeric>        <numeric>\n1             60                   4           0.429799              826\n2            831                   6           2.090987             2199\n3            111                   5           0.371175             1663\n4            117                   5           0.276844             3129\n5             73                   5           0.204711             2653\n6            134                   5           0.606445             1478\n  subsets_ribo_detected subsets_ribo_percent     total\n              <integer>            <numeric> <numeric>\n1                    85              5.91691     13960\n2                    89              5.53319     39742\n3                    88              5.56094     29905\n4                    88              7.40381     42262\n5                    90              7.43971     35660\n6                    84              6.68899     22096\n```\n:::\n:::\n\n{{< meta st_qc_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- c(\"Anterior\", \"Posterior\")\nto_plot <- c(\"detected\",\"total\",\"subsets_mt_percent\",\"subsets_ribo_percent\",\"subsets_hb_percent\")\n\nplist <- list()\nn=1\nfor(j in to_plot){\n  for(i in samples){\n    temp <- sce[,sce$Sample == i]\n    temp@metadata <- temp@metadata[[i]]\n    plist[[n]]<-spanielPlot(object = temp,\n        plotType = \"Cluster\",\n        clusterRes=j,customTitle = j,\n        techType = \"Visium\",\n        ptSizeMax = 1,ptSizeMin = .1)\n    n<-n+1\n  }\n}\n\nplot_grid(ncol=2, plotlist = plist)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n{{< meta st_qc_3 >}}\n\n\n\n### {{< meta st_qc_filter >}}\n\n\n{{< meta st_qc_filter_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- sce[ , sce$detected > 500 &\n              sce$subsets_mt_percent < 25 &\n              sce$subsets_hb_percent < 20]\ndim(sce)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32053  5804\n```\n:::\n:::\n\n\nAnd replot onto tissue section:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- c(\"Anterior\", \"Posterior\")\nto_plot <- c(\"detected\",\"total\",\"subsets_mt_percent\",\"subsets_mt_percent\",\"subsets_hb_percent\")\n\nplist <- list()\nn=1\nfor(j in to_plot){\n  for(i in samples){\n    temp <- sce[,sce$Sample == i]\n    temp@metadata <- temp@metadata[[i]]\n    plist[[n]]<-spanielPlot(object = temp,\n        plotType = \"Cluster\",\n        clusterRes=j,customTitle = j,\n        techType = \"Visium\",\n        ptSizeMax = 1,ptSizeMin = .1)\n    n<-n+1\n  }\n}\n\nplot_grid(ncol=2, plotlist = plist)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n### {{< meta st_qc_top >}}\n\n\n{{< meta st_qc_top_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nC = counts(sce)\nC@x = C@x / rep.int(colSums(C), diff(C@p))\nmost_expressed <- order(Matrix::rowSums( C ),decreasing = T)[20:1]\nboxplot( as.matrix(t(C[most_expressed,])),cex=.1, las=1, xlab=\"% total count per cell\",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-11-1.png){width=576}\n:::\n\n```{.r .cell-code}\nrm(C)\n```\n:::\n\n{{< meta st_qc_top_2 >}}\n\n\n\n### {{< meta st_qc_filterg >}}\n\n\n{{< meta st_qc_filterg_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(sce)\n\n# Filter Bl1\nsce <- sce[!grepl(\"Bc1\", rownames(sce)), ]\n\n# Filter Mitocondrial\nsce <- sce[!grepl(\"^mt-\", rownames(sce)), ]\n\n# Filter Hemoglobin gene (optional if that is a problem on your data)\nsce <- sce[!grepl(\"^Hb.*-\", rownames(sce)), ]\n\ndim(sce)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32053  5804\n[1] 32031  5804\n```\n:::\n:::\n\n\n## {{< meta st_analysis >}}\n\n\n{{< meta st_analysis_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- computeSumFactors(sce, sizes=c(20, 40, 60, 80))\nsce <- logNormCounts(sce)\n```\n:::\n\n{{< meta st_analysis_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- c(\"Anterior\", \"Posterior\")\nto_plot <- c(\"Hpca\", \"Ttr\")\n\nplist <- list()\nn=1\nfor(j in to_plot){\n  for(i in samples){\n    temp <- sce[,sce$Sample == i]\n    temp@metadata <- temp@metadata[[i]]\n    plist[[n]]<-spanielPlot(object = temp,\n        plotType = \"Gene\",\n        gene=j,\n        customTitle = j,\n        techType = \"Visium\",\n        ptSizeMax = 1,ptSizeMin = .1)\n    n<-n+1\n  }\n}\n\nplot_grid(ncol=2, plotlist = plist)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-14-1.png){width=624}\n:::\n:::\n\n\n### {{< meta st_analysis_dimred >}}\n\n\n{{< meta st_analysis_dimred_1 >}}\n\n\n\nBut make sure you run it on the `SCT` assay.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar.out <- modelGeneVar(sce, method=\"loess\")\nhvgs = getTopHVGs(var.out, n=2000)\nsce <- runPCA(sce, exprs_values = \"logcounts\",\n              subset_row=hvgs,\n              ncomponents = 50,\n              ntop = 100,\n              scale = T)\ng <- buildSNNGraph(sce,k=5,use.dimred=\"PCA\")\nsce$louvain_SNNk5 <- factor( igraph::cluster_louvain(g)$membership )\nsce <- runUMAP(sce,dimred = \"PCA\", n_dimred = 50,   ncomponents = 2,min_dist=0.1,spread=.3,\n               metric=\"correlation\",name = \"UMAP_on_PCA\")\n```\n:::\n\n{{< meta st_analysis_dimred_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- c(\"Anterior\", \"Posterior\")\nto_plot <- c(\"louvain_SNNk5\")\n\nplist <- list()\nn=1\nfor(j in to_plot){\n  for(i in samples){\n    temp <- sce[,sce$Sample == i]\n    temp@metadata <- temp@metadata[[i]]\n    plist[[n]]<-spanielPlot(object = temp,\n        plotType = \"Cluster\",clusterRes = j,\n        customTitle = j,\n        techType = \"Visium\",\n        ptSizeMax = 1,ptSizeMin = .1)\n    n<-n+1\n  }\n}\n\nplist[[3]] <- plotReducedDim(sce, dimred = \"UMAP_on_PCA\", colour_by = \"louvain_SNNk5\")\nplist[[4]] <- plotReducedDim(sce, dimred = \"UMAP_on_PCA\", colour_by = \"Sample\")\n\nplot_grid(ncol=2, plotlist = plist)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-16-1.png){width=864}\n:::\n:::\n\n\n### {{< meta st_analysis_int >}}\n\n\n{{< meta st_analysis_int_1 >}}\n\n\n\nWe will do a similar integration as in the Data Integration lab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnn_out <- batchelor::fastMNN(sce, subset.row = hvgs, batch = factor(sce$Sample), k = 20, d = 50)\n\nreducedDim(sce, \"MNN\") <- reducedDim(mnn_out,\"corrected\")\nrm(mnn_out)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            used   (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  10342057  552.4   17901068  956.1  17901068  956.1\nVcells 191815290 1463.5  374059739 2853.9 374058589 2853.9\n```\n:::\n:::\n\n{{< meta st_analysis_int_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- buildSNNGraph(sce,k=5,use.dimred=\"MNN\")\nsce$louvain_SNNk5 <- factor( igraph::cluster_louvain(g)$membership )\nsce <- runUMAP(sce,dimred = \"MNN\", n_dimred = 50,   ncomponents = 2,min_dist=0.1,spread=.3,\n               metric=\"correlation\",name = \"UMAP_on_MNN\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- c(\"Anterior\", \"Posterior\")\nto_plot <- c(\"louvain_SNNk5\")\n\nplist <- list()\nn=1\nfor(j in to_plot){\n  for(i in samples){\n    temp <- sce[,sce$Sample == i]\n    temp@metadata <- temp@metadata[[i]]\n    plist[[n]]<-spanielPlot(object = temp,\n        plotType = \"Cluster\",clusterRes = j,\n        customTitle = j,\n        techType = \"Visium\",\n        ptSizeMax = 1,ptSizeMin = .1)\n    n<-n+1\n  }\n}\n\nplist[[3]] <- plotReducedDim(sce, dimred = \"UMAP_on_MNN\", colour_by = \"louvain_SNNk5\")\nplist[[4]] <- plotReducedDim(sce, dimred = \"UMAP_on_MNN\", colour_by = \"Sample\")\n\nplot_grid(ncol=2, plotlist = plist)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-19-1.png){width=864}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta st_analysis_int_3 >}}\n\n\n:::\n\n### {{< meta st_analysis_svg >}}\n\n\n{{< meta st_analysis_svg_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# differential expression between cluster 4 and cluster 6\ncell_selection <- sce[ , sce$louvain_SNNk5 %in% c(4,6) ]\ncell_selection$louvain_SNNk5 <- factor(cell_selection$louvain_SNNk5)\n\nmarkers_genes <- scran::findMarkers( x = cell_selection,\n                              groups = cell_selection$louvain_SNNk5,\n                              lfc=.25,\n                              pval.type = \"all\",\n                              direction = \"up\")\n\n#List of dataFrames with the results for each cluster\ntop5_cell_selection <- lapply( names(markers_genes), function(x) { temp <- markers_genes[[x]][1:5, 1:2] ; temp$gene <- rownames(markers_genes[[x]])[1:5] ; temp$cluster <- x ; return(temp) } )\ntop5_cell_selection <- as_tibble(do.call(rbind, top5_cell_selection))\ntop5_cell_selection\n\n# plot top markers\nsamples <- c(\"Anterior\", \"Posterior\")\nto_plot <- top5_cell_selection$gene[1:5]\n\nplist <- list()\nn=1\nfor(j in to_plot){\n  for(i in samples){\n    temp <- sce[,sce$Sample == i]\n    temp@metadata <- temp@metadata[[i]]\n    plist[[n]]<-spanielPlot(object = temp,\n        plotType = \"Gene\",\n        gene=j,\n        customTitle = j,\n        techType = \"Visium\",\n        ptSizeMax = 1,ptSizeMin = .1)\n    n<-n+1\n  }\n}\nplot_grid(ncol=2, plotlist = plist)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| p.value| FDR|gene   |cluster |\n|-------:|---:|:------|:-------|\n|       0|   0|Gng4   |4       |\n|       0|   0|Gpsm1  |4       |\n|       0|   0|Pcbp3  |4       |\n|       0|   0|Synpr  |4       |\n|       0|   0|Meis2  |4       |\n|       0|   0|Ptgds  |6       |\n|       0|   0|Atp1a2 |6       |\n|       0|   0|Id3    |6       |\n|       0|   0|Igf2   |6       |\n|       0|   0|Apoe   |6       |\n\n</div>\n:::\n:::\n\n\n## {{< meta st_ss >}}\n\n\n{{< meta st_ss_1 >}}\n\n\n\nFirst dowload the seurat data from: https://www.dropbox.com/s/cuowvm4vrf65pvq/allen_cortex.rds?dl=1 to folder `data/spatial/` with command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwebpath <- \"https://www.dropbox.com/s/cuowvm4vrf65pvq/allen_cortex.rds?dl=1\"\npath <- \"data/spatial/allen_cortex.rds\"\nif(!file.exists(path)){  \n  dir.create(\"data/spatial/\",recursive = T)\n  options(timeout=10000)\n  download.file( url = webpath , destfile = path)\n  options(timeout=60)\n}\n```\n:::\n\n{{< meta st_ss_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallen_reference <- readRDS(\"data/spatial/allen_cortex.rds\")\nallen_reference_sce <- Seurat::as.SingleCellExperiment(allen_reference)\n\n# check number of cells per subclass\nallen_reference_sce$subclass <- sub(\"/\",\"_\",sub(\" \",\"_\",allen_reference_sce$subclass))\ntable(allen_reference_sce$subclass)\n\n# select 20 cells per subclass, fist set subclass ass active.ident\nsubset_cells <- lapply(unique(allen_reference_sce$subclass),function(x){\n  if( sum(allen_reference_sce$subclass == x) > 20 ){\n    temp <- sample(colnames(allen_reference_sce)[allen_reference_sce$subclass == x],size = 20)\n  } else {\n    temp <- colnames(allen_reference_sce)[allen_reference_sce$subclass == x]\n  } })\nallen_reference_sce <- allen_reference_sce[,unlist(subset_cells)]\n\n# check again number of cells per subclass\ntable(allen_reference_sce$subclass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n     Astro         CR       Endo    L2_3_IT         L4      L5_IT      L5_PT \n       368          7         94        982       1401        880        544 \n     L6_CT      L6_IT        L6b      Lamp5 Macrophage      Meis2         NP \n       960       1872        358       1122         51         45        362 \n     Oligo       Peri      Pvalb   Serpinf1        SMC       Sncg        Sst \n        91         32       1337         27         55        125       1741 \n       Vip       VLMC \n      1728         67 \n\n     Astro         CR       Endo    L2_3_IT         L4      L5_IT      L5_PT \n        20          7         20         20         20         20         20 \n     L6_CT      L6_IT        L6b      Lamp5 Macrophage      Meis2         NP \n        20         20         20         20         20         20         20 \n     Oligo       Peri      Pvalb   Serpinf1        SMC       Sncg        Sst \n        20         20         20         20         20         20         20 \n       Vip       VLMC \n        20         20 \n```\n:::\n:::\n\n\nThen run normalization and dimensionality reduction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallen_reference_sce <- computeSumFactors(allen_reference_sce, sizes=c(20, 40, 60, 80))\nallen_reference_sce <- logNormCounts(allen_reference_sce)\nallen.var.out <- modelGeneVar(allen_reference_sce, method=\"loess\")\nallen.hvgs = getTopHVGs(allen.var.out, n=2000)\n```\n:::\n\n\n## {{< meta st_sub >}}\n\n\n{{< meta st_sub_1 >}}\n\n\n\n### Integrate with scRNAseq\n\nHere, will use SingleR for prediciting which cell types are present in the dataset. We can first select the anterior part as an example (to speed up predictions).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce.anterior <- sce[,sce$Sample == \"Anterior\"]\nsce.anterior@metadata <- sce.anterior@metadata[[\"Anterior\"]]\n```\n:::\n\n\nNext, we select the highly variable genes that are present in both datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Find common highly variable genes\ncommon_hvgs <- allen.hvgs[allen.hvgs %in% hvgs]\n\n#Predict cell classes\npred.grun <- SingleR(test=sce.anterior[common_hvgs,],\n                     ref=allen_reference_sce[common_hvgs,],\n                     labels=allen_reference_sce$subclass)\n\n#Transfer the classes to the SCE object\nsce.anterior$cell_prediction <- pred.grun$labels\nsce.anterior@colData <- cbind(sce.anterior@colData,\n                              as.data.frame.matrix(table(list(1:ncol(sce.anterior),sce.anterior$cell_prediction))))\n```\n:::\n\n\nThen we can plot the predicted cell populations back to tissue.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Plot cell predictions\nspanielPlot(object = sce.anterior,\n        plotType = \"Cluster\",\n        clusterRes = \"cell_prediction\",\n        customTitle = \"cell_prediction\",\n        techType = \"Visium\",\n        ptSizeMax = 1,ptSizeMin = .1)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-25-1.png){width=528}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplist <- list()\nn=1\nfor(i in c(\"L2_3_IT\",\"L4\",\"L5_IT\",\"L6_IT\")){\n  plist[[n]] <- spanielPlot(object = sce.anterior,\n        plotType = \"Cluster\",\n        clusterRes = i,\n        customTitle = i,\n        techType = \"Visium\",ptSize = .3,\n        ptSizeMax = 1,ptSizeMin = .1)\n  n <- n+1\n}\nplot_grid(ncol=2, plotlist = plist)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-26-1.png){width=864}\n:::\n:::\n\n\nKeep in mind, that the scores are \"just\" prediction scores, and do not correspond to proportion of cells that are of a certain celltype or similar. It mainly tell you that gene expression in a certain spot is hihgly similar/dissimilar to gene expression of a celltype. If we look at the scores, we see that some spots got really clear predictions by celltype, while others did not have high scores for any of the celltypes.\n\nWe can also plot the gene expression and add filters together, too:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspanielPlot(object = sce.anterior,\n        plotType = \"Gene\",\n        gene=\"Wfs1\",\n        showFilter = sce.anterior$L4 ,\n        customTitle = \"\",\n        techType = \"Visium\",\n        ptSize=0,ptSizeMin = -.3,ptSizeMax = 1)\n```\n\n::: {.cell-output-display}\n![](bioc_07_spatial_files/figure-html/unnamed-chunk-27-1.png){width=624}\n:::\n:::\n\n\n## {{< meta session >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] cowplot_1.1.1               patchwork_1.1.2            \n [3] scater_1.26.1               ggplot2_3.4.2              \n [5] SingleR_2.0.0               scran_1.26.2               \n [7] scuttle_1.8.4               dplyr_1.1.1                \n [9] Matrix_1.6-0                SingleCellExperiment_1.20.1\n[11] SummarizedExperiment_1.28.0 Biobase_2.58.0             \n[13] GenomicRanges_1.50.2        GenomeInfoDb_1.34.9        \n[15] IRanges_2.32.0              S4Vectors_0.36.2           \n[17] BiocGenerics_0.44.0         MatrixGenerics_1.10.0      \n[19] matrixStats_1.0.0           biomaRt_2.54.1             \n[21] Spaniel_1.12.0             \n\nloaded via a namespace (and not attached):\n  [1] utf8_1.2.3                R.utils_2.12.2           \n  [3] spatstat.explore_3.2-1    reticulate_1.30          \n  [5] tidyselect_1.2.0          RSQLite_2.3.1            \n  [7] AnnotationDbi_1.60.2      htmlwidgets_1.6.2        \n  [9] grid_4.2.3                BiocParallel_1.32.6      \n [11] Rtsne_0.16                DropletUtils_1.18.1      \n [13] munsell_0.5.0             ScaledMatrix_1.6.0       \n [15] codetools_0.2-19          ica_1.0-3                \n [17] statmod_1.5.0             future_1.33.0            \n [19] miniUI_0.1.1.1            batchelor_1.14.1         \n [21] withr_2.5.0               spatstat.random_3.1-5    \n [23] colorspace_2.1-0          progressr_0.13.0         \n [25] filelock_1.0.2            knitr_1.43               \n [27] rstudioapi_0.14           Seurat_4.3.0.1           \n [29] ROCR_1.0-11               tensor_1.5               \n [31] listenv_0.9.0             labeling_0.4.2           \n [33] GenomeInfoDbData_1.2.9    polyclip_1.10-4          \n [35] farver_2.1.1              bit64_4.0.5              \n [37] rhdf5_2.42.1              parallelly_1.36.0        \n [39] vctrs_0.6.3               generics_0.1.3           \n [41] xfun_0.39                 BiocFileCache_2.6.1      \n [43] R6_2.5.1                  ggbeeswarm_0.7.2         \n [45] rsvd_1.0.5                locfit_1.5-9.8           \n [47] rhdf5filters_1.10.1       bitops_1.0-7             \n [49] spatstat.utils_3.0-3      cachem_1.0.8             \n [51] DelayedArray_0.24.0       promises_1.2.0.1         \n [53] scales_1.2.1              beeswarm_0.4.0           \n [55] gtable_0.3.3              beachmat_2.14.2          \n [57] globals_0.16.2            goftest_1.2-3            \n [59] rlang_1.1.1               splines_4.2.3            \n [61] lazyeval_0.2.2            spatstat.geom_3.2-1      \n [63] yaml_2.3.7                reshape2_1.4.4           \n [65] abind_1.4-5               httpuv_1.6.11            \n [67] tools_4.2.3               ellipsis_0.3.2           \n [69] RColorBrewer_1.1-3        ggridges_0.5.4           \n [71] Rcpp_1.0.10               plyr_1.8.8               \n [73] sparseMatrixStats_1.10.0  progress_1.2.2           \n [75] zlibbioc_1.44.0           purrr_1.0.1              \n [77] RCurl_1.98-1.12           prettyunits_1.1.1        \n [79] deldir_1.0-9              viridis_0.6.3            \n [81] pbapply_1.7-2             zoo_1.8-12               \n [83] SeuratObject_4.1.3        ggrepel_0.9.3            \n [85] cluster_2.1.4             magrittr_2.0.3           \n [87] data.table_1.14.8         scattermore_1.2          \n [89] ResidualMatrix_1.8.0      lmtest_0.9-40            \n [91] RANN_2.6.1                fitdistrplus_1.1-11      \n [93] hms_1.1.3                 mime_0.12                \n [95] evaluate_0.21             xtable_1.8-4             \n [97] XML_3.99-0.14             gridExtra_2.3            \n [99] compiler_4.2.3            tibble_3.2.1             \n[101] KernSmooth_2.23-20        crayon_1.5.2             \n[103] R.oo_1.25.0               htmltools_0.5.5          \n[105] later_1.3.1               tidyr_1.3.0              \n[107] DBI_1.1.3                 dbplyr_2.3.2             \n[109] MASS_7.3-58.2             rappdirs_0.3.3           \n[111] cli_3.6.1                 R.methodsS3_1.8.2        \n[113] parallel_4.2.3            metapod_1.6.0            \n[115] igraph_1.5.0              pkgconfig_2.0.3          \n[117] sp_2.0-0                  plotly_4.10.2            \n[119] spatstat.sparse_3.0-2     xml2_1.3.4               \n[121] vipor_0.4.5               dqrng_0.3.0              \n[123] XVector_0.38.0            stringr_1.5.0            \n[125] digest_0.6.33             sctransform_0.3.5        \n[127] RcppAnnoy_0.0.21          spatstat.data_3.0-1      \n[129] Biostrings_2.66.0         rmarkdown_2.21           \n[131] leiden_0.4.3              uwot_0.1.16              \n[133] edgeR_3.40.2              DelayedMatrixStats_1.20.0\n[135] curl_5.0.1                shiny_1.7.4              \n[137] lifecycle_1.0.3           nlme_3.1-162             \n[139] jsonlite_1.8.7            Rhdf5lib_1.20.0          \n[141] BiocNeighbors_1.16.0      viridisLite_0.4.2        \n[143] limma_3.54.2              fansi_1.0.4              \n[145] pillar_1.9.0              lattice_0.20-45          \n[147] KEGGREST_1.38.0           fastmap_1.1.1            \n[149] httr_1.4.6                survival_3.5-3           \n[151] glue_1.6.2                png_0.1-8                \n[153] bluster_1.8.0             bit_4.0.5                \n[155] HDF5Array_1.26.0          stringi_1.7.12           \n[157] blob_1.2.4                BiocSingular_1.14.0      \n[159] memoise_2.0.1             irlba_2.3.5.1            \n[161] future.apply_1.11.0      \n```\n:::\n:::\n",
    "supporting": [
      "bioc_07_spatial_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}