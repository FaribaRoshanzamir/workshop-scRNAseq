{
  "hash": "d97502ca7a06eb3e8dfbf1e75889f330",
  "result": {
    "markdown": "---\ntitle: \"{{< meta qc_title >}}\"\nsubtitle: \"{{< meta subtitle_bioc >}}\"\ndescription: \"{{< meta qc_description >}}\"\nformat: html\n---\n\n\n::: {.callout-note}\nCode chunks run R commands unless otherwise specified.\n:::\n\n## {{< meta qc_data >}}\n\n\n{{< meta qc_data_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwebpath <- \"https://raw.githubusercontent.com/NBISweden/workshop-scRNAseq/new_dataset/labs/data/covid_data_GSE149689/sub/\"\n\nif(!dir.exists(\"./data/raw\")){\n  dir.create(\"./data/raw\", recursive = T)\n  file_list <- c(\n    \"Normal_PBMC_13.h5\", \"Normal_PBMC_14.h5\", \"Normal_PBMC_5.h5\",\n    \"nCoV_PBMC_15.h5\", \"nCoV_PBMC_17.h5\", \"nCoV_PBMC_1.h5\"\n  )\n  for (i in file_list) {\n    download.file(\n      url = paste0(webpath, i),\n      destfile = paste0(\"./data/raw/\", i)\n    )\n  }\n}\n```\n:::\n\n{{< meta qc_data_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(require(scater))\nsuppressMessages(require(scran))\nsuppressMessages(require(cowplot))\nsuppressMessages(require(org.Hs.eg.db))\n\nif(!require(DoubletFinder)){\n   remotes::install_github('chris-mcginnis-ucsf/DoubletFinder',upgrade = F, dependencies=F)\n}\nsuppressMessages(require(DoubletFinder))\n```\n:::\n\n{{< meta qc_data_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov.15 <- Seurat::Read10X_h5(\n  filename = \"data/raw/nCoV_PBMC_15.h5\",\n  use.names = T)\ncov.1 <- Seurat::Read10X_h5(\n  filename = \"data/raw/nCoV_PBMC_1.h5\",\n  use.names = T)\ncov.17 <- Seurat::Read10X_h5(\n  filename = \"data/raw/nCoV_PBMC_17.h5\",\n  use.names = T)\n\nctrl.5 <- Seurat::Read10X_h5(\n  filename = \"data/raw/Normal_PBMC_5.h5\",\n  use.names = T)\nctrl.13 <- Seurat::Read10X_h5(\n  filename = \"data/raw/Normal_PBMC_13.h5\",\n  use.names = T)\nctrl.14 <- Seurat::Read10X_h5(\n  filename = \"data/raw/Normal_PBMC_14.h5\",\n  use.names = T)\n```\n:::\n\n\n## {{< meta qc_collate >}}\n\n\n{{< meta qc_collate_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- SingleCellExperiment( assays = list(counts = cbind(cov.1,cov.15, cov.17, ctrl.5, ctrl.13, ctrl.14)) )\ndim(sce)\n#Adding metadata\nsce@colData$sample <- unlist(sapply(c(\"cov.1\",\"cov.15\",\"cov.17\", \"ctrl.5\",\"ctrl.13\",\"ctrl.14\"),function(x) rep(x,ncol(get(x)))))\nsce@colData$type <- ifelse(grepl(\"cov\",sce@colData$sample), \"Covid\",\"Control\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33538  9000\n```\n:::\n:::\n\n{{< meta qc_collate_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove all objects that will not be used.\nrm(cov.15, cov.1, cov.17, ctrl.5, ctrl.13, ctrl.14)\n# run garbage collect to free up memory\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  9211279 492.0   17752695 948.1 11473927 612.8\nVcells 35428780 270.4   97806024 746.3 73067183 557.5\n```\n:::\n:::\n\n{{< meta qc_collate_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(counts(sce)[,1:10])\nhead(sce@colData,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6 x 10 sparse Matrix of class \"dgCMatrix\"\n                               \nMIR1302-2HG . . . . . . . . . .\nFAM138A     . . . . . . . . . .\nOR4F5       . . . . . . . . . .\nAL627309.1  . . . . . . . . . .\nAL627309.3  . . . . . . . . . .\nAL627309.2  . . . . . . . . . .\nDataFrame with 10 rows and 2 columns\n                        sample        type\n                   <character> <character>\nAGGGTCCCATGACCCG-1       cov.1       Covid\nTACCCACAGCGGGTTA-1       cov.1       Covid\nCCCAACTTCATATGGC-1       cov.1       Covid\nTCAAGTGTCCGAACGC-1       cov.1       Covid\nATTCCTAGTGACTGTT-1       cov.1       Covid\nGTGTTCCGTGGGCTCT-1       cov.1       Covid\nCCTAAGACAGATTAAG-1       cov.1       Covid\nAATAGAGAGGGTTAGC-1       cov.1       Covid\nGGGTCACTCACCTACC-1       cov.1       Covid\nTCCTCTTGTACAGTCT-1       cov.1       Covid\n```\n:::\n:::\n\n\n## {{< meta qc_calqc >}}\n\n\n{{< meta qc_calqc_1 >}}\n\n\n{{< meta qc_calqc_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mitochondrial genes\nmito_genes <- rownames(sce)[grep(\"^MT-\",rownames(sce))]\n# Ribosomal genes\nribo_genes <- rownames(sce)[grep(\"^RP[SL]\",rownames(sce))]\n# Hemoglobin genes - includes all genes starting with HB except HBP.\nhb_genes <- rownames(sce)[grep(\"^HB[^(P)]\",rownames(sce))]\n```\n:::\n\n\nFirst, let Scran calculate some general qc-stats for genes and cells with the function `perCellQCMetrics`. It can also calculate proportion of counts for specific gene subsets, so first we need to define which genes are mitochondrial, ribosomal and hemoglobin.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- addPerCellQC(sce, flatten = T, subsets = list(mt=mito_genes, hb=hb_genes, ribo=ribo_genes))\n\n# Way2: Doing it manually\nsce@colData$percent_mito <- Matrix::colSums(counts(sce)[mito_genes, ]) / sce@colData$total\n```\n:::\n\n{{< meta qc_calqc_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(colData(sce))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 6 rows and 15 columns\n                        sample        type       sum  detected subsets_mt_sum\n                   <character> <character> <numeric> <integer>      <numeric>\nAGGGTCCCATGACCCG-1       cov.1       Covid      7698      2140            525\nTACCCACAGCGGGTTA-1       cov.1       Covid     13416      3391            952\nCCCAACTTCATATGGC-1       cov.1       Covid     16498      3654           1253\nTCAAGTGTCCGAACGC-1       cov.1       Covid      1425       608            141\nATTCCTAGTGACTGTT-1       cov.1       Covid      7535      1808            470\nGTGTTCCGTGGGCTCT-1       cov.1       Covid      4378      1345            352\n                   subsets_mt_detected subsets_mt_percent subsets_hb_sum\n                             <integer>          <numeric>      <numeric>\nAGGGTCCCATGACCCG-1                  11            6.81995              2\nTACCCACAGCGGGTTA-1                  11            7.09600              6\nCCCAACTTCATATGGC-1                  12            7.59486              1\nTCAAGTGTCCGAACGC-1                  10            9.89474              1\nATTCCTAGTGACTGTT-1                  11            6.23756              4\nGTGTTCCGTGGGCTCT-1                  10            8.04020              1\n                   subsets_hb_detected subsets_hb_percent subsets_ribo_sum\n                             <integer>          <numeric>        <numeric>\nAGGGTCCCATGACCCG-1                   1         0.02598077             2564\nTACCCACAGCGGGTTA-1                   2         0.04472272             2264\nCCCAACTTCATATGGC-1                   1         0.00606134             2723\nTCAAGTGTCCGAACGC-1                   1         0.07017544              444\nATTCCTAGTGACTGTT-1                   3         0.05308560             3397\nGTGTTCCGTGGGCTCT-1                   1         0.02284148             1588\n                   subsets_ribo_detected subsets_ribo_percent     total\n                               <integer>            <numeric> <numeric>\nAGGGTCCCATGACCCG-1                    82              33.3074      7698\nTACCCACAGCGGGTTA-1                    85              16.8754     13416\nCCCAACTTCATATGGC-1                    87              16.5050     16498\nTCAAGTGTCCGAACGC-1                    68              31.1579      1425\nATTCCTAGTGACTGTT-1                    81              45.0829      7535\nGTGTTCCGTGGGCTCT-1                    79              36.2723      4378\n                   percent_mito\n                      <numeric>\nAGGGTCCCATGACCCG-1    0.0681995\nTACCCACAGCGGGTTA-1    0.0709600\nCCCAACTTCATATGGC-1    0.0759486\nTCAAGTGTCCGAACGC-1    0.0989474\nATTCCTAGTGACTGTT-1    0.0623756\nGTGTTCCGTGGGCTCT-1    0.0804020\n```\n:::\n:::\n\n\n## {{< meta qc_plotqc >}}\n\n\n{{< meta qc_plotqc_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# total is total UMIs per cell\n# detected is number of detected genes.\n# the different gene subset percentages are listed as subsets_mt_percent etc.\n\nplot_grid(plotColData(sce,y = \"detected\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce,y = \"total\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce,y = \"subsets_mt_percent\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce,y = \"subsets_ribo_percent\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce,y = \"subsets_hb_percent\",x = \"sample\",colour_by = \"sample\"),ncol = 3)\n```\n\n::: {.cell-output-display}\n![](bioc_01_qc_files/figure-html/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n{{< meta qc_plotqc_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotColData(sce,x = \"total\", y = \"detected\",colour_by = \"sample\")\n```\n\n::: {.cell-output-display}\n![](bioc_01_qc_files/figure-html/unnamed-chunk-11-1.png){width=576}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta qc_plotqc_3 >}}\n\n\n:::\n\n## {{< meta qc_filter >}}\n\n### {{< meta qc_filter_detect >}}\n\n\n{{< meta qc_filter_detect_1 >}}\n\n\n\nIn Scran, we can use the function `quickPerCellQC` to filter out outliers from distributions of qc stats, such as detected genes, gene subsets etc. But in this case, we will take one setting at a time and run through the steps of filtering cells.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(sce)\n\nselected_c <-  colnames(sce)[sce$detected > 200]\nselected_f <- rownames(sce)[ Matrix::rowSums(counts(sce)) > 3]\n\nsce.filt <- sce[selected_f , selected_c]\ndim(sce.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33538  9000\n[1] 18147  7973\n```\n:::\n:::\n\n{{< meta qc_filter_detect_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# skip for now and run doublet detection instead...\n\n#high.det.v3 <- sce.filt$nFeatures > 4100\n#high.det.v2 <- (sce.filt$nFeatures > 2000) & (sce.filt$sample_id == \"v2.1k\")\n\n# remove these cells\n#sce.filt <- sce.filt[ , (!high.det.v3) & (!high.det.v2)]\n\n# check number of cells\n#ncol(sce.filt)\n```\n:::\n\n{{< meta qc_filter_detect_4 >}}\n\n\n\nIn Scater, you can also use the function `plotHighestExprs()` to plot the gene contribution, but the function is quite slow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Compute the relative expression of each gene per cell\n#Use sparse matrix operations, if your dataset is large, doing matrix devisions the regular way will take a very long time.\nC = counts(sce)\nC@x = C@x / rep.int(colSums(C), diff(C@p))\nmost_expressed <- order(Matrix::rowSums( C ),decreasing = T)[20:1]\nboxplot( as.matrix(t(C[most_expressed,])),cex=.1, las=1, xlab=\"% total count per cell\",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)\n```\n\n::: {.cell-output-display}\n![](bioc_01_qc_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nrm(C)\n\n# also, there is the option of running the function \"plotHighestExprs\" in the scater package, however, this function takes very long to execute.\n```\n:::\n\n{{< meta qc_filter_detect_5 >}}\n\n\n\n### {{< meta qc_filter_mr >}}\n\n\n{{< meta qc_filter_mr_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_mito <- sce.filt$subsets_mt_percent < 30\nselected_ribo <- sce.filt$subsets_ribo_percent > 5\n\n# and subset the object to only keep those cells\nsce.filt <- sce.filt[, selected_mito & selected_ribo ]\ndim(sce.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18147  5896\n```\n:::\n:::\n\n{{< meta qc_filter_mr_2 >}}\n\n\n\n### {{< meta qc_filter_plot >}}\n\n\n{{< meta qc_filter_plot_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(plotColData(sce,y = \"detected\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce,y = \"total\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce,y = \"subsets_mt_percent\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce,y = \"subsets_ribo_percent\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce,y = \"subsets_hb_percent\",x = \"sample\",colour_by = \"sample\"),ncol = 3)\n```\n\n::: {.cell-output-display}\n![](bioc_01_qc_files/figure-html/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n### {{< meta qc_filter_genes >}}\n\n\n{{< meta qc_filter_genes_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(sce.filt)\n\n# Filter MALAT1\nsce.filt <- sce.filt[ ! grepl(\"MALAT1\", rownames(sce.filt)), ]\n\n# Filter Mitocondrial\nsce.filt <- sce.filt[ ! grepl(\"^MT-\", rownames(sce.filt)), ]\n\n# Filter Ribossomal gene (optional if that is a problem on your data)\n# sce.filt <- sce.filt[ ! grepl(\"^RP[SL]\", rownames(sce.filt)), ]\n\n# Filter Hemoglobin gene\nsce.filt <- sce.filt[ ! grepl(\"^HB[^(P)]\", rownames(sce.filt)), ]\n\ndim(sce.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18147  5896\n[1] 18121  5896\n```\n:::\n:::\n\n\n\n## {{< meta qc_sex >}}\n\n\n{{< meta qc_sex_1 >}}\n\n\n{{< meta qc_sex_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenes.file = \"data/results/genes.table.csv\"\n\nif (!file.exists(genes.file)){\n  suppressMessages(require(biomaRt))\n\n  # initialize connection to mart, may take some time if the sites are unresponsive.\n  mart <- useMart(\"ENSEMBL_MART_ENSEMBL\", dataset=\"hsapiens_gene_ensembl\")\n\n  # fetch chromosome info plus some other annotations\n  genes.table <- try(biomaRt::getBM(attributes = c(\"ensembl_gene_id\",\n              \"external_gene_name\", \"description\",\"gene_biotype\", \"chromosome_name\",\"start_position\"),\n              mart = mart, useCache = F))\n\n  if(!dir.exists(\"data/results\")){dir.create(\"data/results\")}\n  if(is.data.frame(genes.table)){write.csv(genes.table, file = genes.file)}\n\n  if (!file.exists(genes.file)){\n  download.file(\"https://raw.githubusercontent.com/NBISweden/workshop-scRNAseq/master/labs/misc/genes.table.csv\",destfile = \"data/results/genes.table.csv\")\n    genes.table = read.csv(genes.file)\n    }\n}else{\n  genes.table = read.csv(genes.file)\n}\n\ngenes.table <- genes.table[genes.table$external_gene_name %in% rownames(sce.filt),]\n```\n:::\n\n{{< meta qc_sex_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchrY.gene = genes.table$external_gene_name[genes.table$chromosome_name == \"Y\"]\nsce.filt@colData$pct_chrY  = Matrix::colSums(counts(sce.filt)[chrY.gene,]) / colSums(counts(sce.filt))\n```\n:::\n\n{{< meta qc_sex_4 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# as plotColData cannot take an expression vs metadata, we need to add in XIST expression to colData\nsce.filt@colData$XIST = counts(sce.filt)[\"XIST\",] /  colSums(counts(sce.filt)) * 10000\nplotColData(sce.filt,  \"XIST\",  \"pct_chrY\")\n```\n\n::: {.cell-output-display}\n![](bioc_01_qc_files/figure-html/unnamed-chunk-20-1.png){width=480}\n:::\n:::\n\n{{< meta qc_sex_5 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(plotColData(sce.filt, y = \"XIST\", x = \"sample\", colour_by = \"sample\"),\n          plotColData(sce.filt, y = \"pct_chrY\", x = \"sample\", colour_by = \"sample\"),  ncol = 2)\n```\n\n::: {.cell-output-display}\n![](bioc_01_qc_files/figure-html/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n{{< meta qc_sex_6 >}}\n\n\n\n## {{< meta qc_cellcycle >}}\n\n\n{{< meta qc_cellcycle_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhs.pairs <- readRDS(system.file(\"exdata\", \"human_cycle_markers.rds\", package=\"scran\"))\nanno <- select(org.Hs.eg.db, keys=rownames(sce.filt), keytype=\"SYMBOL\", column=\"ENSEMBL\")\nensembl <- anno$ENSEMBL[match(rownames(sce.filt), anno$SYMBOL)]\n\n#Use only genes related to biological process cell cycle to speed up\n#https://www.ebi.ac.uk/QuickGO/term/GO:0007049 = cell cycle (BP,Biological Process)\nGOs <- na.omit(select(org.Hs.eg.db, keys=na.omit(ensembl), keytype=\"ENSEMBL\", column=\"GO\"))\nGOs <- GOs[GOs$GO == \"GO:0007049\",\"ENSEMBL\"]\nhs.pairs <- lapply(hs.pairs,function(x){ x[rowSums( apply(x, 2, function(i) i %in% GOs)) >= 1,]})\nstr(hs.pairs)\ncc.ensembl <- ensembl[ensembl %in% GOs] #This is the fastest (less genes), but less accurate too\n#cc.ensembl <- ensembl[ ensembl %in% unique(unlist(hs.pairs))]\n\nassignments <- cyclone(sce.filt[ensembl %in% cc.ensembl,], hs.pairs, gene.names= ensembl[ ensembl %in% cc.ensembl])\nsce.filt$G1.score <- assignments$scores$G1\nsce.filt$G2M.score <- assignments$scores$G2M\nsce.filt$S.score <- assignments$scores$S\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ G1 :'data.frame':\t6860 obs. of  2 variables:\n  ..$ first : chr [1:6860] \"ENSG00000100519\" \"ENSG00000100519\" \"ENSG00000100519\" \"ENSG00000100519\" ...\n  ..$ second: chr [1:6860] \"ENSG00000065135\" \"ENSG00000080345\" \"ENSG00000101266\" \"ENSG00000124486\" ...\n $ S  :'data.frame':\t8794 obs. of  2 variables:\n  ..$ first : chr [1:8794] \"ENSG00000255302\" \"ENSG00000119969\" \"ENSG00000179051\" \"ENSG00000127586\" ...\n  ..$ second: chr [1:8794] \"ENSG00000100519\" \"ENSG00000100519\" \"ENSG00000100519\" \"ENSG00000136856\" ...\n $ G2M:'data.frame':\t6796 obs. of  2 variables:\n  ..$ first : chr [1:6796] \"ENSG00000100519\" \"ENSG00000136856\" \"ENSG00000136856\" \"ENSG00000136856\" ...\n  ..$ second: chr [1:6796] \"ENSG00000146457\" \"ENSG00000007968\" \"ENSG00000227268\" \"ENSG00000101265\" ...\n```\n:::\n:::\n\n{{< meta qc_cellcycle_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(plotColData(sce.filt,y = \"G2M.score\",x = \"G1.score\",colour_by = \"sample\"),\n          plotColData(sce.filt,y = \"G2M.score\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce.filt,y = \"G1.score\",x = \"sample\",colour_by = \"sample\"),\n          plotColData(sce.filt,y = \"S.score\",x = \"sample\",colour_by = \"sample\"),ncol = 4)\n```\n\n::: {.cell-output-display}\n![](bioc_01_qc_files/figure-html/unnamed-chunk-23-1.png){width=1536}\n:::\n:::\n\n\nCyclone predicts most cells as G1, but also quite a lot of cells with high S-Phase scores. Compare to results with Seurat and Scanpy and see how different predictors will give clearly different results.\n\n## {{< meta qc_doublet >}}\n\n\n{{< meta qc_doublet_1 >}}\n\n\n\n:::{.callout-caution}\n\n{{< meta qc_doublet_2 >}}\n\n\n:::\n\nThere is a method to predict if a cluster consists of mainly doublets `findDoubletClusters()`, but we can also predict individual cells based on simulations using the function `computeDoubletDensity()` which we will do here. Doublet detection will be performed using PCA, so we need to first normalize the data and run variable gene detection, as well as UMAP for visualization. These steps will be explored in more detail in coming exercises.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce.filt <- logNormCounts(sce.filt)\ndec <- modelGeneVar(sce.filt, block = sce.filt$sample)\nhvgs = getTopHVGs(dec, n=2000)\n\nsce.filt <- runPCA(sce.filt, subset_row=hvgs)\n\nsce.filt <- runUMAP(sce.filt, pca = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(require(scDblFinder))\n\n# run computeDoubletDensity with 10 principal components.\nsce.filt <- scDblFinder(sce.filt, dims = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(plotUMAP(sce.filt, colour_by=\"scDblFinder.score\"),\n          plotUMAP(sce.filt, colour_by=\"scDblFinder.class\"),\n          plotUMAP(sce.filt, colour_by=\"sample\"), ncol = 3)\n```\n\n::: {.cell-output-display}\n![](bioc_01_qc_files/figure-html/unnamed-chunk-26-1.png){width=1344}\n:::\n:::\n\n{{< meta qc_doublet_4 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce.filt = sce.filt[,sce.filt$scDblFinder.score < 2]\ndim(sce.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18121  5896\n```\n:::\n:::\n\n\n## {{< meta qc_save >}}\n\n\n{{< meta qc_save_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!dir.exists(\"data/results\")) dir.create(\"data/results\", showWarnings = F)\nif (!file.exists(\"data/results/covid_qc.rds\")) saveRDS(sce.filt, \"data/results/covid_qc.rds\")\n```\n:::\n\n\n## {{< meta session >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] scDblFinder_1.12.0          DoubletFinder_2.0.3        \n [3] org.Hs.eg.db_3.16.0         AnnotationDbi_1.60.2       \n [5] cowplot_1.1.1               scran_1.26.2               \n [7] scater_1.26.1               ggplot2_3.4.2              \n [9] scuttle_1.8.4               SingleCellExperiment_1.20.1\n[11] SummarizedExperiment_1.28.0 Biobase_2.58.0             \n[13] GenomicRanges_1.50.2        GenomeInfoDb_1.34.9        \n[15] IRanges_2.32.0              S4Vectors_0.36.2           \n[17] BiocGenerics_0.44.0         MatrixGenerics_1.10.0      \n[19] matrixStats_1.0.0          \n\nloaded via a namespace (and not attached):\n  [1] utf8_1.2.3                spatstat.explore_3.2-1   \n  [3] reticulate_1.30           tidyselect_1.2.0         \n  [5] RSQLite_2.3.1             htmlwidgets_1.6.2        \n  [7] grid_4.2.3                BiocParallel_1.32.6      \n  [9] Rtsne_0.16                munsell_0.5.0            \n [11] ScaledMatrix_1.6.0        codetools_0.2-19         \n [13] ica_1.0-3                 xgboost_1.7.5.1          \n [15] statmod_1.5.0             future_1.33.0            \n [17] miniUI_0.1.1.1            withr_2.5.0              \n [19] spatstat.random_3.1-5     colorspace_2.1-0         \n [21] progressr_0.13.0          knitr_1.43               \n [23] rstudioapi_0.14           Seurat_4.3.0.1           \n [25] ROCR_1.0-11               tensor_1.5               \n [27] listenv_0.9.0             labeling_0.4.2           \n [29] GenomeInfoDbData_1.2.9    polyclip_1.10-4          \n [31] bit64_4.0.5               farver_2.1.1             \n [33] parallelly_1.36.0         vctrs_0.6.3              \n [35] generics_0.1.3            xfun_0.39                \n [37] R6_2.5.1                  ggbeeswarm_0.7.2         \n [39] rsvd_1.0.5                locfit_1.5-9.8           \n [41] hdf5r_1.3.8               bitops_1.0-7             \n [43] spatstat.utils_3.0-3      cachem_1.0.8             \n [45] DelayedArray_0.24.0       promises_1.2.0.1         \n [47] BiocIO_1.8.0              scales_1.2.1             \n [49] beeswarm_0.4.0            gtable_0.3.3             \n [51] beachmat_2.14.2           globals_0.16.2           \n [53] goftest_1.2-3             rlang_1.1.1              \n [55] splines_4.2.3             rtracklayer_1.58.0       \n [57] lazyeval_0.2.2            spatstat.geom_3.2-1      \n [59] yaml_2.3.7                reshape2_1.4.4           \n [61] abind_1.4-5               httpuv_1.6.11            \n [63] tools_4.2.3               ellipsis_0.3.2           \n [65] RColorBrewer_1.1-3        ggridges_0.5.4           \n [67] Rcpp_1.0.10               plyr_1.8.8               \n [69] sparseMatrixStats_1.10.0  zlibbioc_1.44.0          \n [71] purrr_1.0.1               RCurl_1.98-1.12          \n [73] deldir_1.0-9              pbapply_1.7-2            \n [75] viridis_0.6.3             zoo_1.8-12               \n [77] SeuratObject_4.1.3        ggrepel_0.9.3            \n [79] cluster_2.1.4             magrittr_2.0.3           \n [81] data.table_1.14.8         scattermore_1.2          \n [83] lmtest_0.9-40             RANN_2.6.1               \n [85] fitdistrplus_1.1-11       patchwork_1.1.2          \n [87] mime_0.12                 evaluate_0.21            \n [89] xtable_1.8-4              XML_3.99-0.14            \n [91] gridExtra_2.3             compiler_4.2.3           \n [93] tibble_3.2.1              KernSmooth_2.23-20       \n [95] crayon_1.5.2              htmltools_0.5.5          \n [97] later_1.3.1               tidyr_1.3.0              \n [99] DBI_1.1.3                 MASS_7.3-58.2            \n[101] Matrix_1.6-0              cli_3.6.1                \n[103] parallel_4.2.3            metapod_1.6.0            \n[105] igraph_1.5.0              pkgconfig_2.0.3          \n[107] GenomicAlignments_1.34.1  sp_2.0-0                 \n[109] plotly_4.10.2             spatstat.sparse_3.0-2    \n[111] vipor_0.4.5               dqrng_0.3.0              \n[113] XVector_0.38.0            stringr_1.5.0            \n[115] digest_0.6.33             sctransform_0.3.5        \n[117] RcppAnnoy_0.0.21          spatstat.data_3.0-1      \n[119] Biostrings_2.66.0         rmarkdown_2.21           \n[121] leiden_0.4.3              uwot_0.1.16              \n[123] edgeR_3.40.2              DelayedMatrixStats_1.20.0\n[125] restfulr_0.0.15           shiny_1.7.4              \n[127] Rsamtools_2.14.0          rjson_0.2.21             \n[129] lifecycle_1.0.3           nlme_3.1-162             \n[131] jsonlite_1.8.7            BiocNeighbors_1.16.0     \n[133] viridisLite_0.4.2         limma_3.54.2             \n[135] fansi_1.0.4               pillar_1.9.0             \n[137] lattice_0.20-45           KEGGREST_1.38.0          \n[139] fastmap_1.1.1             httr_1.4.6               \n[141] survival_3.5-3            glue_1.6.2               \n[143] png_0.1-8                 bluster_1.8.0            \n[145] bit_4.0.5                 stringi_1.7.12           \n[147] blob_1.2.4                BiocSingular_1.14.0      \n[149] memoise_2.0.1             dplyr_1.1.1              \n[151] irlba_2.3.5.1             future.apply_1.11.0      \n```\n:::\n:::\n",
    "supporting": [
      "bioc_01_qc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}