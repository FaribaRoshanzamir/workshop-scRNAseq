{
  "hash": "48ceaa7685c30a3616e01bdd70138b62",
  "result": {
    "markdown": "---\ntitle: \"{{< meta int_title >}}\"\nsubtitle: \"{{< meta subtitle_bioc >}}\"\ndescription: \"{{< meta int_description >}}\"\nformat: html\n---\n\n\n::: {.callout-note}\nCode chunks run R commands unless otherwise specified.\n:::\n\n\n{{< meta int_1 >}}\n\n\n\n|Markdown | Language | Library | Ref|\n|:---|:---|:---|:---|\n|CCA | R | Seurat | [Cell](https://www.sciencedirect.com/science/article/pii/S0092867419305598?via%3Dihub)|\n|MNN | R/Python | Scater/Scanpy | [Nat. Biotech.](https://www.nature.com/articles/nbt.4091)|\n|Conos | R | conos | [Nat. Methods](https://www.nature.com/articles/s41592-019-0466-z?error=cookies_not_supported&code=5680289b-6edb-40ad-9934-415dac4fdb2f)|\n|Scanorama | Python | scanorama | [Nat. Biotech.](https://www.nature.com/articles/s41587-019-0113-3)|\n\n## {{< meta int_prep >}}\n\n\n{{< meta int_prep_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(scater)\n  library(scran)\n  library(cowplot)\n  library(ggplot2)\n  library(rafalib)\n# library(venn)\n})\n\nsce <- readRDS(\"data/results/covid_qc_dm.rds\")\nprint(reducedDims(sce))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of length 8\nnames(8): PCA UMAP tSNE_on_PCA ... UMAP_on_ScaleData KNN UMAP_on_Graph\n```\n:::\n:::\n\n{{< meta int_prep_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce.list <- lapply( unique(sce$sample), function(x){\n  x <- sce[ , sce$sample == x ] })\n\nmypar(1,3)\nhvgs_per_dataset <- lapply( sce.list, function(x){\n  x <- computeSumFactors(x, sizes=c(20, 40, 60, 80))\n  x <- logNormCounts(x)\n  var.out <- modelGeneVar(x, method=\"loess\")\n  hvg.out <- var.out[which(var.out$FDR <= 0.05 & var.out$bio >= 0.2),]\n  hvg.out <- hvg.out[order(hvg.out$bio, decreasing=TRUE),]\n  return(rownames(hvg.out))\n})\nnames(hvgs_per_dataset) <- unique(sce$sample)\n\n# venn::venn(hvgs_per_dataset,opacity = .4,zcolor = scales::hue_pal()(3),cexsn = 1,cexil = 1,lwd=1,col=\"white\",borders = NA)\n\ntemp <- unique(unlist(hvgs_per_dataset))\noverlap <- sapply( hvgs_per_dataset, function(x) { temp %in% x } )\npheatmap::pheatmap(t(overlap*1),cluster_rows = F, color = c(\"grey90\",\"grey20\"))\n```\n\n::: {.cell-output-display}\n![](bioc_03_integration_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\n## MNN\n\nThe mutual nearest neighbors (MNN) approach within the scran package utilizes a novel approach to adjust for batch effects. The `fastMNN()` function returns a representation of the data with reduced dimensionality, which can be used in a similar fashion to other lower-dimensional representations such as PCA. In particular, this representation can be used for downstream methods such as clustering. The BNPARAM can be used to specify the specific nearest neighbors method to use from the BiocNeighbors package. Here we make use of the [Annoy library](https://github.com/spotify/annoy) via the `BiocNeighbors::AnnoyParam()` argument. We save the reduced-dimension MNN representation into the reducedDims slot of our sce object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnn_out <- batchelor::fastMNN(sce,subset.row = unique(unlist(hvgs_per_dataset)), batch = factor(sce$sample), k = 20, d = 50)\n```\n:::\n\n\n:::{.callout-caution}\n`fastMNN()` does not produce a batch-corrected expression matrix.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnn_out <- t(reducedDim(mnn_out,\"corrected\"))\ncolnames(mnn_out) <- unlist(lapply(sce.list,function(x){colnames(x)}))\nmnn_out <- mnn_out[,colnames(sce)]\nrownames(mnn_out) <- paste0(\"dim\",1:50)\nreducedDim(sce, \"MNN\") <- t(mnn_out)\n```\n:::\n\n\nWe can observe that a new assay slot is now created under the name `MNN`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreducedDims(sce)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of length 9\nnames(9): PCA UMAP tSNE_on_PCA UMAP_on_PCA ... KNN UMAP_on_Graph MNN\n```\n:::\n:::\n\n\nThus, the result from `fastMNN()` should solely be treated as a reduced dimensionality representation, suitable for direct plotting, TSNE/UMAP, clustering, and trajectory analysis that relies on such results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nsce <- runTSNE(sce, dimred = \"MNN\", n_dimred = 50, perplexity = 30,name = \"tSNE_on_MNN\")\nsce <- runUMAP(sce,dimred = \"MNN\", n_dimred = 50, ncomponents = 2,name = \"UMAP_on_MNN\")\n```\n:::\n\n{{< meta int_plot >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(ncol = 3,\n  plotReducedDim(sce,dimred = \"PCA\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"PCA\"),\n  plotReducedDim(sce,dimred = \"tSNE_on_PCA\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"tSNE_on_PCA\"),\n  plotReducedDim(sce,dimred = \"UMAP_on_PCA\",colour_by = \"sample\",point_size = 0.6)+ ggplot2::ggtitle(label =\"UMAP_on_PCA\"),\n\n  plotReducedDim(sce,dimred = \"MNN\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"MNN\"),\n  plotReducedDim(sce,dimred = \"tSNE_on_MNN\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"tSNE_on_MNN\"),\n  plotReducedDim(sce,dimred = \"UMAP_on_MNN\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"UMAP_on_MNN\")\n)\n```\n\n::: {.cell-output-display}\n![](bioc_03_integration_files/figure-html/unnamed-chunk-7-1.png){width=1344}\n:::\n:::\n\n{{< meta dimred_plotgenes_1 >}}\n\n\n\n|Markers|Cell Type|\n|:---|:---|\n|CD3E|T cells|\n|CD3E CD4|CD4+ T cells|\n|CD3E CD8A|CD8+ T cells|\n|GNLY, NKG7|NK cells|\n|MS4A1|B cells|\n|CD14, LYZ, CST3, MS4A7|CD14+ Monocytes|\n|FCGR3A, LYZ, CST3, MS4A7|FCGR3A+  Monocytes|\n|FCER1A, CST3|DCs|\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotlist <- list()\nfor(i in c(\"CD3E\",\"CD4\",\"CD8A\",\"NKG7\",\"GNLY\",\"MS4A1\",\"CD14\",\"LYZ\",\"MS4A7\",\"FCGR3A\",\"CST3\",\"FCER1A\")){\n  plotlist[[i]] <- plotReducedDim(sce,dimred = \"UMAP_on_MNN\",colour_by = i,by_exprs_values = \"logcounts\", point_size = 0.6) +\n  scale_fill_gradientn(colours = colorRampPalette(c(\"grey90\",\"orange3\",\"firebrick\",\"firebrick\",\"red\",\"red\" ))(10)) +\n  ggtitle(label = i)+ theme(plot.title = element_text(size=20)) }\nplot_grid(ncol=3, plotlist = plotlist)\n```\n\n::: {.cell-output-display}\n![](bioc_03_integration_files/figure-html/unnamed-chunk-8-1.png){width=1248}\n:::\n:::\n\n\nINTEG_R1:\n\nINTEG_R2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(harmony)\n\nreducedDimNames(sce)\n\nsce <- RunHarmony(\n  sce,\n  group.by.vars = \"sample\",\n  reduction.save = \"harmony\",\n  reduction = \"PCA\",\n  dims.use = 1:50)\n\n#Here we use all PCs computed from Harmony for UMAP calculation\nsce <- runUMAP(sce,dimred = \"harmony\", n_dimred = 50, ncomponents = 2,name = \"UMAP_on_Harmony\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"PCA\"               \"UMAP\"              \"tSNE_on_PCA\"      \n [4] \"UMAP_on_PCA\"       \"UMAP10_on_PCA\"     \"UMAP_on_ScaleData\"\n [7] \"KNN\"               \"UMAP_on_Graph\"     \"MNN\"              \n[10] \"tSNE_on_MNN\"       \"UMAP_on_MNN\"      \n```\n:::\n:::\n\n\nINTEG_R3:\n\nINTEG_R4:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhvgs <- unique(unlist(hvgs_per_dataset))\n\nscelist <- list()\ngenelist <- list()\nfor(i in 1:length(sce.list)) {\n  scelist[[i]] <- t(as.matrix(logcounts(sce.list[[i]])[hvgs,]))\n  genelist[[i]] <- hvgs\n}\n\nlapply(scelist,dim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 901 444\n\n[[2]]\n[1] 598 444\n\n[[3]]\n[1] 1052  444\n\n[[4]]\n[1] 1062  444\n\n[[5]]\n[1] 1175  444\n\n[[6]]\n[1] 1108  444\n```\n:::\n:::\n\n\nINTEG_R5:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nreticulate::use_condaenv(\"sspy\")\nscanorama <- import(\"scanorama\")\n\nintegrated.data <- scanorama$integrate(datasets_full = scelist, genes_list = genelist )\n\nintdimred <- do.call(rbind, integrated.data[[1]])\ncolnames(intdimred) <- paste0(\"PC_\", 1:100)\nrownames(intdimred) <- colnames(logcounts(sce))\n\n# Add standard deviations in order to draw Elbow Plots in Seurat\nstdevs <- apply(intdimred, MARGIN = 2, FUN = sd)\nattr(intdimred,\"varExplained\") <- stdevs\n\nreducedDim(sce,\"Scanorama_PCA\") <- intdimred\n\n#Here we use all PCs computed from Scanorama for UMAP calculation\nsce <- runUMAP(sce, dimred = \"Scanorama_PCA\", n_dimred = 50, ncomponents = 2, name = \"UMAP_on_Scanorama\")\n```\n:::\n\n\nINTEG_R6:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- plotReducedDim(sce,dimred = \"UMAP_on_PCA\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"UMAP_on_PCA\")\np2 <- plotReducedDim(sce,dimred = \"UMAP_on_MNN\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"UMAP_on_MNN\")\np3 <- plotReducedDim(sce,dimred = \"UMAP_on_Harmony\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"UMAP_on_Harmony\")\np4 <- plotReducedDim(sce,dimred = \"UMAP_on_Scanorama\",colour_by = \"sample\", point_size = 0.6)+ ggplot2::ggtitle(label =\"UMAP_on_Scanorama\")\nleg <- get_legend(p1)\n\ngridExtra::grid.arrange(\n  gridExtra::arrangeGrob(\n    p1 + Seurat::NoLegend() + Seurat::NoAxes(),\n    p2 + Seurat::NoLegend() + Seurat::NoAxes(),\n    p3 + Seurat::NoLegend() + Seurat::NoAxes(),\n    p4 + Seurat::NoLegend() + Seurat::NoAxes(), nrow=2),\n  leg, ncol=2,widths=c(8,2)\n)\n```\n\n::: {.cell-output-display}\n![](bioc_03_integration_files/figure-html/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\nINTEG_R7:\n\n\n{{< meta int_save >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(sce,\"data/results/covid_qc_dr_int.rds\")\n```\n:::\n\n\n## {{< meta session >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] reticulate_1.30             harmony_0.1.1              \n [3] Rcpp_1.0.10                 rafalib_1.0.0              \n [5] cowplot_1.1.1               scran_1.26.2               \n [7] scater_1.26.1               ggplot2_3.4.2              \n [9] scuttle_1.8.4               SingleCellExperiment_1.20.1\n[11] SummarizedExperiment_1.28.0 Biobase_2.58.0             \n[13] GenomicRanges_1.50.2        GenomeInfoDb_1.34.9        \n[15] IRanges_2.32.0              S4Vectors_0.36.2           \n[17] BiocGenerics_0.44.0         MatrixGenerics_1.10.0      \n[19] matrixStats_1.0.0          \n\nloaded via a namespace (and not attached):\n  [1] plyr_1.8.8                igraph_1.5.0             \n  [3] lazyeval_0.2.2            sp_2.0-0                 \n  [5] splines_4.2.3             BiocParallel_1.32.6      \n  [7] listenv_0.9.0             scattermore_1.2          \n  [9] digest_0.6.33             htmltools_0.5.5          \n [11] viridis_0.6.3             fansi_1.0.4              \n [13] magrittr_2.0.3            ScaledMatrix_1.6.0       \n [15] tensor_1.5                cluster_2.1.4            \n [17] ROCR_1.0-11               limma_3.54.2             \n [19] globals_0.16.2            spatstat.sparse_3.0-2    \n [21] colorspace_2.1-0          rappdirs_0.3.3           \n [23] ggrepel_0.9.3             xfun_0.39                \n [25] dplyr_1.1.1               RCurl_1.98-1.12          \n [27] jsonlite_1.8.7            spatstat.data_3.0-1      \n [29] progressr_0.13.0          survival_3.5-3           \n [31] zoo_1.8-12                glue_1.6.2               \n [33] polyclip_1.10-4           gtable_0.3.3             \n [35] zlibbioc_1.44.0           XVector_0.38.0           \n [37] leiden_0.4.3              DelayedArray_0.24.0      \n [39] BiocSingular_1.14.0       future.apply_1.11.0      \n [41] abind_1.4-5               scales_1.2.1             \n [43] pheatmap_1.0.12           edgeR_3.40.2             \n [45] spatstat.random_3.1-5     miniUI_0.1.1.1           \n [47] viridisLite_0.4.2         xtable_1.8-4             \n [49] dqrng_0.3.0               rsvd_1.0.5               \n [51] ResidualMatrix_1.8.0      metapod_1.6.0            \n [53] htmlwidgets_1.6.2         httr_1.4.6               \n [55] RColorBrewer_1.1-3        ellipsis_0.3.2           \n [57] Seurat_4.3.0.1            ica_1.0-3                \n [59] pkgconfig_2.0.3           farver_2.1.1             \n [61] deldir_1.0-9              uwot_0.1.16              \n [63] locfit_1.5-9.8            utf8_1.2.3               \n [65] here_1.0.1                reshape2_1.4.4           \n [67] tidyselect_1.2.0          labeling_0.4.2           \n [69] rlang_1.1.1               later_1.3.1              \n [71] munsell_0.5.0             tools_4.2.3              \n [73] cli_3.6.1                 generics_0.1.3           \n [75] ggridges_0.5.4            stringr_1.5.0            \n [77] batchelor_1.14.1          evaluate_0.21            \n [79] fastmap_1.1.1             goftest_1.2-3            \n [81] yaml_2.3.7                knitr_1.43               \n [83] fitdistrplus_1.1-11       purrr_1.0.1              \n [85] RANN_2.6.1                nlme_3.1-162             \n [87] pbapply_1.7-2             future_1.33.0            \n [89] sparseMatrixStats_1.10.0  mime_0.12                \n [91] compiler_4.2.3            rstudioapi_0.14          \n [93] beeswarm_0.4.0            plotly_4.10.2            \n [95] png_0.1-8                 spatstat.utils_3.0-3     \n [97] tibble_3.2.1              statmod_1.5.0            \n [99] stringi_1.7.12            lattice_0.20-45          \n[101] bluster_1.8.0             Matrix_1.6-0             \n[103] vctrs_0.6.3               pillar_1.9.0             \n[105] lifecycle_1.0.3           spatstat.geom_3.2-1      \n[107] lmtest_0.9-40             RcppAnnoy_0.0.21         \n[109] BiocNeighbors_1.16.0      data.table_1.14.8        \n[111] bitops_1.0-7              irlba_2.3.5.1            \n[113] httpuv_1.6.11             patchwork_1.1.2          \n[115] R6_2.5.1                  promises_1.2.0.1         \n[117] KernSmooth_2.23-20        gridExtra_2.3            \n[119] vipor_0.4.5               parallelly_1.36.0        \n[121] codetools_0.2-19          MASS_7.3-58.2            \n[123] rprojroot_2.0.3           withr_2.5.0              \n[125] SeuratObject_4.1.3        sctransform_0.3.5        \n[127] GenomeInfoDbData_1.2.9    parallel_4.2.3           \n[129] grid_4.2.3                beachmat_2.14.2          \n[131] tidyr_1.3.0               rmarkdown_2.21           \n[133] DelayedMatrixStats_1.20.0 Rtsne_0.16               \n[135] spatstat.explore_3.2-1    shiny_1.7.4              \n[137] ggbeeswarm_0.7.2         \n```\n:::\n:::\n",
    "supporting": [
      "bioc_03_integration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}