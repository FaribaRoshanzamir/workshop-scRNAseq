{
  "hash": "3ba714047dfe03839904d155707c3c23",
  "result": {
    "markdown": "---\ntitle: \"{{< meta clust_title >}}\"\nsubtitle: \"{{< meta subtitle_seurat >}}\"\ndescription: \"{{< meta clust_description >}}\"\nformat: html\n---\n\n\n::: {.callout-note}\nCode chunks run R commands unless otherwise specified.\n:::\n\n\n{{< meta clust_1 >}}\n\n\n{{< meta clust_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(Seurat)\n  library(cowplot)\n  library(ggplot2)\n  library(pheatmap)\n  library(rafalib)\n  library(clustree)\n})\n\nalldata <- readRDS(\"data/results/covid_qc_dr_int.rds\")\n```\n:::\n\n\n## {{< meta clust_graphclust >}}\n\n\n{{< meta clust_graphclust_1 >}}\n\n\n\n### {{< meta clust_graphclust_knn >}}\n\n\n{{< meta clust_graphclust_knn_1 >}}\n\n\n\nAs we can see above, the **Seurat** function `FindNeighbors()` already computes both the KNN and SNN graphs, in which we can control the minimal percentage of shared neighbours to be kept. See `?FindNeighbors` for additional options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check that CCA is still the active assay\nalldata@active.assay\n\nalldata <- FindNeighbors(alldata, dims = 1:30, k.param = 60, prune.SNN = 1/15)\n\n# check the names for graphs in the object.\nnames(alldata@graphs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"CCA\"\n[1] \"CCA_nn\"  \"CCA_snn\"\n```\n:::\n:::\n\n{{< meta clust_graphclust_knn_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheatmap(alldata@graphs$CCA_nn[1:200,1:200],\n         col=c(\"white\",\"black\"),border_color = \"grey90\", main = \"KNN graph\",\n         legend = F,cluster_rows = F,cluster_cols = F,fontsize = 2)\n```\n\n::: {.cell-output-display}\n![](seurat_04_clustering_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n\n```{.r .cell-code}\npheatmap(alldata@graphs$CCA_snn[1:200,1:200],\n         col=colorRampPalette(c(\"white\",\"yellow\",\"red\"))(100), \n         border_color = \"grey90\", main = \"SNN graph\",\n         legend = F,cluster_rows = F,cluster_cols = F,fontsize = 2)\n```\n\n::: {.cell-output-display}\n![](seurat_04_clustering_files/figure-html/unnamed-chunk-3-2.png){width=576}\n:::\n:::\n\n\n### {{< meta clust_graphclust_graph >}}\n\n\n{{< meta clust_graphclust_graph_1 >}}\n\n\n\nIn **Seurat**, the function `FindClusters()` will do a graph-based clustering using \"Louvain\" algorithim by default (`algorithm = 1`). To use the leiden algorithm, you need to set it to `algorithm = 4`. See `?FindClusters` for additional options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clustering with louvain (algorithm 1)\nfor (res in c( 0.1 , 0.25 , .5 , 1 , 1.5 , 2 )){\n  alldata <- FindClusters(alldata, graph.name = \"CCA_snn\", resolution = res , algorithm = 1)\n}\n\n# each time you run clustering, the data is stored in meta data columns:\n# seurat_clusters - lastest results only\n# CCA_snn_res.XX - for each different resolution you test.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(ncol = 3,\n  DimPlot(alldata, reduction = \"umap\", group.by = \"CCA_snn_res.0.5\")+ggtitle(\"louvain_0.5\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"CCA_snn_res.1\")+ggtitle(\"louvain_1\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"CCA_snn_res.2\")+ggtitle(\"louvain_2\")\n)\n```\n\n::: {.cell-output-display}\n![](seurat_04_clustering_files/figure-html/unnamed-chunk-5-1.png){width=1152}\n:::\n:::\n\n{{< meta clust_graphclust_graph_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(clustree))\nclustree(alldata@meta.data, prefix = \"CCA_snn_res.\")\n```\n\n::: {.cell-output-display}\n![](seurat_04_clustering_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n## {{< meta clust_kmean >}}\n\n\n{{< meta clust_kmean_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (k in c( 5 , 7 , 10 , 12 , 15 , 17 , 20)){\n  alldata@meta.data[,paste0(\"kmeans_\",k)] <- kmeans(x = alldata@reductions[[\"pca\"]]@cell.embeddings, centers = k,nstart = 100)$cluster\n}\n\nplot_grid(ncol = 3,\n  DimPlot(alldata, reduction = \"umap\", group.by = \"kmeans_5\")+ggtitle(\"kmeans_5\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"kmeans_10\")+ggtitle(\"kmeans_10\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"kmeans_15\")+ggtitle(\"kmeans_15\")\n)\n```\n\n::: {.cell-output-display}\n![](seurat_04_clustering_files/figure-html/unnamed-chunk-7-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclustree(alldata@meta.data, prefix = \"kmeans_\")\n```\n\n::: {.cell-output-display}\n![](seurat_04_clustering_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n\n## {{< meta clust_hier >}}\n\n### {{< meta clust_hier_dist >}}\n\n\n{{< meta clust_hier_dist_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- dist( alldata@reductions[[\"pca\"]]@cell.embeddings, method=\"euclidean\")\n```\n:::\n\n{{< meta clust_hier_dist_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Compute sample correlations\nsample_cor <- cor( Matrix::t(alldata@reductions[[\"pca\"]]@cell.embeddings) )\n\n#Transform the scale from correlations\nsample_cor <- (1 - sample_cor) / 2\n\n#Convert it to a distance object\nd2 <- as.dist(sample_cor)\n```\n:::\n\n\n### {{< meta clust_hier_clust >}}\n\n\n{{< meta clust_hier_clust_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#euclidean\nh_euclidean <- hclust(d, method=\"ward.D2\")\n\n#correlation\nh_correlation <- hclust(d2, method=\"ward.D2\")\n```\n:::\n\n{{< meta clust_hier_clust_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#euclidean distance\nalldata$hc_euclidean_5 <- cutree(h_euclidean,k = 5)\nalldata$hc_euclidean_10 <- cutree(h_euclidean,k = 10)\nalldata$hc_euclidean_15 <- cutree(h_euclidean,k = 15)\n\n#correlation distance\nalldata$hc_corelation_5 <- cutree(h_correlation,k = 5)\nalldata$hc_corelation_10 <- cutree(h_correlation,k = 10)\nalldata$hc_corelation_15 <- cutree(h_correlation,k = 15)\n\n\nplot_grid(ncol = 3,\n  DimPlot(alldata, reduction = \"umap\", group.by = \"hc_euclidean_5\")+ggtitle(\"hc_euc_5\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"hc_euclidean_10\")+ggtitle(\"hc_euc_10\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"hc_euclidean_15\")+ggtitle(\"hc_euc_15\"),\n\n  DimPlot(alldata, reduction = \"umap\", group.by = \"hc_corelation_5\")+ggtitle(\"hc_cor_5\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"hc_corelation_10\")+ggtitle(\"hc_cor_10\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"hc_corelation_15\")+ggtitle(\"hc_cor_15\")\n)\n```\n\n::: {.cell-output-display}\n![](seurat_04_clustering_files/figure-html/unnamed-chunk-12-1.png){width=1248}\n:::\n:::\n\n{{< meta clust_save >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(alldata,\"data/results/covid_qc_dr_int_cl.rds\")\n```\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta clust_3 >}}\n\n\n:::\n\n## {{< meta session >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] clustree_0.5.0     ggraph_2.1.0       rafalib_1.0.0      pheatmap_1.0.12   \n[5] ggplot2_3.4.2      cowplot_1.1.1      SeuratObject_4.1.3 Seurat_4.3.0.1    \n\nloaded via a namespace (and not attached):\n  [1] Rtsne_0.16             colorspace_2.1-0       deldir_1.0-9          \n  [4] ellipsis_0.3.2         ggridges_0.5.4         rstudioapi_0.14       \n  [7] spatstat.data_3.0-1    farver_2.1.1           leiden_0.4.3          \n [10] listenv_0.9.0          graphlayouts_1.0.0     ggrepel_0.9.3         \n [13] fansi_1.0.4            codetools_0.2-19       splines_4.2.3         \n [16] knitr_1.43             polyclip_1.10-4        jsonlite_1.8.7        \n [19] ica_1.0-3              cluster_2.1.4          png_0.1-8             \n [22] uwot_0.1.16            ggforce_0.4.1          shiny_1.7.4           \n [25] sctransform_0.3.5      spatstat.sparse_3.0-2  compiler_4.2.3        \n [28] httr_1.4.6             backports_1.4.1        Matrix_1.6-0          \n [31] fastmap_1.1.1          lazyeval_0.2.2         cli_3.6.1             \n [34] tweenr_2.0.2           later_1.3.1            htmltools_0.5.5       \n [37] tools_4.2.3            igraph_1.5.0           gtable_0.3.3          \n [40] glue_1.6.2             RANN_2.6.1             reshape2_1.4.4        \n [43] dplyr_1.1.1            Rcpp_1.0.10            scattermore_1.2       \n [46] vctrs_0.6.3            spatstat.explore_3.2-1 nlme_3.1-162          \n [49] progressr_0.13.0       lmtest_0.9-40          spatstat.random_3.1-5 \n [52] xfun_0.39              stringr_1.5.0          globals_0.16.2        \n [55] mime_0.12              miniUI_0.1.1.1         lifecycle_1.0.3       \n [58] irlba_2.3.5.1          goftest_1.2-3          future_1.33.0         \n [61] MASS_7.3-58.2          zoo_1.8-12             scales_1.2.1          \n [64] tidygraph_1.2.3        promises_1.2.0.1       spatstat.utils_3.0-3  \n [67] parallel_4.2.3         RColorBrewer_1.1-3     yaml_2.3.7            \n [70] reticulate_1.30        pbapply_1.7-2          gridExtra_2.3         \n [73] stringi_1.7.12         checkmate_2.2.0        rlang_1.1.1           \n [76] pkgconfig_2.0.3        matrixStats_1.0.0      evaluate_0.21         \n [79] lattice_0.20-45        ROCR_1.0-11            purrr_1.0.1           \n [82] tensor_1.5             labeling_0.4.2         patchwork_1.1.2       \n [85] htmlwidgets_1.6.2      tidyselect_1.2.0       parallelly_1.36.0     \n [88] RcppAnnoy_0.0.21       plyr_1.8.8             magrittr_2.0.3        \n [91] R6_2.5.1               generics_0.1.3         pillar_1.9.0          \n [94] withr_2.5.0            fitdistrplus_1.1-11    survival_3.5-3        \n [97] abind_1.4-5            sp_2.0-0               tibble_3.2.1          \n[100] future.apply_1.11.0    KernSmooth_2.23-20     utf8_1.2.3            \n[103] spatstat.geom_3.2-1    plotly_4.10.2          rmarkdown_2.21        \n[106] viridis_0.6.3          grid_4.2.3             data.table_1.14.8     \n[109] digest_0.6.33          xtable_1.8-4           tidyr_1.3.0           \n[112] httpuv_1.6.11          munsell_0.5.0          viridisLite_0.4.2     \n```\n:::\n:::\n",
    "supporting": [
      "seurat_04_clustering_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}