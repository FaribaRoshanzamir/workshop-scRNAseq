{
  "hash": "e6cb6e861f131a5b1c5b29aa3066e7bc",
  "result": {
    "markdown": "---\ntitle: \"{{< meta st_title >}}\"\nsubtitle: \"{{< meta subtitle_seurat >}}\"\ndescription: \"{{< meta st_description >}}\"\nformat: html\n---\n\n\n::: {.callout-note}\nCode chunks run R commands unless otherwise specified.\n:::\n\nThis tutorial is adapted from the (Seurat vignette)[https://satijalab.org/seurat/v3.2/spatial_vignette.html].\n\n\n{{< meta st_1 >}}\n\n\n\n## {{< meta st_prep >}}\n\n\n{{< meta st_prep_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# devtools::install_github('satijalab/seurat-data', dependencies=FALSE)\n\nsuppressPackageStartupMessages({\n  require(Matrix)\n  require(dplyr)\n  require(SeuratData)\n  require(Seurat)\n  require(ggplot2)\n  require(patchwork)\n  require(dplyr)\n})\n```\n:::\n\n{{< meta st_prep_2 >}}\n\n\n\nThe package `SeuratData` has some seurat objects for different datasets. Among those are spatial transcriptomics data from mouse brain and kidney. Here we will download and process sections from the mouse brain. \n\n\n::: {.cell}\n\n```{.r .cell-code}\noutdir = \"data/spatial/\"\nif(!dir.exists(outdir)) dir.create(outdir, showWarnings = F)\n\n# to list available datasets in SeuratData you can run AvailableData()\n\n# first we dowload the dataset\nif (!(\"stxBrain.SeuratData\" %in% rownames(InstalledData()))){\n  InstallData(\"stxBrain\")\n}\n\n# now we can list what datasets we have downloaded\nInstalledData()\n\n# now we will load the seurat object for one section\nbrain1 <- LoadData(\"stxBrain\", type = \"anterior1\")\nbrain2 <- LoadData(\"stxBrain\", type = \"posterior1\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|                    |Dataset  |Version |Summary                                                        |species |system      | ncells|tech   |seurat |default.dataset |disk.datasets |other.datasets                               |notes                                                                     |Installed |InstalledVersion |\n|:-------------------|:--------|:-------|:--------------------------------------------------------------|:-------|:-----------|------:|:------|:------|:---------------|:-------------|:--------------------------------------------|:-------------------------------------------------------------------------|:---------|:----------------|\n|bmcite.SeuratData   |bmcite   |0.3.0   |30k Bone Marrow Cells                                          |human   |bone marrow |  30672|NA     |3.2.2  |NA              |NA            |NA                                           |NA                                                                        |TRUE      |0.3.0            |\n|hcabm40k.SeuratData |hcabm40k |3.0.0   |40,000 Cells From the Human Cell Atlas ICA Bone Marrow Dataset |human   |bone marrow |  40000|10x v2 |NA     |raw             |NA            |NA                                           |NA                                                                        |TRUE      |3.0.0            |\n|stxBrain.SeuratData |stxBrain |0.1.1   |10X Genomics Visium Mouse Brain Dataset                        |mouse   |brain       |  12167|visium |NA     |NA              |NA            |posterior1, posterior2, anterior1, anterior2 |One sample split across four datasets as paired anterior/posterior slices |TRUE      |0.1.1            |\n\n</div>\n:::\n:::\n\n\nMerge into one seurat object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrain <- merge(brain1, brain2)\nbrain\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n31053 features across 6049 samples within 1 assay \nActive assay: Spatial (31053 features, 0 variable features)\n 2 images present: anterior1, posterior1\n```\n:::\n:::\n\n\nAs you can see, now we do not have the assay \"RNA\", but instead an assay called \"Spatial\". \n\n## {{< meta st_qc >}}\n\n\n{{< meta st_qc_1 >}}\n\n\n\nNow the counts and feature counts are calculated on the Spatial assay, so they are named  \"nCount_Spatial\" and \"nFeature_Spatial\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrain <- PercentageFeatureSet(brain, \"^mt-\", col.name = \"percent_mito\")\nbrain <- PercentageFeatureSet(brain, \"^Hb.*-\", col.name = \"percent_hb\")\n\nVlnPlot(brain, features = c(\"nCount_Spatial\", \"nFeature_Spatial\",\"percent_mito\",\"percent_hb\"), pt.size = 0.1, ncol = 2) + NoLegend()\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n{{< meta st_qc_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSpatialFeaturePlot(brain, features = c(\"nCount_Spatial\", \"nFeature_Spatial\",\"percent_mito\",\"percent_hb\")) \n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-3-1.png){width=480}\n:::\n:::\n\n{{< meta st_qc_3 >}}\n\n\n\n### {{< meta st_qc_filter >}}\n\n\n{{< meta st_qc_filter_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrain <- brain[, brain$nFeature_Spatial>500 & brain$percent_mito < 25 & brain$percent_hb < 20]\n```\n:::\n\n\nAnd replot onto tissue section:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSpatialFeaturePlot(brain, features = c(\"nCount_Spatial\", \"nFeature_Spatial\",\"percent_mito\"))\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-5-1.png){width=480}\n:::\n:::\n\n\n### {{< meta st_qc_top >}}\n\n\n{{< meta st_qc_top_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nC <- brain@assays$Spatial@counts\nC@x <- C@x / rep.int(colSums(C), diff(C@p))\nmost_expressed <- order(Matrix::rowSums(C), decreasing = T)[20:1]\nboxplot(as.matrix(t(C[most_expressed, ])),\n    cex = 0.1, las = 1, xlab = \"% total count per cell\",\n    col = (scales::hue_pal())(20)[20:1], horizontal = TRUE\n)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-6-1.png){width=576}\n:::\n:::\n\n{{< meta st_qc_top_2 >}}\n\n\n\n### {{< meta st_qc_filterg >}}\n\n\n{{< meta st_qc_filterg_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(brain)\n\n# Filter Bl1\nbrain <- brain[!grepl(\"Bc1\", rownames(brain)), ]\n\n# Filter Mitocondrial\nbrain <- brain[!grepl(\"^mt-\", rownames(brain)), ]\n\n# Filter Hemoglobin gene (optional if that is a problem on your data)\nbrain <- brain[!grepl(\"^Hb.*-\", rownames(brain)), ]\n\ndim(brain)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31053  5789\n[1] 31031  5789\n```\n:::\n:::\n\n\n## {{< meta st_analysis >}}\n\n\n{{< meta st_analysis_1 >}}\n\n\n\nFor ST data, the Seurat team recommends to use SCTranform for normalization, so we will do that. `SCTransform` will select variable genes and normalize in one step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrain <- SCTransform(brain, assay = \"Spatial\", verbose = TRUE, method = 'poisson')\n```\n:::\n\n{{< meta st_analysis_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSpatialFeaturePlot(brain, features = c(\"Hpca\", \"Ttr\"))\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-9-1.png){width=768}\n:::\n:::\n\n\nIf you want to see the tissue better you can modify point size and transparency of the points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSpatialFeaturePlot(brain, features = \"Ttr\", pt.size.factor = 1, alpha = c(0.1, 1))\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n### {{< meta st_analysis_dimred >}}\n\n\n{{< meta st_analysis_dimred_1 >}}\n\n\n\nBut make sure you run it on the `SCT` assay.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrain <- RunPCA(brain, assay = \"SCT\", verbose = FALSE)\nbrain <- FindNeighbors(brain, reduction = \"pca\", dims = 1:30)\nbrain <- FindClusters(brain, verbose = FALSE)\nbrain <- RunUMAP(brain, reduction = \"pca\", dims = 1:30)\n```\n:::\n\n{{< meta st_analysis_dimred_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDimPlot(brain, reduction = \"umap\", group.by = c(\"ident\", \"orig.ident\"))\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-12-1.png){width=864}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSpatialDimPlot(brain)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-13-1.png){width=864}\n:::\n:::\n\n\nWe can also plot each cluster separately\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSpatialDimPlot(brain, cells.highlight = CellsByIdentities(brain), facet.highlight = TRUE, ncol = 5)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-14-1.png){width=1440}\n:::\n:::\n\n\n### {{< meta st_analysis_int >}}\n\n\n{{< meta st_analysis_int_1 >}}\n\n\n\nWe will do a similar integration as in the Data Integration lab, but this time we will use the SCT assay for integration. Therefore we need to run `PrepSCTIntegration` which will compute the sctransform residuals for all genes in both the datasets. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a list of the original data that we loaded to start with\nst.list = list(anterior1=brain1, posterior1=brain2)\n\n# run SCT on both datasets\nst.list = lapply(st.list, SCTransform, assay = \"Spatial\", method='poisson')\n\n# need to set maxSize for PrepSCTIntegration to work\noptions(future.globals.maxSize = 2000 * 1024^2) # set allowed size to 2K MiB\n\nst.features = SelectIntegrationFeatures(st.list, nfeatures = 3000, verbose = FALSE)\nst.list <- PrepSCTIntegration(object.list = st.list, anchor.features = st.features, \n    verbose = FALSE)\n```\n:::\n\n\nNow we can perform the actual integration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nint.anchors <- FindIntegrationAnchors(object.list = st.list, normalization.method = \"SCT\",   verbose = FALSE, anchor.features = st.features)\nbrain.integrated <- IntegrateData(anchorset = int.anchors, normalization.method = \"SCT\", \n    verbose = FALSE)\n\nrm(int.anchors, st.list)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            used   (Mb) gc trigger   (Mb)   max used   (Mb)\nNcells   3531572  188.7    5288777  282.5    5288777  282.5\nVcells 590722626 4506.9 1192401474 9097.4 1176016359 8972.3\n```\n:::\n:::\n\n{{< meta st_analysis_int_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrain.integrated <- RunPCA(brain.integrated, verbose = FALSE)\nbrain.integrated <- FindNeighbors(brain.integrated, dims = 1:30)\nbrain.integrated <- FindClusters(brain.integrated, verbose = FALSE)\nbrain.integrated <- RunUMAP(brain.integrated, dims = 1:30)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDimPlot(brain.integrated, reduction = \"umap\", group.by = c(\"ident\", \"orig.ident\"))\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-18-1.png){width=864}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSpatialDimPlot(brain.integrated)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-19-1.png){width=864}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta st_analysis_int_3 >}}\n\n\n:::\n\n### {{< meta st_analysis_svg >}}\n\n\n{{< meta st_analysis_svg_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# differential expression between cluster 1 and cluster 6\nde_markers <- FindMarkers(brain.integrated, ident.1 = 5, ident.2 = 6)\n\n# plot top markers\nSpatialFeaturePlot(object = brain.integrated, features = rownames(de_markers)[1:3], alpha = c(0.1, 1), ncol = 3)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-20-1.png){width=1152}\n:::\n:::\n\n\nSpatial transcriptomics allows researchers to investigate how gene expression trends varies in space, thus identifying spatial patterns of gene expression. For this purpose there are multiple methods, such as SpatailDE, SPARK, Trendsceek, HMRF and Splotch.\n\nIn `FindSpatiallyVariables` the default method in Seurat (method = 'markvariogram), is inspired by the Trendsceek, which models spatial transcriptomics data as a mark point process and computes a 'variogram', which identifies genes whose expression level is dependent on their spatial location. More specifically, this process calculates gamma(r) values measuring the dependence between two spots a certain \"r\" distance apart. By default, we use an r-value of '5' in these analyses, and only compute these values for variable genes (where variation is calculated independently of spatial location) to save time.\n\n:::{.callout-caution}\nTakes a long time to run, so skip this step for now!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# brain <- FindSpatiallyVariableFeatures(brain, assay = \"SCT\", features = VariableFeatures(brain)[1:1000], \n#     selection.method = \"markvariogram\")\n\n# We would get top features from SpatiallyVariableFeatures\n# top.features <- head(SpatiallyVariableFeatures(brain, selection.method = \"markvariogram\"), 6)\n```\n:::\n\n\n## {{< meta st_ss >}}\n\n\n{{< meta st_ss_1 >}}\n\n\n\nFirst download the seurat data from: https://www.dropbox.com/s/cuowvm4vrf65pvq/allen_cortex.rds?dl=1 to folder `data/spatial/` with command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n\nFILE=\"./data/spatial/allen_cortex.rds\"\n\nif [ -e $FILE ]\nthen\n   echo \"File $FILE is downloaded.\"\nelse\n   echo \"Downloading $FILE\"\n   mkdir -p data/spatial\n   wget  -O data/spatial/allen_cortex.rds https://www.dropbox.com/s/cuowvm4vrf65pvq/allen_cortex.rds?dl=1\nfi\n\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFile ./data/spatial/allen_cortex.rds is downloaded.\n```\n:::\n:::\n\n{{< meta st_ss_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallen_reference <- readRDS(\"data/spatial/allen_cortex.rds\")\n\n# check number of cells per subclass\ntable(allen_reference$subclass)\n\n# select 200 cells per subclass, fist set subclass ass active.ident\nIdents(allen_reference) <- allen_reference$subclass\nallen_reference <- subset(allen_reference, cells = WhichCells(allen_reference, downsample = 200))\n\n# check again number of cells per subclass\ntable(allen_reference$subclass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n     Astro         CR       Endo    L2/3 IT         L4      L5 IT      L5 PT \n       368          7         94        982       1401        880        544 \n     L6 CT      L6 IT        L6b      Lamp5 Macrophage      Meis2         NP \n       960       1872        358       1122         51         45        362 \n     Oligo       Peri      Pvalb   Serpinf1        SMC       Sncg        Sst \n        91         32       1337         27         55        125       1741 \n       Vip       VLMC \n      1728         67 \n\n     Astro         CR       Endo    L2/3 IT         L4      L5 IT      L5 PT \n       200          7         94        200        200        200        200 \n     L6 CT      L6 IT        L6b      Lamp5 Macrophage      Meis2         NP \n       200        200        200        200         51         45        200 \n     Oligo       Peri      Pvalb   Serpinf1        SMC       Sncg        Sst \n        91         32        200         27         55        125        200 \n       Vip       VLMC \n       200         67 \n```\n:::\n:::\n\n\nThen run normalization and dimensionality reduction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First run SCTransform and PCA \nallen_reference <- SCTransform(allen_reference, ncells = 3000, verbose = FALSE, method = 'poisson') %>% RunPCA(verbose = FALSE) %>%    RunUMAP(dims = 1:30)\n\n# the annotation is stored in the 'subclass' column of object metadata\nDimPlot(allen_reference, label = TRUE)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## {{< meta st_sub >}}\n\n\n{{< meta st_sub_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset for the anterior dataset\ncortex <- subset(brain.integrated, orig.ident == \"anterior1\")\n\n# there seems to be an error in the subsetting, so the posterior1 image is not removed, do it manually\ncortex@images$posterior1 = NULL\n\n# subset for a specific region\ncortex <- subset(cortex, anterior1_imagerow > 400 | anterior1_imagecol < 150, invert = TRUE)\ncortex <- subset(cortex, anterior1_imagerow > 275 & anterior1_imagecol > 370, invert = TRUE)\ncortex <- subset(cortex, anterior1_imagerow > 250 & anterior1_imagecol > 440, invert = TRUE)\n\n# also subset for Frontal cortex clusters\ncortex <- subset(cortex, idents = c(1,2,3,4,5))\n\np1 <- SpatialDimPlot(cortex, crop = TRUE, label = TRUE)\np2 <- SpatialDimPlot(cortex, crop = FALSE, label = TRUE, pt.size.factor = 1, label.size = 3)\np1 + p2\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-25-1.png){width=864}\n:::\n:::\n\n\n## {{< meta st_deconv >}}\n\n\n{{< meta st_deconv_1 >}}\n\n\n\nHere we will use SCDC for deconvolution of celltypes in the Visium spots. For more information on the tool please check their website: https://meichendong.github.io/SCDC/articles/SCDC.html. First, make sure the packages you need are installed. All dependencies should be in the conda environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninst = installed.packages()\n\nif (!(\"xbioc\" %in% rownames(inst))){\n  remotes::install_github(\"renozao/xbioc\", dependencies = FALSE)\n}\nif (!(\"SCDC\" %in% rownames(inst))){\n  remotes::install_github(\"meichendong/SCDC\", dependencies = FALSE)\n}\n\nsuppressPackageStartupMessages(require(SCDC))\nsuppressPackageStartupMessages(require(Biobase))\n```\n:::\n\n\n### {{< meta st_deconv_genes >}}\n\n\n{{< meta st_deconv_genes_1 >}}\n\n\n\nFor SCDC we want to find unique markers per cluster, so we select top 20 DEGs per cluster. Ideally you should run with a larger set of genes, perhaps 100 genes per cluster to get better results. However, for the sake of speed, we are now selecting only top20 genes and it still takes about 10 minutes to run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallen_reference@active.assay = \"RNA\"\n\nmarkers_sc <- FindAllMarkers(allen_reference,\n                            only.pos = TRUE,\n                            logfc.threshold = 0.1,\n                            test.use = \"wilcox\",\n                            min.pct = 0.05,\n                            min.diff.pct = 0.1,\n                            max.cells.per.ident = 200,\n                            return.thresh = 0.05,\n                            assay = \"RNA\")\n\n# Filter for genes that are also present in the ST data\nmarkers_sc <- markers_sc[markers_sc$gene %in% rownames(cortex),]\n\n\n# Select top 20 genes per cluster, select top by first p-value, then absolute diff in pct, then quota of pct.\nmarkers_sc$pct.diff <- markers_sc$pct.1 - markers_sc$pct.2\nmarkers_sc$log.pct.diff <- log2( (markers_sc$pct.1*99+1) / (markers_sc$pct.2*99+1) )\nmarkers_sc %>% group_by(cluster)  %>% top_n(-100, p_val) %>% top_n(50, pct.diff) %>% top_n(20, log.pct.diff)-> top20\nm_feats <- unique(as.character(top20$gene))\n```\n:::\n\n\n### Create Expression Sets\n\nFor SCDC both the SC and the ST data need to be in the format of an Expression set with the count matrices as `AssayData`. We also subset the matrices for the genes we selected in the previous step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neset_SC <- ExpressionSet(assayData=as.matrix(allen_reference@assays$RNA@counts[m_feats,]),\n                         phenoData =  AnnotatedDataFrame(allen_reference@meta.data))\neset_ST <- ExpressionSet(assayData=as.matrix(cortex@assays$Spatial@counts[m_feats,]),phenoData = AnnotatedDataFrame(cortex@meta.data))\n```\n:::\n\n\n### Deconvolve\n\nWe then run the deconvolution defining the celltype of interest as \"subclass\" column in the single cell data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeconvolution_crc <- SCDC::SCDC_prop(bulk.eset = eset_ST,\n                       sc.eset = eset_SC,\n                       ct.varname = \"subclass\",\n                       ct.sub = as.character(unique(eset_SC$subclass)) )\n```\n:::\n\n\nNow we have a matrix with predicted proportions of each celltypes for each visium spot in `prop.est.mvw`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(deconvolution_crc$prop.est.mvw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     Lamp5 Sncg Serpinf1          Vip          Sst      Pvalb\nAAACTCGTGATATAAG-1_1     0    0        0 0.000000e+00 0.0003020068 0.00000000\nAAACTGCTGGCTCCAA-1_1     0    0        0 0.000000e+00 0.1544641392 0.07943494\nAAAGGGATGTAGCAAG-1_1     0    0        0 0.000000e+00 0.2742639441 0.00000000\nAAATACCTATAAGCAT-1_1     0    0        0 0.000000e+00 0.0803576731 0.40436150\nAAATCGTGTACCACAA-1_1     0    0        0 0.000000e+00 0.0692640621 0.00000000\nAAATGATTCGATCAGC-1_1     0    0        0 1.705303e-06 0.0169468859 0.08888082\n                           Endo         Peri        L6 CT          L6b\nAAACTCGTGATATAAG-1_1 0.00000000 0.000000e+00 0.0000000000 1.512806e-01\nAAACTGCTGGCTCCAA-1_1 0.02562850 0.000000e+00 0.0280520546 1.959849e-05\nAAAGGGATGTAGCAAG-1_1 0.01131595 0.000000e+00 0.0000000000 0.000000e+00\nAAATACCTATAAGCAT-1_1 0.07365610 1.399958e-05 0.0036921008 0.000000e+00\nAAATCGTGTACCACAA-1_1 0.02785003 5.235782e-06 0.0002147064 2.458057e-01\nAAATGATTCGATCAGC-1_1 0.01403814 2.633453e-02 0.2657130174 0.000000e+00\n                            L6 IT CR    L2/3 IT        L5 PT NP        L4\nAAACTCGTGATATAAG-1_1 0.000000e+00  0 0.00000000 0.0000000000  0 0.0000000\nAAACTGCTGGCTCCAA-1_1 1.699877e-05  0 0.38974934 0.0000000000  0 0.0000000\nAAAGGGATGTAGCAAG-1_1 2.237113e-04  0 0.00000000 0.0000000000  0 0.1814651\nAAATACCTATAAGCAT-1_1 0.000000e+00  0 0.00000000 0.0000793099  0 0.0000000\nAAATCGTGTACCACAA-1_1 2.755082e-05  0 0.31058665 0.0000000000  0 0.0000000\nAAATGATTCGATCAGC-1_1 1.350970e-01  0 0.01172995 0.1013133001  0 0.1530583\n                           Oligo      L5 IT Meis2      Astro  Macrophage VLMC\nAAACTCGTGATATAAG-1_1 0.606350282 0.00000000     0 0.00000000 0.242067127    0\nAAACTGCTGGCTCCAA-1_1 0.070102264 0.00000000     0 0.20493666 0.047592071    0\nAAAGGGATGTAGCAAG-1_1 0.000000000 0.36553725     0 0.15879807 0.008395941    0\nAAATACCTATAAGCAT-1_1 0.090470397 0.00000000     0 0.32968096 0.017682500    0\nAAATCGTGTACCACAA-1_1 0.205850104 0.00000000     0 0.11515601 0.025239945    0\nAAATGATTCGATCAGC-1_1 0.002151596 0.09261913     0 0.08687805 0.005237623    0\n                              SMC\nAAACTCGTGATATAAG-1_1 0.000000e+00\nAAACTGCTGGCTCCAA-1_1 3.440261e-06\nAAAGGGATGTAGCAAG-1_1 0.000000e+00\nAAATACCTATAAGCAT-1_1 5.461144e-06\nAAATCGTGTACCACAA-1_1 0.000000e+00\nAAATGATTCGATCAGC-1_1 0.000000e+00\n```\n:::\n:::\n\n\nNow we take the deconvolution output and add it to the Seurat object as a new assay.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncortex@assays[[\"SCDC\"]] <- CreateAssayObject(data = t(deconvolution_crc$prop.est.mvw))\n\n# Seems to be a bug in SeuratData package that the key is not set and any plotting function etc. will throw an error.\nif (length(cortex@assays$SCDC@key) == 0 ){\n  cortex@assays$SCDC@key = \"scdc_\"\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDefaultAssay(cortex) <- \"SCDC\"\nSpatialFeaturePlot(cortex, features = c(\"L2/3 IT\", \"L4\"), pt.size.factor = 1.6, ncol = 2, crop = TRUE)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-32-1.png){width=768}\n:::\n:::\n\n\nBased on these prediction scores, we can also predict cell types whose location is spatially restricted. We use the same methods based on marked point processes to define spatially variable features, but use the cell type prediction scores as the \"marks\" rather than gene expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncortex <- FindSpatiallyVariableFeatures(cortex, assay = \"SCDC\", selection.method = \"markvariogram\", \n    features = rownames(cortex), r.metric = 5, slot = \"data\")\ntop.clusters <- head(SpatiallyVariableFeatures(cortex), 4)\nSpatialPlot(object = cortex, features = top.clusters, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-33-1.png){width=768}\n:::\n:::\n\n\nWe can also visualize the scores per cluster in ST data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVlnPlot(cortex, group.by = \"seurat_clusters\", features = top.clusters, pt.size = 0, ncol=2)\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n{{< meta st_2 >}}\n\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta st_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset for the anterior dataset\nsubregion <- subset(brain.integrated, orig.ident == \"posterior1\")\n\n# there seems to be an error in the subsetting, so the posterior1 image is not removed, do it manually\nsubregion@images$anterior1 = NULL\n\n# subset for a specific region\nsubregion <- subset(subregion,  posterior1_imagecol > 400, invert = FALSE)\n\np1 <- SpatialDimPlot(subregion, crop = TRUE, label = TRUE)\np2 <- SpatialDimPlot(subregion, crop = FALSE, label = TRUE, pt.size.factor = 1, label.size = 3)\np1 + p2\n```\n\n::: {.cell-output-display}\n![](seurat_07_spatial_files/figure-html/unnamed-chunk-35-1.png){width=864}\n:::\n:::\n\n\n:::\n\n## {{< meta session >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] Biobase_2.58.0            BiocGenerics_0.44.0      \n [3] SCDC_0.0.0.9000           patchwork_1.1.2          \n [5] ggplot2_3.4.2             SeuratObject_4.1.3       \n [7] Seurat_4.3.0.1            stxBrain.SeuratData_0.1.1\n [9] hcabm40k.SeuratData_3.0.0 bmcite.SeuratData_0.3.0  \n[11] SeuratData_0.2.2          dplyr_1.1.1              \n[13] Matrix_1.6-0             \n\nloaded via a namespace (and not attached):\n  [1] backports_1.4.1        plyr_1.8.8             igraph_1.5.0          \n  [4] lazyeval_0.2.2         sp_2.0-0               splines_4.2.3         \n  [7] listenv_0.9.0          scattermore_1.2        GenomeInfoDb_1.34.9   \n [10] digest_0.6.33          htmltools_0.5.5        fansi_1.0.4           \n [13] checkmate_2.2.0        magrittr_2.0.3         memoise_2.0.1         \n [16] tensor_1.5             cluster_2.1.4          ROCR_1.0-11           \n [19] limma_3.54.2           Biostrings_2.66.0      globals_0.16.2        \n [22] matrixStats_1.0.0      spatstat.sparse_3.0-2  colorspace_2.1-0      \n [25] blob_1.2.4             rappdirs_0.3.3         ggrepel_0.9.3         \n [28] xfun_0.39              RCurl_1.98-1.12        crayon_1.5.2          \n [31] jsonlite_1.8.7         progressr_0.13.0       spatstat.data_3.0-1   \n [34] survival_3.5-3         zoo_1.8-12             glue_1.6.2            \n [37] polyclip_1.10-4        registry_0.5-1         gtable_0.3.3          \n [40] zlibbioc_1.44.0        XVector_0.38.0         nnls_1.4              \n [43] leiden_0.4.3           future.apply_1.11.0    abind_1.4-5           \n [46] scales_1.2.1           pheatmap_1.0.12        DBI_1.1.3             \n [49] spatstat.random_3.1-5  miniUI_0.1.1.1         Rcpp_1.0.10           \n [52] viridisLite_0.4.2      xtable_1.8-4           reticulate_1.30       \n [55] bit_4.0.5              stats4_4.2.3           htmlwidgets_1.6.2     \n [58] httr_1.4.6             RColorBrewer_1.1-3     ellipsis_0.3.2        \n [61] ica_1.0-3              pkgconfig_2.0.3        farver_2.1.1          \n [64] uwot_0.1.16            deldir_1.0-9           utf8_1.2.3            \n [67] tidyselect_1.2.0       labeling_0.4.2         rlang_1.1.1           \n [70] reshape2_1.4.4         later_1.3.1            AnnotationDbi_1.60.2  \n [73] cachem_1.0.8           munsell_0.5.0          tools_4.2.3           \n [76] cli_3.6.1              generics_0.1.3         RSQLite_2.3.1         \n [79] xbioc_0.1.19           ggridges_0.5.4         evaluate_0.21         \n [82] stringr_1.5.0          fastmap_1.1.1          yaml_2.3.7            \n [85] goftest_1.2-3          fastmatrix_0.5         knitr_1.43            \n [88] bit64_4.0.5            fitdistrplus_1.1-11    purrr_1.0.1           \n [91] RANN_2.6.1             KEGGREST_1.38.0        pbapply_1.7-2         \n [94] future_1.33.0          nlme_3.1-162           mime_0.12             \n [97] ggrastr_1.0.2          compiler_4.2.3         rstudioapi_0.14       \n[100] beeswarm_0.4.0         plotly_4.10.2          png_0.1-8             \n[103] spatstat.utils_3.0-3   tibble_3.2.1           stringi_1.7.12        \n[106] lattice_0.20-45        vctrs_0.6.3            pillar_1.9.0          \n[109] lifecycle_1.0.3        BiocManager_1.30.21.1  spatstat.geom_3.2-1   \n[112] lmtest_0.9-40          RcppAnnoy_0.0.21       bitops_1.0-7          \n[115] data.table_1.14.8      cowplot_1.1.1          irlba_2.3.5.1         \n[118] httpuv_1.6.11          R6_2.5.1               promises_1.2.0.1      \n[121] KernSmooth_2.23-20     gridExtra_2.3          IRanges_2.32.0        \n[124] vipor_0.4.5            parallelly_1.36.0      codetools_0.2-19      \n[127] assertthat_0.2.1       MASS_7.3-58.2          pkgmaker_0.32.8       \n[130] withr_2.5.0            sctransform_0.3.5      GenomeInfoDbData_1.2.9\n[133] S4Vectors_0.36.2       parallel_4.2.3         grid_4.2.3            \n[136] tidyr_1.3.0            L1pack_0.41-2          rmarkdown_2.21        \n[139] Rtsne_0.16             spatstat.explore_3.2-1 shiny_1.7.4           \n[142] ggbeeswarm_0.7.2      \n```\n:::\n:::\n",
    "supporting": [
      "seurat_07_spatial_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}