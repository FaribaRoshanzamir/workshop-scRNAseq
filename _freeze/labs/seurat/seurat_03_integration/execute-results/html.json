{
  "hash": "07dfc6ac8158c978b6583f3eccaa07ce",
  "result": {
    "markdown": "---\ntitle: \"{{< meta int_title >}}\"\nsubtitle: \"{{< meta subtitle_seurat >}}\"\ndescription: \"{{< meta int_description >}}\"\nformat: html\n---\n\n\n::: {.callout-note}\nCode chunks run R commands unless otherwise specified.\n:::\n\n\n{{< meta int_1 >}}\n\n\n\n|Markdown | Language | Library | Ref|\n|:---|:---|:---|:---|\n|CCA | R | Seurat | [Cell](https://www.sciencedirect.com/science/article/pii/S0092867419305598?via%3Dihub)|\n|MNN | R/Python | Scater/Scanpy | [Nat. Biotech.](https://www.nature.com/articles/nbt.4091)|\n|Conos | R | conos | [Nat. Methods](https://www.nature.com/articles/s41592-019-0466-z?error=cookies_not_supported&code=5680289b-6edb-40ad-9934-415dac4fdb2f)|\n|Scanorama | Python | scanorama | [Nat. Biotech.](https://www.nature.com/articles/s41587-019-0113-3)|\n\n## {{< meta int_prep >}}\n\n\n{{< meta int_prep_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(Seurat)\n  library(cowplot)\n  library(ggplot2)\n})\n\nalldata <- readRDS(\"data/results/covid_qc_dr.rds\")\nprint(names(alldata@reductions))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pca\"               \"umap\"              \"tsne\"             \n[4] \"UMAP10_on_PCA\"     \"UMAP_on_ScaleData\" \"UMAP_on_Graph\"    \n```\n:::\n:::\n\n{{< meta int_prep_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalldata.list <- SplitObject(alldata, split.by = \"orig.ident\")\n\nfor (i in 1:length(alldata.list)) {\n    alldata.list[[i]] <- NormalizeData(alldata.list[[i]], verbose = FALSE)\n    alldata.list[[i]] <- FindVariableFeatures(alldata.list[[i]], selection.method = \"vst\", nfeatures = 2000,verbose = FALSE)\n}\n\nhvgs_per_dataset <- lapply(alldata.list, function(x) { x@assays$RNA@var.features })\n# venn::venn(hvgs_per_dataset,opacity = .4,zcolor = scales::hue_pal()(3),cexsn = 1,cexil = 1,lwd=1,col=\"white\",frame=F,borders = NA)\n\ntemp <- unique(unlist(hvgs_per_dataset))\noverlap <- sapply( hvgs_per_dataset , function(x) { temp %in% x } )\npheatmap::pheatmap(t(overlap*1),cluster_rows = F ,\n                   color = c(\"grey90\",\"grey20\"))\n```\n\n::: {.cell-output-display}\n![](seurat_03_integration_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\n## CCA\n\nWe identify anchors using the FindIntegrationAnchors function, which takes a list of Seurat objects as input.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalldata.anchors <- FindIntegrationAnchors(object.list = alldata.list, dims = 1:30,reduction = \"cca\")\n```\n:::\n\n\nWe then pass these anchors to the IntegrateData function, which returns a Seurat object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalldata.int <- IntegrateData(anchorset = alldata.anchors, dims = 1:30, new.assay.name = \"CCA\")\n```\n:::\n\n\nWe can observe that a new assay slot is now created under the name `CCA`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(alldata.int@assays)\n\n# by default, Seurat now sets the integrated assay as the default assay, so any operation you now perform will be on the ingegrated data.\nalldata.int@active.assay\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"RNA\" \"CCA\"\n[1] \"CCA\"\n```\n:::\n:::\n\n\nAfter running IntegrateData, the Seurat object will contain a new Assay with the integrated (or **batch-corrected**) expression matrix. Note that the original (uncorrected values) are still stored in the object in the “RNA” assay, so you can switch back and forth. We can then use this new integrated matrix for downstream analysis and visualization. Here we scale the integrated data, run PCA, and visualize the results with UMAP and TSNE. The integrated datasets cluster by cell type, instead of by technology.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Run Dimensionality reduction on integrated space\nalldata.int <- ScaleData(alldata.int, verbose = FALSE)\nalldata.int <- RunPCA(alldata.int, npcs = 30, verbose = FALSE)\nalldata.int <- RunUMAP(alldata.int, dims = 1:30)\nalldata.int <- RunTSNE(alldata.int, dims = 1:30)\n```\n:::\n\n{{< meta int_plot >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(ncol = 3,\n  DimPlot(alldata, reduction = \"pca\", group.by = \"orig.ident\")+NoAxes()+ggtitle(\"PCA raw_data\"),\n  DimPlot(alldata, reduction = \"tsne\", group.by = \"orig.ident\")+NoAxes()+ggtitle(\"tSNE raw_data\"),\n  DimPlot(alldata, reduction = \"umap\", group.by = \"orig.ident\")+NoAxes()+ggtitle(\"UMAP raw_data\"),\n  \n  DimPlot(alldata.int, reduction = \"pca\", group.by = \"orig.ident\")+NoAxes()+ggtitle(\"PCA integrated\"),\n  DimPlot(alldata.int, reduction = \"tsne\", group.by = \"orig.ident\")+NoAxes()+ggtitle(\"tSNE integrated\"),\n  DimPlot(alldata.int, reduction = \"umap\", group.by = \"orig.ident\")+NoAxes()+ggtitle(\"UMAP integrated\")\n)\n```\n\n::: {.cell-output-display}\n![](seurat_03_integration_files/figure-html/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n{{< meta dimred_plotgenes_1 >}}\n\n\n\n|Markers|Cell Type|\n|:---|:---|\n|CD3E|T cells|\n|CD3E CD4|CD4+ T cells|\n|CD3E CD8A|CD8+ T cells|\n|GNLY, NKG7|NK cells|\n|MS4A1|B cells|\n|CD14, LYZ, CST3, MS4A7|CD14+ Monocytes|\n|FCGR3A, LYZ, CST3, MS4A7|FCGR3A+  Monocytes|\n|FCER1A, CST3|DCs|\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfeatures <- c(\"CD3E\",\"CD4\",\"CD8A\",\"NKG7\",\"GNLY\",\"MS4A1\",\"CD14\",\"LYZ\",\"MS4A7\",\"FCGR3A\",\"CST3\",\"FCER1A\")\nplot_list <- list()\nfor(i in myfeatures){\n  plot_list[[i]] <- FeaturePlot(alldata, reduction = \"umap\",dims = 1:2,\n            features = i,ncol = 3,order = T) + NoLegend() + NoAxes() + NoGrid() }\nplot_grid(ncol=3, plotlist = plot_list)\n```\n\n::: {.cell-output-display}\n![](seurat_03_integration_files/figure-html/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(harmony)\n\nalldata.harmony <- RunHarmony(\n  alldata,\n  group.by.vars = \"orig.ident\",\n  reduction = \"pca\",\n  dims.use = 1:50,\n  assay.use = \"RNA\")\n\n#Here we use all PCs computed from Harmony for UMAP calculation\nalldata.int[[\"harmony\"]] <- alldata.harmony[[\"harmony\"]]\nalldata.int <- RunUMAP(alldata.int, dims = 1:50, reduction = \"harmony\", reduction.name = \"umap_harmony\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhvgs <- unique(unlist(hvgs_per_dataset))\n\nassaylist <- list()\ngenelist <- list()\nfor(i in 1:length(alldata.list)) {\n  assaylist[[i]] <- t(as.matrix(GetAssayData(alldata.list[[i]], \"data\")[hvgs,]))\n  genelist[[i]] <- hvgs\n}\n\nlapply(assaylist,dim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1]  535 5203\n\n[[2]]\n[1]  851 5203\n\n[[3]]\n[1]  946 5203\n\n[[4]]\n[1] 1026 5203\n\n[[5]]\n[1] 1139 5203\n\n[[6]]\n[1] 1035 5203\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nreticulate::use_condaenv(\"sspy\")\nscanorama <- import(\"scanorama\")\n\nintegrated.data <- scanorama$integrate(datasets_full = assaylist,\n                                       genes_list = genelist )\n\nintdimred <- do.call(rbind, integrated.data[[1]])\ncolnames(intdimred) <- paste0(\"PC_\", 1:100)\nrownames(intdimred) <- colnames(alldata.int)\n\n# Add standard deviations in order to draw Elbow Plots in Seurat\nstdevs <- apply(intdimred, MARGIN = 2, FUN = sd)\n\nalldata.int[[\"scanorama\"]] <- CreateDimReducObject(\n  embeddings = intdimred,\n  stdev      = stdevs,\n  key        = \"PC_\",\n  assay      = \"RNA\")\n\n#Here we use all PCs computed from Scanorama for UMAP calculation\nalldata.int <- RunUMAP(alldata.int, dims = 1:100, reduction = \"scanorama\",reduction.name = \"umap_scanorama\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- DimPlot(alldata, reduction = \"umap\", group.by = \"orig.ident\")+ggtitle(\"UMAP raw_data\")\np2 <- DimPlot(alldata.int, reduction = \"umap\", group.by = \"orig.ident\")+ggtitle(\"UMAP CCA\")\np3 <- DimPlot(alldata.int, reduction = \"umap_harmony\", group.by = \"orig.ident\")+ggtitle(\"UMAP Harmony\")\np4 <- DimPlot(alldata.int, reduction = \"umap_scanorama\", group.by = \"orig.ident\")+ggtitle(\"UMAP Scanorama\")\nleg <- get_legend(p1)\n\ngridExtra::grid.arrange(\n  gridExtra::arrangeGrob(\n    p1 + NoLegend() + NoAxes(),\n    p2 + NoLegend() + NoAxes(),\n    p3 + NoLegend() + NoAxes(),\n    p4 + NoLegend() + NoAxes(), nrow=2),\n  leg, ncol=2,widths=c(8,2)\n)\n```\n\n::: {.cell-output-display}\n![](seurat_03_integration_files/figure-html/unnamed-chunk-12-1.png){width=864}\n:::\n:::\n\n{{< meta int_save >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(alldata.int,\"data/results/covid_qc_dr_int.rds\")\n```\n:::\n\n\n## {{< meta session >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] reticulate_1.30    harmony_0.1.1      Rcpp_1.0.10        ggplot2_3.4.2     \n[5] cowplot_1.1.1      SeuratObject_4.1.3 Seurat_4.3.0.1    \n\nloaded via a namespace (and not attached):\n  [1] Rtsne_0.16             colorspace_2.1-0       deldir_1.0-9          \n  [4] ellipsis_0.3.2         ggridges_0.5.4         rprojroot_2.0.3       \n  [7] rstudioapi_0.14        spatstat.data_3.0-1    farver_2.1.1          \n [10] leiden_0.4.3           listenv_0.9.0          ggrepel_0.9.3         \n [13] fansi_1.0.4            codetools_0.2-19       splines_4.2.3         \n [16] knitr_1.43             polyclip_1.10-4        jsonlite_1.8.7        \n [19] ica_1.0-3              cluster_2.1.4          png_0.1-8             \n [22] pheatmap_1.0.12        uwot_0.1.16            shiny_1.7.4           \n [25] sctransform_0.3.5      spatstat.sparse_3.0-2  compiler_4.2.3        \n [28] httr_1.4.6             Matrix_1.6-0           fastmap_1.1.1         \n [31] lazyeval_0.2.2         cli_3.6.1              later_1.3.1           \n [34] htmltools_0.5.5        tools_4.2.3            igraph_1.5.0          \n [37] gtable_0.3.3           glue_1.6.2             RANN_2.6.1            \n [40] reshape2_1.4.4         dplyr_1.1.1            rappdirs_0.3.3        \n [43] scattermore_1.2        vctrs_0.6.3            spatstat.explore_3.2-1\n [46] nlme_3.1-162           progressr_0.13.0       lmtest_0.9-40         \n [49] spatstat.random_3.1-5  xfun_0.39              stringr_1.5.0         \n [52] globals_0.16.2         mime_0.12              miniUI_0.1.1.1        \n [55] lifecycle_1.0.3        irlba_2.3.5.1          goftest_1.2-3         \n [58] future_1.33.0          MASS_7.3-58.2          zoo_1.8-12            \n [61] scales_1.2.1           promises_1.2.0.1       spatstat.utils_3.0-3  \n [64] parallel_4.2.3         RColorBrewer_1.1-3     yaml_2.3.7            \n [67] pbapply_1.7-2          gridExtra_2.3          stringi_1.7.12        \n [70] rlang_1.1.1            pkgconfig_2.0.3        matrixStats_1.0.0     \n [73] evaluate_0.21          lattice_0.20-45        ROCR_1.0-11           \n [76] purrr_1.0.1            tensor_1.5             labeling_0.4.2        \n [79] patchwork_1.1.2        htmlwidgets_1.6.2      tidyselect_1.2.0      \n [82] here_1.0.1             parallelly_1.36.0      RcppAnnoy_0.0.21      \n [85] plyr_1.8.8             magrittr_2.0.3         R6_2.5.1              \n [88] generics_0.1.3         pillar_1.9.0           withr_2.5.0           \n [91] fitdistrplus_1.1-11    survival_3.5-3         abind_1.4-5           \n [94] sp_2.0-0               tibble_3.2.1           future.apply_1.11.0   \n [97] KernSmooth_2.23-20     utf8_1.2.3             spatstat.geom_3.2-1   \n[100] plotly_4.10.2          rmarkdown_2.21         grid_4.2.3            \n[103] data.table_1.14.8      digest_0.6.33          xtable_1.8-4          \n[106] tidyr_1.3.0            httpuv_1.6.11          munsell_0.5.0         \n[109] viridisLite_0.4.2     \n```\n:::\n:::\n",
    "supporting": [
      "seurat_03_integration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}