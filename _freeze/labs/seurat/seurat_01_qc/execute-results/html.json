{
  "hash": "f4a1536354d15d9a7f37c603cacd1257",
  "result": {
    "markdown": "---\ntitle: \"{{< meta qc_title >}}\"\nsubtitle: \"{{< meta subtitle_seurat >}}\"\ndescription: \"{{< meta qc_description >}}\"\nformat: html\n---\n\n\n::: {.callout-note}\nCode chunks run R commands unless otherwise specified.\n:::\n\n## {{< meta qc_data >}}\n\n\n{{< meta qc_data_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwebpath <- \"https://raw.githubusercontent.com/NBISweden/workshop-scRNAseq/new_dataset/labs/data/covid_data_GSE149689/sub/\"\n\nif(!dir.exists(\"./data/raw\")){\n  dir.create(\"./data/raw\", recursive = T)\n  file_list <- c(\n      \"Normal_PBMC_13.h5\", \"Normal_PBMC_14.h5\", \"Normal_PBMC_5.h5\",\n      \"nCoV_PBMC_15.h5\", \"nCoV_PBMC_17.h5\", \"nCoV_PBMC_1.h5\"\n  )\n  for (i in file_list) {\n      download.file(\n          url = paste0(webpath, i),\n          destfile = paste0(\"./data/raw/\", i)\n      )\n  }\n}\n```\n:::\n\n{{< meta qc_data_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(require(Seurat))\nsuppressMessages(require(Matrix))\nif(!\"DoubletFinder\" %in% rownames(installed.packages())){\n   remotes::install_github('chris-mcginnis-ucsf/DoubletFinder',upgrade = FALSE, dependencies=TRUE)\n}\nsuppressMessages(require(DoubletFinder))\n```\n:::\n\n{{< meta qc_data_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov.15 <- Seurat::Read10X_h5(\n  filename = \"data/raw/nCoV_PBMC_15.h5\",\n  use.names = T)\ncov.1 <- Seurat::Read10X_h5(\n  filename = \"data/raw/nCoV_PBMC_1.h5\",\n  use.names = T)\ncov.17 <- Seurat::Read10X_h5(\n  filename = \"data/raw/nCoV_PBMC_17.h5\",\n  use.names = T)\n\nctrl.5 <- Seurat::Read10X_h5(\n  filename = \"data/raw/Normal_PBMC_5.h5\",\n  use.names = T)\nctrl.13 <- Seurat::Read10X_h5(\n  filename = \"data/raw/Normal_PBMC_13.h5\",\n  use.names = T)\nctrl.14 <- Seurat::Read10X_h5(\n  filename = \"data/raw/Normal_PBMC_14.h5\",\n  use.names = T)\n```\n:::\n\n\n## {{< meta qc_collate >}}\n\n\n{{< meta qc_collate_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdata.cov15 <- CreateSeuratObject(cov.15,  project = \"covid_15\")\nsdata.cov1 <- CreateSeuratObject(cov.1,  project = \"covid_1\")\nsdata.cov17 <- CreateSeuratObject(cov.17,  project = \"covid_17\")\nsdata.ctrl5 <- CreateSeuratObject(ctrl.5,  project = \"ctrl_5\")\nsdata.ctrl13 <- CreateSeuratObject(ctrl.13,  project = \"ctrl_13\")\nsdata.ctrl14 <- CreateSeuratObject(ctrl.14,  project = \"ctrl_14\")\n\n# add metadata\nsdata.cov1$type = \"Covid\"\nsdata.cov15$type = \"Covid\"\nsdata.cov17$type = \"Covid\"\nsdata.ctrl5$type = \"Ctrl\"\nsdata.ctrl13$type = \"Ctrl\"\nsdata.ctrl14$type = \"Ctrl\"\n\n# Merge datasets into one single seurat object\nalldata <- merge(sdata.cov15, c(sdata.cov1, sdata.cov17, sdata.ctrl5, sdata.ctrl13, sdata.ctrl14), add.cell.ids=c(\"covid_15\",\"covid_1\",\"covid_17\",\"ctrl_5\",\"ctrl_13\", \"ctrl_14\"))\n```\n:::\n\n{{< meta qc_collate_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove all objects that will not be used.\nrm(cov.15, cov.1, cov.17, ctrl.5, ctrl.13, ctrl.14, sdata.cov15, sdata.cov1, sdata.cov17, sdata.ctrl5, sdata.ctrl13, sdata.ctrl14)\n# run garbage collect to free up memory\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           used  (Mb) gc trigger  (Mb)  max used  (Mb)\nNcells  3320867 177.4    5034297 268.9   5034297 268.9\nVcells 44666805 340.8  111637299 851.8 102353080 780.9\n```\n:::\n:::\n\n{{< meta qc_collate_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(alldata@assays$RNA@counts[1:10,1:2])\nhead(alldata@meta.data,10)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|            | covid_15_CTCCATGTCAACGTGT-15| covid_15_CATAAGCAGGAACGAA-15|\n|:-----------|----------------------------:|----------------------------:|\n|MIR1302-2HG |                            0|                            0|\n|FAM138A     |                            0|                            0|\n|OR4F5       |                            0|                            0|\n|AL627309.1  |                            0|                            0|\n|AL627309.3  |                            0|                            0|\n|AL627309.2  |                            0|                            0|\n|AL627309.4  |                            0|                            0|\n|AL732372.1  |                            0|                            0|\n|OR4F29      |                            0|                            0|\n|AC114498.1  |                            0|                            0|\n\n</div><div class=\"kable-table\">\n\n|                             |orig.ident | nCount_RNA| nFeature_RNA|type  |\n|:----------------------------|:----------|----------:|------------:|:-----|\n|covid_15_CTCCATGTCAACGTGT-15 |covid_15   |      14911|         3526|Covid |\n|covid_15_CATAAGCAGGAACGAA-15 |covid_15   |        338|          203|Covid |\n|covid_15_TTCACCGTCAGGAAGC-15 |covid_15   |      28486|         4542|Covid |\n|covid_15_CGTCCATGTCCGGACT-15 |covid_15   |       1318|          539|Covid |\n|covid_15_GTCCACTAGTCGCCCA-15 |covid_15   |       4805|         1493|Covid |\n|covid_15_ATCCATTGTTGATGTC-15 |covid_15   |       5386|         1617|Covid |\n|covid_15_AGAAGCGAGGGCCTCT-15 |covid_15   |        686|          407|Covid |\n|covid_15_GAGGGTAGTAGGTTTC-15 |covid_15   |       2155|         1116|Covid |\n|covid_15_CAAGACTTCTGCTTTA-15 |covid_15   |       1216|          128|Covid |\n|covid_15_GCCAACGAGCTCTATG-15 |covid_15   |        729|          356|Covid |\n\n</div>\n:::\n:::\n\n\n## {{< meta qc_calqc >}}\n\n\n{{< meta qc_calqc_1 >}}\n\n\n{{< meta qc_calqc_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# method 1: doing it using Seurat function\nalldata <- PercentageFeatureSet(alldata, \"^MT-\", col.name = \"percent_mito\")\n\n# method 2: doing it manually\ntotal_counts_per_cell <- colSums(alldata@assays$RNA@counts)\nmito_genes <- rownames(alldata)[grep(\"^MT-\",rownames(alldata))]\nalldata$percent_mito <- colSums(alldata@assays$RNA@counts[mito_genes,]) / total_counts_per_cell\nhead(mito_genes,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"MT-ND1\"  \"MT-ND2\"  \"MT-CO1\"  \"MT-CO2\"  \"MT-ATP8\" \"MT-ATP6\" \"MT-CO3\" \n [8] \"MT-ND3\"  \"MT-ND4L\" \"MT-ND4\" \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# method 1: doing it using Seurat function\nalldata <- PercentageFeatureSet(alldata, \"^RP[SL]\", col.name = \"percent_ribo\")\n# Percentage hemoglobin genes - includes all genes starting with HB except HBP.\nalldata <- PercentageFeatureSet(alldata, \"^HB[^(P)]\", col.name = \"percent_hb\")\nalldata <- PercentageFeatureSet(alldata, \"PECAM1|PF4\", col.name = \"percent_plat\")\n\n# method 2: doing it manually\nribo_genes <- rownames(alldata)[grep(\"^RP[SL]\",rownames(alldata))]\nhead(ribo_genes,10)\nalldata$percent_ribo <- colSums(alldata@assays$RNA@counts[ribo_genes,]) / total_counts_per_cell\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"RPL22\"   \"RPL11\"   \"RPS6KA1\" \"RPS8\"    \"RPL5\"    \"RPS27\"   \"RPS6KC1\"\n [8] \"RPS7\"    \"RPS27A\"  \"RPL31\"  \n```\n:::\n:::\n\n{{< meta qc_calqc_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(alldata[[]])\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|                             |orig.ident | nCount_RNA| nFeature_RNA|type  | percent_mito| percent_ribo| percent_hb| percent_plat|\n|:----------------------------|:----------|----------:|------------:|:-----|------------:|------------:|----------:|------------:|\n|covid_15_CTCCATGTCAACGTGT-15 |covid_15   |      14911|         3526|Covid |    0.1097177|    0.1006639|  0.0134129|    0.0469452|\n|covid_15_CATAAGCAGGAACGAA-15 |covid_15   |        338|          203|Covid |    0.0532544|    0.0325444|  0.0000000|    0.0000000|\n|covid_15_TTCACCGTCAGGAAGC-15 |covid_15   |      28486|         4542|Covid |    0.0559924|    0.1379976|  0.0070210|    0.0351050|\n|covid_15_CGTCCATGTCCGGACT-15 |covid_15   |       1318|          539|Covid |    0.1267071|    0.3399090|  0.0000000|    0.0758725|\n|covid_15_GTCCACTAGTCGCCCA-15 |covid_15   |       4805|         1493|Covid |    0.0713840|    0.3552549|  0.0000000|    0.0000000|\n|covid_15_ATCCATTGTTGATGTC-15 |covid_15   |       5386|         1617|Covid |    0.0428890|    0.1164129|  0.0000000|    0.0557000|\n\n</div>\n:::\n:::\n\n\n## {{< meta qc_plotqc >}}\n\n\n{{< meta qc_plotqc_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeats <- c(\"nFeature_RNA\",\"nCount_RNA\",\"percent_mito\",\"percent_ribo\", \"percent_hb\")\nVlnPlot(alldata, group.by= \"orig.ident\", features = feats, pt.size = 0.1,ncol = 3) + NoLegend()\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-10-1.png){width=1440}\n:::\n:::\n\n{{< meta qc_plotqc_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFeatureScatter(alldata, \"nCount_RNA\"  , \"nFeature_RNA\", group.by = \"orig.ident\", pt.size = .5)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-11-1.png){width=1440}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta qc_plotqc_3 >}}\n\n\n:::\n\n## {{< meta qc_filter >}}\n\n### {{< meta qc_filter_detect >}}\n\n\n{{< meta qc_filter_detect_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_c <- WhichCells(alldata, expression = nFeature_RNA > 200)\nselected_f <- rownames(alldata)[ Matrix::rowSums(alldata) > 3]\n\ndata.filt <- subset(alldata, features=selected_f, cells=selected_c)\ndim(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18147  7973\n```\n:::\n:::\n\n{{< meta qc_filter_detect_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# skip for now and run DoubletFinder first!\n\n#high.det.v3 <- WhichCells(data.filt, expression = nFeature_RNA > 4100)\n#high.det.v2 <- WhichCells(data.filt, expression = nFeature_RNA > 2000 & orig.ident == \"v2.1k\")\n\n# remove these cells\n#data.filt <- subset(data.filt, cells=setdiff(WhichCells(data.filt),c(high.det.v2,high.det.v3)))\n\n# check number of cells\nncol(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7973\n```\n:::\n:::\n\n{{< meta qc_filter_detect_4 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the relative expression of each gene per cell\n# Use sparse matrix operations, if your dataset is large, doing matrix devisions the regular way will take a very long time.\n# par(mar=c(4,8,2,1))\nC <- data.filt@assays$RNA@counts\nC <-  Matrix::t(Matrix::t(C) / Matrix::colSums(C)) * 100\nmost_expressed <- order(apply(C,1,median),decreasing = T)[20:1]\nboxplot(as.matrix(t(C[most_expressed,])),cex=.1, las=1, xlab=\"% total count per cell\",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-14-1.png){width=1440}\n:::\n:::\n\n{{< meta qc_filter_detect_5 >}}\n\n\n\n### {{< meta qc_filter_mr >}}\n\n\n{{< meta qc_filter_mr_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_mito <- WhichCells(data.filt, expression = percent_mito < 0.20)\nselected_ribo <- WhichCells(data.filt, expression = percent_ribo > 0.05)\n\n# and subset the object to only keep those cells\ndata.filt <- subset(data.filt, cells = selected_mito)\ndata.filt <- subset(data.filt, cells = selected_ribo)\ndim(data.filt)\ntable(data.filt$orig.ident)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18147  5762\n\n covid_1 covid_15 covid_17  ctrl_13  ctrl_14   ctrl_5 \n     878      585     1042     1154     1063     1040 \n```\n:::\n:::\n\n{{< meta qc_filter_mr_2 >}}\n\n\n\n### {{< meta qc_filter_plot >}}\n\n\n{{< meta qc_filter_plot_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeats <- c(\"nFeature_RNA\",\"nCount_RNA\",\"percent_mito\",\"percent_ribo\", \"percent_hb\")\nVlnPlot(data.filt, group.by= \"orig.ident\", features = feats, pt.size = 0.1,ncol = 3) + NoLegend()\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-16-1.png){width=1440}\n:::\n:::\n\n\n### {{< meta qc_filter_genes >}}\n\n\n{{< meta qc_filter_genes_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data.filt)\n\n# Filter MALAT1\ndata.filt <- data.filt[ ! grepl(\"MALAT1\", rownames(data.filt)), ]\n\n# Filter Mitocondrial\ndata.filt <- data.filt[ ! grepl(\"^MT-\", rownames(data.filt)), ]\n\n# Filter Ribossomal gene (optional if that is a problem on your data)\n# data.filt <- data.filt[ ! grepl(\"^RP[SL]\", rownames(data.filt)), ]\n\n# Filter Hemoglobin gene (optional if that is a problem on your data)\ndata.filt <- data.filt[ ! grepl(\"^HB[^(P)]\", rownames(data.filt)), ]\n\ndim(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18147  5762\n[1] 18121  5762\n```\n:::\n:::\n\n\n## {{< meta qc_sex >}}\n\n\n{{< meta qc_sex_1 >}}\n\n\n{{< meta qc_sex_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenes.file = \"data/results/genes.table.csv\"\n\nif (!file.exists(genes.file)){\n  suppressMessages(require(biomaRt))\n\n  # initialize connection to mart, may take some time if the sites are unresponsive.\n  mart <- useMart(\"ENSEMBL_MART_ENSEMBL\", dataset=\"hsapiens_gene_ensembl\")\n\n  # fetch chromosome info plus some other annotations\n  genes.table <- try(biomaRt::getBM(attributes = c(\"ensembl_gene_id\",\n              \"external_gene_name\", \"description\",\"gene_biotype\", \"chromosome_name\",\"start_position\"),\n              mart = mart, useCache = F))\n  \n  if(!dir.exists(\"data/results\")){dir.create(\"data/results\")}\n  if(is.data.frame(genes.table)){write.csv(genes.table, file = genes.file)}\n  \n  if (!file.exists(genes.file)){\n  download.file(\"https://raw.githubusercontent.com/NBISweden/workshop-scRNAseq/master/labs/misc/genes.table.csv\",destfile = \"data/results/genes.table.csv\")\n    genes.table = read.csv(genes.file)\n    }\n\n} else {\n  genes.table = read.csv(genes.file)\n}\n\ngenes.table <- genes.table[genes.table$external_gene_name %in% rownames(data.filt),]\n```\n:::\n\n{{< meta qc_sex_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchrY.gene = genes.table$external_gene_name[genes.table$chromosome_name == \"Y\"]\ndata.filt$pct_chrY = colSums(data.filt@assays$RNA@counts[chrY.gene,]) / colSums(data.filt@assays$RNA@counts)\n```\n:::\n\n{{< meta qc_sex_4 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFeatureScatter(data.filt, feature1 = \"XIST\", feature2 = \"pct_chrY\")\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n{{< meta qc_sex_5 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVlnPlot(data.filt, features = c(\"XIST\", \"pct_chrY\"))\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n{{< meta qc_sex_6 >}}\n\n\n\n## {{< meta qc_cellcycle >}}\n\n\n{{< meta qc_cellcycle_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Before running CellCycleScoring the data need to be normalized and logtransformed.\ndata.filt = NormalizeData(data.filt)\ndata.filt <- CellCycleScoring(object = data.filt,\n                              g2m.features = cc.genes$g2m.genes,\n                              s.features = cc.genes$s.genes)\n```\n:::\n\n{{< meta qc_cellcycle_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVlnPlot(data.filt, features = c(\"S.Score\",\"G2M.Score\"), group.by= \"orig.ident\",ncol = 4, pt.size = .1)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-23-1.png){width=1440}\n:::\n:::\n\n{{< meta qc_cellcycle_3 >}}\n\n\n\n## {{< meta qc_doublet >}}\n\n\n{{< meta qc_doublet_1 >}}\n\n\n\n:::{.callout-caution}\n\n{{< meta qc_doublet_2 >}}\n\n\n:::\n\nHere, we will use `DoubletFinder` to predict doublet cells. But before doing doublet detection we need to run scaling, variable gene selection and pca, as well as UMAP for visualization. These steps will be explored in more detail in coming exercises.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(require(DoubletFinder))\n\ndata.filt = FindVariableFeatures(data.filt, verbose = F)\ndata.filt = ScaleData(data.filt, vars.to.regress = c(\"nFeature_RNA\", \"percent_mito\"), verbose = F)\ndata.filt = RunPCA(data.filt, verbose = F, npcs = 20)\ndata.filt = RunUMAP(data.filt, dims = 1:10, verbose = F)\n```\n:::\n\n\nThen we run doubletFinder, selecting first 10 PCs and a pK value of 0.9. To optimize the parameters, you can run the `paramSweep` function in the package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Can run parameter optimization with paramSweep\n\n#sweep.res <- paramSweep_v3(data.filt)\n#sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)\n#bcmvn <- find.pK(sweep.stats)\n#barplot(bcmvn$BCmetric, names.arg = bcmvn$pK, las=2)\n\n# define the expected number of doublet cellscells.\nnExp <- round(ncol(data.filt)* 0.04) # expect 4% doublets\ndata.filt <- doubletFinder_v3(data.filt, pN=0.25, pK = 0.09, nExp = nExp, PCs = 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Creating 1921 artificial doublets...\"\n[1] \"Creating Seurat object...\"\n[1] \"Normalizing Seurat object...\"\n[1] \"Finding variable genes...\"\n[1] \"Scaling data...\"\n[1] \"Running PCA...\"\n[1] \"Calculating PC distance matrix...\"\n[1] \"Computing pANN...\"\n[1] \"Classifying doublets..\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# name of the DF prediction can change, so extract the correct column name.\nDF.name = colnames(data.filt@meta.data)[grepl(\"DF.classification\", colnames(data.filt@meta.data))]\n\ncowplot::plot_grid( ncol = 2,\nDimPlot(data.filt, group.by = \"orig.ident\") + NoAxes(),\nDimPlot(data.filt, group.by = DF.name) + NoAxes()\n)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n{{< meta qc_doublet_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVlnPlot(data.filt, features = \"nFeature_RNA\", group.by = DF.name, pt.size = .1)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n{{< meta qc_doublet_4 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.filt = data.filt[,data.filt@meta.data[,DF.name] == \"Singlet\"]\ndim(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18121  5532\n```\n:::\n:::\n\n\n## {{< meta qc_save >}}\n\n\n{{< meta qc_save_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!dir.exists(\"data/results\")) dir.create(\"data/results\", showWarnings = F)\nif (!file.exists(\"data/results/seurat_covid_qc.rds\")) saveRDS(data.filt, \"data/results/seurat_covid_qc.rds\")\n```\n:::\n\n\n## {{< meta session >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] KernSmooth_2.23-20  fields_14.1         viridis_0.6.3      \n[4] viridisLite_0.4.2   spam_2.9-1          DoubletFinder_2.0.3\n[7] Matrix_1.6-0        SeuratObject_4.1.3  Seurat_4.3.0.1     \n\nloaded via a namespace (and not attached):\n  [1] ggbeeswarm_0.7.2       Rtsne_0.16             colorspace_2.1-0      \n  [4] deldir_1.0-9           ellipsis_0.3.2         ggridges_0.5.4        \n  [7] rstudioapi_0.14        spatstat.data_3.0-1    farver_2.1.1          \n [10] leiden_0.4.3           listenv_0.9.0          bit64_4.0.5           \n [13] ggrepel_0.9.3          fansi_1.0.4            codetools_0.2-19      \n [16] splines_4.2.3          knitr_1.43             polyclip_1.10-4       \n [19] jsonlite_1.8.7         ica_1.0-3              cluster_2.1.4         \n [22] png_0.1-8              uwot_0.1.16            shiny_1.7.4           \n [25] sctransform_0.3.5      spatstat.sparse_3.0-2  compiler_4.2.3        \n [28] httr_1.4.6             fastmap_1.1.1          lazyeval_0.2.2        \n [31] cli_3.6.1              later_1.3.1            htmltools_0.5.5       \n [34] tools_4.2.3            dotCall64_1.0-2        igraph_1.5.0          \n [37] gtable_0.3.3           glue_1.6.2             RANN_2.6.1            \n [40] reshape2_1.4.4         dplyr_1.1.1            maps_3.4.1            \n [43] Rcpp_1.0.10            scattermore_1.2        vctrs_0.6.3           \n [46] spatstat.explore_3.2-1 nlme_3.1-162           progressr_0.13.0      \n [49] lmtest_0.9-40          spatstat.random_3.1-5  xfun_0.39             \n [52] stringr_1.5.0          globals_0.16.2         mime_0.12             \n [55] miniUI_0.1.1.1         lifecycle_1.0.3        irlba_2.3.5.1         \n [58] goftest_1.2-3          future_1.33.0          MASS_7.3-58.2         \n [61] zoo_1.8-12             scales_1.2.1           promises_1.2.0.1      \n [64] spatstat.utils_3.0-3   parallel_4.2.3         RColorBrewer_1.1-3    \n [67] yaml_2.3.7             reticulate_1.30        pbapply_1.7-2         \n [70] gridExtra_2.3          ggrastr_1.0.2          ggplot2_3.4.2         \n [73] stringi_1.7.12         rlang_1.1.1            pkgconfig_2.0.3       \n [76] matrixStats_1.0.0      evaluate_0.21          lattice_0.20-45       \n [79] ROCR_1.0-11            purrr_1.0.1            tensor_1.5            \n [82] labeling_0.4.2         patchwork_1.1.2        htmlwidgets_1.6.2     \n [85] bit_4.0.5              cowplot_1.1.1          tidyselect_1.2.0      \n [88] parallelly_1.36.0      RcppAnnoy_0.0.21       plyr_1.8.8            \n [91] magrittr_2.0.3         R6_2.5.1               generics_0.1.3        \n [94] withr_2.5.0            pillar_1.9.0           fitdistrplus_1.1-11   \n [97] survival_3.5-3         abind_1.4-5            sp_2.0-0              \n[100] tibble_3.2.1           future.apply_1.11.0    hdf5r_1.3.8           \n[103] utf8_1.2.3             spatstat.geom_3.2-1    plotly_4.10.2         \n[106] rmarkdown_2.21         grid_4.2.3             data.table_1.14.8     \n[109] digest_0.6.33          xtable_1.8-4           tidyr_1.3.0           \n[112] httpuv_1.6.11          munsell_0.5.0          beeswarm_0.4.0        \n[115] vipor_0.4.5           \n```\n:::\n:::\n",
    "supporting": [
      "seurat_01_qc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}