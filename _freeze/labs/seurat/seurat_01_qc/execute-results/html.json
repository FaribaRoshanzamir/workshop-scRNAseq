{
  "hash": "a5dd261bcf357e03ab0a5a1cafc9029f",
  "result": {
    "markdown": "---\ntitle: \"{{< meta qc_title >}}\"\nsubtitle: \"{{< meta subtitle_seurat >}}\"\ndescription: \"{{< meta qc_description >}}\"\nformat: html\n---\n\n\n::: {.callout-note}\nCode chunks run R commands unless otherwise specified.\n:::\n\n## {{< meta qc_data >}}\n\n\n{{< meta qc_data_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_data <- \"https://export.uppmax.uu.se/naiss2023-23-3/workshops/workshop-scrnaseq\"\n\npath_covid <- \"./data/covid\"\nif (!dir.exists(path_covid)) dir.create(path_covid, recursive = T)\n\npath_results <- \"data/covid/results\"\nif (!dir.exists(path_results)) dir.create(path_results, recursive = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_list <- c(\n    \"normal_pbmc_13.h5\", \"normal_pbmc_14.h5\", \"normal_pbmc_19.h5\", \"normal_pbmc_5.h5\",\n    \"ncov_pbmc_15.h5\", \"ncov_pbmc_16.h5\", \"ncov_pbmc_17.h5\", \"ncov_pbmc_1.h5\"\n)\n\nfor (i in file_list) {\n    path_file <- file.path(path_covid, i)\n    if (!file.exists(path_file)) {\n        download.file(url = file.path(file.path(path_data, \"covid\"), i), destfile = path_file)\n    }\n}\n```\n:::\n\n{{< meta qc_data_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n    library(Seurat)\n    library(Matrix)\n    library(ggplot2)\n    library(patchwork)\n    # remotes::install_github(\"chris-mcginnis-ucsf/DoubletFinder\", upgrade = FALSE, dependencies = TRUE)\n    # library(DoubletFinder)\n})\n```\n:::\n\n{{< meta qc_data_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov.15 <- Seurat::Read10X_h5(\n    filename = file.path(path_covid, \"ncov_pbmc_15.h5\"),\n    use.names = T\n)\ncov.1 <- Seurat::Read10X_h5(\n    filename = file.path(path_covid, \"ncov_pbmc_1.h5\"),\n    use.names = T\n)\ncov.16 <- Seurat::Read10X_h5(\n    filename = file.path(path_covid, \"ncov_pbmc_16.h5\"),\n    use.names = T\n)\ncov.17 <- Seurat::Read10X_h5(\n    filename = file.path(path_covid, \"ncov_pbmc_17.h5\"),\n    use.names = T\n)\n\nctrl.5 <- Seurat::Read10X_h5(\n    filename = file.path(path_covid, \"normal_pbmc_5.h5\"),\n    use.names = T\n)\nctrl.13 <- Seurat::Read10X_h5(\n    filename = file.path(path_covid, \"normal_pbmc_13.h5\"),\n    use.names = T\n)\nctrl.14 <- Seurat::Read10X_h5(\n    filename = file.path(path_covid, \"normal_pbmc_14.h5\"),\n    use.names = T\n)\nctrl.19 <- Seurat::Read10X_h5(\n    filename = file.path(path_covid, \"normal_pbmc_19.h5\"),\n    use.names = T\n)\n```\n:::\n\n\n## {{< meta qc_collate >}}\n\n\n{{< meta qc_collate_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsdata.cov1 <- CreateSeuratObject(cov.1, project = \"covid_1\")\nsdata.cov15 <- CreateSeuratObject(cov.15, project = \"covid_15\")\nsdata.cov17 <- CreateSeuratObject(cov.17, project = \"covid_17\")\nsdata.cov16 <- CreateSeuratObject(cov.16, project = \"covid_16\")\nsdata.ctrl5 <- CreateSeuratObject(ctrl.5, project = \"ctrl_5\")\nsdata.ctrl13 <- CreateSeuratObject(ctrl.13, project = \"ctrl_13\")\nsdata.ctrl14 <- CreateSeuratObject(ctrl.14, project = \"ctrl_14\")\nsdata.ctrl19 <- CreateSeuratObject(ctrl.19, project = \"ctrl_19\")\n\n\n# add metadata\nsdata.cov1$type <- \"Covid\"\nsdata.cov15$type <- \"Covid\"\nsdata.cov16$type <- \"Covid\"\nsdata.cov17$type <- \"Covid\"\n\nsdata.ctrl5$type <- \"Ctrl\"\nsdata.ctrl13$type <- \"Ctrl\"\nsdata.ctrl14$type <- \"Ctrl\"\nsdata.ctrl19$type <- \"Ctrl\"\n\n# Merge datasets into one single seurat object\nalldata <- merge(sdata.cov1, c(sdata.cov15, sdata.cov16, sdata.cov17, sdata.ctrl5, sdata.ctrl13, sdata.ctrl14, sdata.ctrl19), add.cell.ids = c(\"covid_1\", \"covid_15\", \"covid_16\", \"covid_17\", \"ctrl_5\", \"ctrl_13\", \"ctrl_14\", \"ctrl_19\"))\n```\n:::\n\n{{< meta qc_collate_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove all objects that will not be used.\nrm(cov.1, cov.15, cov.16, cov.17, ctrl.5, ctrl.13, ctrl.14, ctrl.19, sdata.cov1, sdata.cov15, sdata.cov16, sdata.cov17, sdata.ctrl5, sdata.ctrl13, sdata.ctrl14, sdata.ctrl19)\n# run garbage collect to free up memory\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           used  (Mb) gc trigger (Mb)  max used   (Mb)\nNcells  3325148 177.6    4998455  267   4998455  267.0\nVcells 58182116 443.9  150859217 1151 136166276 1038.9\n```\n:::\n:::\n\n{{< meta qc_collate_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(alldata@assays$RNA@counts[1:10, 1:2])\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"covid_1_AGGTAGGTCGTTGTTT-1\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"covid_1_TAGAGTCGTCCTCCAT-1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"MIR1302-2HG\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"FAM138A\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"OR4F5\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"AL627309.1\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"AL627309.3\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"AL627309.2\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"AL627309.4\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"AL732372.1\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"OR4F29\"},{\"1\":\"0\",\"2\":\"0\",\"_rn_\":\"AC114498.1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nhead(alldata@meta.data, 10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"orig.ident\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"nCount_RNA\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"nFeature_RNA\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"covid_1\",\"2\":\"1396\",\"3\":\"656\",\"4\":\"Covid\",\"_rn_\":\"covid_1_AGGTAGGTCGTTGTTT-1\"},{\"1\":\"covid_1\",\"2\":\"1613\",\"3\":\"779\",\"4\":\"Covid\",\"_rn_\":\"covid_1_TAGAGTCGTCCTCCAT-1\"},{\"1\":\"covid_1\",\"2\":\"9482\",\"3\":\"2036\",\"4\":\"Covid\",\"_rn_\":\"covid_1_CCCTGATAGCGAACTG-1\"},{\"1\":\"covid_1\",\"2\":\"4357\",\"3\":\"875\",\"4\":\"Covid\",\"_rn_\":\"covid_1_TCATCATTCCACGTAA-1\"},{\"1\":\"covid_1\",\"2\":\"12466\",\"3\":\"3290\",\"4\":\"Covid\",\"_rn_\":\"covid_1_ATTTACCCAAGCCTGC-1\"},{\"1\":\"covid_1\",\"2\":\"5541\",\"3\":\"1606\",\"4\":\"Covid\",\"_rn_\":\"covid_1_GTTGTCCTCTAGAACC-1\"},{\"1\":\"covid_1\",\"2\":\"2167\",\"3\":\"697\",\"4\":\"Covid\",\"_rn_\":\"covid_1_CCTCCAACAAGAGATT-1\"},{\"1\":\"covid_1\",\"2\":\"4736\",\"3\":\"1285\",\"4\":\"Covid\",\"_rn_\":\"covid_1_AATAGAGGTGTGAGCA-1\"},{\"1\":\"covid_1\",\"2\":\"6196\",\"3\":\"1775\",\"4\":\"Covid\",\"_rn_\":\"covid_1_GGTGGCTAGCGAATGC-1\"},{\"1\":\"covid_1\",\"2\":\"603\",\"3\":\"104\",\"4\":\"Covid\",\"_rn_\":\"covid_1_TCGGGCACAGTGTGGA-1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## {{< meta qc_calqc >}}\n\n\n{{< meta qc_calqc_1 >}}\n\n\n{{< meta qc_calqc_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# method 1: doing it using Seurat function\nalldata <- PercentageFeatureSet(alldata, \"^MT-\", col.name = \"percent_mito\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# OBS! Do not run now!\n# example method 2: doing it manually\ntotal_counts_per_cell <- colSums(alldata@assays$RNA@counts)\nmito_genes <- rownames(alldata)[grep(\"^MT-\", rownames(alldata))]\nalldata$percent_mito2 <- colSums(alldata@assays$RNA@counts[mito_genes, ]) / total_counts_per_cell\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ribosomal\nalldata <- PercentageFeatureSet(alldata, \"^RP[SL]\", col.name = \"percent_ribo\")\n# Percentage hemoglobin genes - includes all genes starting with HB except HBP.\nalldata <- PercentageFeatureSet(alldata, \"^HB[^(P|E|S)]\", col.name = \"percent_hb\")\n# Percentage for some platelet markers\nalldata <- PercentageFeatureSet(alldata, \"PECAM1|PF4\", col.name = \"percent_plat\")\n```\n:::\n\n{{< meta qc_calqc_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(alldata[[]])\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"orig.ident\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"nCount_RNA\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"nFeature_RNA\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"percent_mito\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"percent_ribo\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"percent_hb\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"percent_plat\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"covid_1\",\"2\":\"1396\",\"3\":\"656\",\"4\":\"Covid\",\"5\":\"1.862464\",\"6\":\"0.7879656\",\"7\":\"0.071633238\",\"8\":\"0.3581662\",\"_rn_\":\"covid_1_AGGTAGGTCGTTGTTT-1\"},{\"1\":\"covid_1\",\"2\":\"1613\",\"3\":\"779\",\"4\":\"Covid\",\"5\":\"11.531308\",\"6\":\"5.9516429\",\"7\":\"0.000000000\",\"8\":\"0.4959702\",\"_rn_\":\"covid_1_TAGAGTCGTCCTCCAT-1\"},{\"1\":\"covid_1\",\"2\":\"9482\",\"3\":\"2036\",\"4\":\"Covid\",\"5\":\"8.025733\",\"6\":\"43.8409618\",\"7\":\"0.031638895\",\"8\":\"0.0210926\",\"_rn_\":\"covid_1_CCCTGATAGCGAACTG-1\"},{\"1\":\"covid_1\",\"2\":\"4357\",\"3\":\"875\",\"4\":\"Covid\",\"5\":\"67.936654\",\"6\":\"2.2722056\",\"7\":\"0.045903144\",\"8\":\"0.1147579\",\"_rn_\":\"covid_1_TCATCATTCCACGTAA-1\"},{\"1\":\"covid_1\",\"2\":\"12466\",\"3\":\"3290\",\"4\":\"Covid\",\"5\":\"5.502968\",\"6\":\"18.2977699\",\"7\":\"0.008021819\",\"8\":\"0.0401091\",\"_rn_\":\"covid_1_ATTTACCCAAGCCTGC-1\"},{\"1\":\"covid_1\",\"2\":\"5541\",\"3\":\"1606\",\"4\":\"Covid\",\"5\":\"12.759430\",\"6\":\"30.0306804\",\"7\":\"0.054141852\",\"8\":\"0.1624256\",\"_rn_\":\"covid_1_GTTGTCCTCTAGAACC-1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## {{< meta qc_plotqc >}}\n\n\n{{< meta qc_plotqc_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeats <- c(\"nFeature_RNA\", \"nCount_RNA\", \"percent_mito\", \"percent_ribo\", \"percent_hb\", \"percent_plat\")\nVlnPlot(alldata, group.by = \"orig.ident\", features = feats, pt.size = 0.1, ncol = 3) + NoLegend()\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-12-1.png){width=1440}\n:::\n:::\n\n{{< meta qc_plotqc_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFeatureScatter(alldata, \"nCount_RNA\", \"nFeature_RNA\", group.by = \"orig.ident\", pt.size = .5)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-13-1.png){width=1440}\n:::\n:::\n\n\n:::{.callout-note title=\"Discuss\"}\n\n{{< meta qc_plotqc_3 >}}\n\n\n:::\n\n## {{< meta qc_filter >}}\n\n### {{< meta qc_filter_detect >}}\n\n\n{{< meta qc_filter_detect_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_c <- WhichCells(alldata, expression = nFeature_RNA > 200)\nselected_f <- rownames(alldata)[Matrix::rowSums(alldata) > 3]\n\ndata.filt <- subset(alldata, features = selected_f, cells = selected_c)\ndim(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18877 10656\n```\n:::\n\n```{.r .cell-code}\ntable(data.filt$orig.ident)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n covid_1 covid_15 covid_16 covid_17  ctrl_13  ctrl_14  ctrl_19   ctrl_5 \n    1254     1283     1127     1371     1417     1399     1434     1371 \n```\n:::\n:::\n\n{{< meta qc_filter_detect_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# skip and run DoubletFinder instead\n# data.filt <- subset(data.filt, cells=WhichCells(data.filt, expression = nFeature_RNA < 4100))\n```\n:::\n\n{{< meta qc_filter_detect_4 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the proportion of counts of each gene per cell\n# Use sparse matrix operations, if your dataset is large, doing matrix devisions the regular way will take a very long time.\n\nC <- data.filt@assays$RNA@counts\nC@x <- C@x / rep.int(colSums(C), diff(C@p)) * 100\nmost_expressed <- order(Matrix::rowSums(C), decreasing = T)[20:1]\nboxplot(as.matrix(t(C[most_expressed, ])),\n    cex = 0.1, las = 1, xlab = \"Percent counts per cell\",\n    col = (scales::hue_pal())(20)[20:1], horizontal = TRUE\n)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-16-1.png){width=1440}\n:::\n:::\n\n{{< meta qc_filter_detect_5 >}}\n\n\n\n### {{< meta qc_filter_mr >}}\n\n\n{{< meta qc_filter_mr_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_mito <- WhichCells(data.filt, expression = percent_mito < 20)\nselected_ribo <- WhichCells(data.filt, expression = percent_ribo > 5)\n\n# and subset the object to only keep those cells\ndata.filt <- subset(data.filt, cells = selected_mito)\ndata.filt <- subset(data.filt, cells = selected_ribo)\ndim(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18877  7431\n```\n:::\n\n```{.r .cell-code}\ntable(data.filt$orig.ident)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n covid_1 covid_15 covid_16 covid_17  ctrl_13  ctrl_14  ctrl_19   ctrl_5 \n     900      599      373     1101     1173     1063     1170     1052 \n```\n:::\n:::\n\n{{< meta qc_filter_mr_2 >}}\n\n\n\n### {{< meta qc_filter_plot >}}\n\n\n{{< meta qc_filter_plot_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeats <- c(\"nFeature_RNA\", \"nCount_RNA\", \"percent_mito\", \"percent_ribo\", \"percent_hb\")\nVlnPlot(data.filt, group.by = \"orig.ident\", features = feats, pt.size = 0.1, ncol = 3) + NoLegend()\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-18-1.png){width=1440}\n:::\n:::\n\n\n### {{< meta qc_filter_genes >}}\n\n\n{{< meta qc_filter_genes_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18877  7431\n```\n:::\n\n```{.r .cell-code}\n# Filter MALAT1\ndata.filt <- data.filt[!grepl(\"MALAT1\", rownames(data.filt)), ]\n\n# Filter Mitocondrial\ndata.filt <- data.filt[!grepl(\"^MT-\", rownames(data.filt)), ]\n\n# Filter Ribossomal gene (optional if that is a problem on your data)\n# data.filt <- data.filt[ ! grepl(\"^RP[SL]\", rownames(data.filt)), ]\n\n# Filter Hemoglobin gene (optional if that is a problem on your data)\ndata.filt <- data.filt[!grepl(\"^HB[^(P)]\", rownames(data.filt)), ]\n\ndim(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18851  7431\n```\n:::\n:::\n\n\n## {{< meta qc_sex >}}\n\n\n{{< meta qc_sex_1 >}}\n\n\n{{< meta qc_sex_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this code chunk is not executed\nsuppressMessages(library(biomaRt))\n\n# initialize connection to mart, may take some time if the sites are unresponsive.\nmart <- useMart(\"ENSEMBL_MART_ENSEMBL\", dataset = \"hsapiens_gene_ensembl\")\n\n# fetch chromosome info plus some other annotations\ngenes_table <- try(biomaRt::getBM(attributes = c(\n    \"ensembl_gene_id\", \"external_gene_name\",\n    \"description\", \"gene_biotype\", \"chromosome_name\", \"start_position\"\n), mart = mart, useCache = F))\n\nwrite.csv(genes_table, file = \"data/results/genes_table.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenes_file <- file.path(path_results, \"genes_table.csv\")\n\nif (!file.exists(genes_file)) download.file(file.path(path_data, \"covid/results/genes_table.csv\"), destfile = genes_file)\ngenes.table <- read.csv(genes_file)\n\ngenes.table <- genes.table[genes.table$external_gene_name %in% rownames(data.filt), ]\n```\n:::\n\n{{< meta qc_sex_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchrY.gene <- genes.table$external_gene_name[genes.table$chromosome_name == \"Y\"]\ndata.filt$pct_chrY <- colSums(data.filt@assays$RNA@counts[chrY.gene, ]) / colSums(data.filt@assays$RNA@counts)\n```\n:::\n\n{{< meta qc_sex_4 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFeatureScatter(data.filt, feature1 = \"XIST\", feature2 = \"pct_chrY\")\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n{{< meta qc_sex_5 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVlnPlot(data.filt, features = c(\"XIST\", \"pct_chrY\"))\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n{{< meta qc_sex_6 >}}\n\n\n\n## {{< meta qc_cellcycle >}}\n\n\n{{< meta qc_cellcycle_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Before running CellCycleScoring the data need to be normalized and logtransformed.\ndata.filt <- NormalizeData(data.filt)\ndata.filt <- CellCycleScoring(\n    object = data.filt,\n    g2m.features = cc.genes$g2m.genes,\n    s.features = cc.genes$s.genes\n)\n```\n:::\n\n{{< meta qc_cellcycle_2 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVlnPlot(data.filt, features = c(\"S.Score\", \"G2M.Score\"), group.by = \"orig.ident\", ncol = 4, pt.size = .1)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-26-1.png){width=1440}\n:::\n:::\n\n{{< meta qc_cellcycle_3 >}}\n\n\n\nSeurat does an automatic prediction of cell cycle phase with a default cutoff of the scores at zero. As you can see this does not fit this data very well, so be cautios with using these predictions. Instead we suggest that you look at the scores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFeatureScatter(data.filt, \"S.Score\", \"G2M.Score\", group.by = \"Phase\")\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-27-1.png){width=1440}\n:::\n:::\n\n\n## {{< meta qc_doublet >}}\n\n\n{{< meta qc_doublet_1 >}}\n\n\n\n:::{.callout-caution}\n\n{{< meta qc_doublet_2 >}}\n\n\n:::\n\nHere, we will use `DoubletFinder` to predict doublet cells. But before doing doublet detection we need to run scaling, variable gene selection and pca, as well as UMAP for visualization. These steps will be explored in more detail in coming exercises.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(library(DoubletFinder))\n\ndata.filt <- FindVariableFeatures(data.filt, verbose = F)\ndata.filt <- ScaleData(data.filt, vars.to.regress = c(\"nFeature_RNA\", \"percent_mito\"), verbose = F)\ndata.filt <- RunPCA(data.filt, verbose = F, npcs = 20)\ndata.filt <- RunUMAP(data.filt, dims = 1:10, verbose = F)\n```\n:::\n\n\nThen we run doubletFinder, selecting first 10 PCs and a pK value of 0.9. To optimize the parameters, you can run the `paramSweep` function in the package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Can run parameter optimization with paramSweep\n\n# sweep.res <- paramSweep_v3(data.filt)\n# sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)\n# bcmvn <- find.pK(sweep.stats)\n# barplot(bcmvn$BCmetric, names.arg = bcmvn$pK, las=2)\n\n# define the expected number of doublet cellscells.\nnExp <- round(ncol(data.filt) * 0.04) # expect 4% doublets\ndata.filt <- doubletFinder_v3(data.filt, pN = 0.25, pK = 0.09, nExp = nExp, PCs = 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Creating 2477 artificial doublets...\"\n[1] \"Creating Seurat object...\"\n[1] \"Normalizing Seurat object...\"\n[1] \"Finding variable genes...\"\n[1] \"Scaling data...\"\n[1] \"Running PCA...\"\n[1] \"Calculating PC distance matrix...\"\n[1] \"Computing pANN...\"\n[1] \"Classifying doublets..\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# name of the DF prediction can change, so extract the correct column name.\nDF.name <- colnames(data.filt@meta.data)[grepl(\"DF.classification\", colnames(data.filt@meta.data))]\n\nwrap_plots(\n    DimPlot(data.filt, group.by = \"orig.ident\") + NoAxes(),\n    DimPlot(data.filt, group.by = DF.name) + NoAxes(),\n    ncol = 2\n)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n{{< meta qc_doublet_3 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVlnPlot(data.filt, features = \"nFeature_RNA\", group.by = DF.name, pt.size = .1)\n```\n\n::: {.cell-output-display}\n![](seurat_01_qc_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n{{< meta qc_doublet_4 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.filt <- data.filt[, data.filt@meta.data[, DF.name] == \"Singlet\"]\ndim(data.filt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18851  7134\n```\n:::\n:::\n\n\n## {{< meta qc_save >}}\n\n\n{{< meta qc_save_1 >}}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(data.filt, file.path(path_results, \"seurat_covid_qc.rds\"))\n```\n:::\n\n\n## {{< meta session >}}\n\n<details>\n  <summary>Click here</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Etc/UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] KernSmooth_2.23-20  fields_14.1         viridis_0.6.3      \n [4] viridisLite_0.4.2   spam_2.9-1          DoubletFinder_2.0.3\n [7] patchwork_1.1.2     ggplot2_3.4.2       Matrix_1.5-4       \n[10] SeuratObject_4.1.3  Seurat_4.3.0       \n\nloaded via a namespace (and not attached):\n  [1] deldir_1.0-9           pbapply_1.7-0          gridExtra_2.3         \n  [4] rlang_1.1.1            magrittr_2.0.3         RcppAnnoy_0.0.20      \n  [7] spatstat.geom_3.2-1    matrixStats_1.0.0      ggridges_0.5.4        \n [10] compiler_4.3.0         maps_3.4.1             png_0.1-8             \n [13] vctrs_0.6.2            reshape2_1.4.4         hdf5r_1.3.8           \n [16] stringr_1.5.0          pkgconfig_2.0.3        fastmap_1.1.1         \n [19] ellipsis_0.3.2         labeling_0.4.2         utf8_1.2.3            \n [22] promises_1.2.0.1       rmarkdown_2.22         bit_4.0.5             \n [25] purrr_1.0.1            xfun_0.39              jsonlite_1.8.5        \n [28] goftest_1.2-3          later_1.3.1            spatstat.utils_3.0-3  \n [31] irlba_2.3.5.1          parallel_4.3.0         cluster_2.1.4         \n [34] R6_2.5.1               ica_1.0-3              stringi_1.7.12        \n [37] RColorBrewer_1.1-3     spatstat.data_3.0-1    reticulate_1.30       \n [40] parallelly_1.36.0      lmtest_0.9-40          scattermore_1.2       \n [43] Rcpp_1.0.10            knitr_1.43             tensor_1.5            \n [46] future.apply_1.11.0    zoo_1.8-12             sctransform_0.3.5     \n [49] httpuv_1.6.11          splines_4.3.0          igraph_1.4.3          \n [52] tidyselect_1.2.0       abind_1.4-5            rstudioapi_0.14       \n [55] yaml_2.3.7             spatstat.random_3.1-5  codetools_0.2-19      \n [58] miniUI_0.1.1.1         spatstat.explore_3.2-1 listenv_0.9.0         \n [61] lattice_0.21-8         tibble_3.2.1           plyr_1.8.8            \n [64] withr_2.5.0            shiny_1.7.4            ROCR_1.0-11           \n [67] evaluate_0.21          Rtsne_0.16             future_1.32.0         \n [70] survival_3.5-5         polyclip_1.10-4        fitdistrplus_1.1-11   \n [73] pillar_1.9.0           plotly_4.10.2          generics_0.1.3        \n [76] sp_1.6-1               munsell_0.5.0          scales_1.2.1          \n [79] globals_0.16.2         xtable_1.8-4           glue_1.6.2            \n [82] lazyeval_0.2.2         tools_4.3.0            data.table_1.14.8     \n [85] RANN_2.6.1             dotCall64_1.0-2        leiden_0.4.3          \n [88] cowplot_1.1.1          grid_4.3.0             tidyr_1.3.0           \n [91] colorspace_2.1-0       nlme_3.1-162           cli_3.6.1             \n [94] spatstat.sparse_3.0-1  fansi_1.0.4            dplyr_1.1.2           \n [97] uwot_0.1.14            gtable_0.3.3           digest_0.6.31         \n[100] progressr_0.13.0       ggrepel_0.9.3          farver_2.1.1          \n[103] htmlwidgets_1.6.2      htmltools_0.5.5        lifecycle_1.0.3       \n[106] httr_1.4.6             mime_0.12              bit64_4.0.5           \n[109] MASS_7.3-58.4         \n```\n:::\n:::\n\n\n</details>",
    "supporting": [
      "seurat_01_qc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}